
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800b258  0800b258  0000c258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b724  0800b724  0000d1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b724  0800b724  0000c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b72c  0800b72c  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b72c  0800b72c  0000c72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b730  0800b730  0000c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b734  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  200001e8  0800b91c  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  0800b91c  0000dbb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023548  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004227  00000000  00000000  00030760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002158  00000000  00000000  00034988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a03  00000000  00000000  00036ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb93  00000000  00000000  000384e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025064  00000000  00000000  00065076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001152e9  00000000  00000000  0008a0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019f3c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1bc  00000000  00000000  0019f408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dd  00000000  00000000  001a95c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b23c 	.word	0x0800b23c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b23c 	.word	0x0800b23c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Wrapper to transmit on UART1 using printf
int __io_putchar(int ch) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8000f1c:	1d39      	adds	r1, r7, #4
 8000f1e:	2364      	movs	r3, #100	@ 0x64
 8000f20:	2201      	movs	r2, #1
 8000f22:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <__io_putchar+0x20>)
 8000f24:	f006 fc92 	bl	800784c <HAL_UART_Transmit>
	return 1;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003e8 	.word	0x200003e8

08000f38 <HAL_GPIO_EXTI_Callback>:

//Callback function to jump to when external interruption happens
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	//Switch LED2 on/off of every interruption
	//Toggle machine state every time User button is pressed
	coff_mkr_status = !coff_mkr_status;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf0c      	ite	eq
 8000f4a:	2301      	moveq	r3, #1
 8000f4c:	2300      	movne	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f54:	701a      	strb	r2, [r3, #0]
	if (coff_mkr_status) {
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_EXTI_Callback+0x2e>
		printf("COFFEE MAKER ON!!\r\n");
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f60:	f008 f9fc 	bl	800935c <puts>
	}
	else
		printf("COFFEE MAKER OFF!!\r\n");
}
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0x34>
		printf("COFFEE MAKER OFF!!\r\n");
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x44>)
 8000f68:	f008 f9f8 	bl	800935c <puts>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200009dc 	.word	0x200009dc
 8000f78:	0800b258 	.word	0x0800b258
 8000f7c:	0800b26c 	.word	0x0800b26c

08000f80 <ReadWaterLevel>:
//Read Water Level and control Warning LED to turn on if water < 25%
void ReadWaterLevel(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	static uint8_t prev_time = 0;
	HAL_ADC_Start(&hadc1);
 8000f86:	4822      	ldr	r0, [pc, #136]	@ (8001010 <ReadWaterLevel+0x90>)
 8000f88:	f002 f8aa 	bl	80030e0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f90:	481f      	ldr	r0, [pc, #124]	@ (8001010 <ReadWaterLevel+0x90>)
 8000f92:	f002 f95f 	bl	8003254 <HAL_ADC_PollForConversion>
	//Get adc input and convert to 0-100%
	uint8_t water_lvl = HAL_ADC_GetValue(&hadc1) * (100.0 / 4096.0);
 8000f96:	481e      	ldr	r0, [pc, #120]	@ (8001010 <ReadWaterLevel+0x90>)
 8000f98:	f002 fa34 	bl	8003404 <HAL_ADC_GetValue>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fab0 	bl	8000504 <__aeabi_ui2d>
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <ReadWaterLevel+0x94>)
 8000faa:	f7ff fb25 	bl	80005f8 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fdf7 	bl	8000ba8 <__aeabi_d2uiz>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	//Check if water level less then 25%, and switch warning led on if true
	if (water_lvl <= 25)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b19      	cmp	r3, #25
 8000fc2:	d806      	bhi.n	8000fd2 <ReadWaterLevel+0x52>
		HAL_GPIO_WritePin(ADD_WATER_LED_PORT, ADD_WATER_LED, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fcc:	f003 fc4a 	bl	8004864 <HAL_GPIO_WritePin>
 8000fd0:	e005      	b.n	8000fde <ReadWaterLevel+0x5e>
	else
		HAL_GPIO_WritePin(ADD_WATER_LED_PORT, ADD_WATER_LED, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fda:	f003 fc43 	bl	8004864 <HAL_GPIO_WritePin>
	//Print message every 1 seconds
	if (elapsed_time != prev_time) {
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <ReadWaterLevel+0x98>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <ReadWaterLevel+0x9c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d00e      	beq.n	8001008 <ReadWaterLevel+0x88>
		prev_time = elapsed_time;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <ReadWaterLevel+0x98>)
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <ReadWaterLevel+0x9c>)
 8000ff0:	701a      	strb	r2, [r3, #0]
		printf("Water Level: %d %%\r\n", water_lvl);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480a      	ldr	r0, [pc, #40]	@ (8001020 <ReadWaterLevel+0xa0>)
 8000ff8:	f008 f948 	bl	800928c <iprintf>
		if (water_lvl <= 25)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b19      	cmp	r3, #25
 8001000:	d802      	bhi.n	8001008 <ReadWaterLevel+0x88>
			printf("Water Level too low. Fill water tank!\r\n");
 8001002:	4808      	ldr	r0, [pc, #32]	@ (8001024 <ReadWaterLevel+0xa4>)
 8001004:	f008 f9aa 	bl	800935c <puts>
	}

}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000204 	.word	0x20000204
 8001014:	3f990000 	.word	0x3f990000
 8001018:	200009dd 	.word	0x200009dd
 800101c:	200009de 	.word	0x200009de
 8001020:	0800b280 	.word	0x0800b280
 8001024:	0800b298 	.word	0x0800b298

08001028 <ReadWaterTemp>:
//Read water temperature and print info
void ReadWaterTemp() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	static uint8_t prev_time = 0;
	//Use BSP to get data from temperature sensor
	int water_temp = BSP_TSENSOR_ReadTemp();
 800102e:	f001 fbc3 	bl	80027b8 <BSP_TSENSOR_ReadTemp>
 8001032:	eef0 7a40 	vmov.f32	s15, s0
 8001036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103a:	ee17 3a90 	vmov	r3, s15
 800103e:	607b      	str	r3, [r7, #4]
	//Print message every 1 seconds
	if (elapsed_time != prev_time) {
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <ReadWaterTemp+0x3c>)
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <ReadWaterTemp+0x40>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d007      	beq.n	800105c <ReadWaterTemp+0x34>
		prev_time = elapsed_time;
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <ReadWaterTemp+0x3c>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <ReadWaterTemp+0x40>)
 8001052:	701a      	strb	r2, [r3, #0]
		printf("Water Temp: %d C\r\n", water_temp);
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <ReadWaterTemp+0x44>)
 8001058:	f008 f918 	bl	800928c <iprintf>
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200009dd 	.word	0x200009dd
 8001068:	200009df 	.word	0x200009df
 800106c:	0800b2c0 	.word	0x0800b2c0

08001070 <SetCoffeeMode>:

//Wrapper to control all outputs at once
void SetCoffeeMode(uint8_t coff_mod) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(STRONG_BREW_LED_PORT, STRONG_BREW_LED, 	 coff_mod & STRONG);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001088:	4815      	ldr	r0, [pc, #84]	@ (80010e0 <SetCoffeeMode+0x70>)
 800108a:	f003 fbeb 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREW_BUTTON_LED_1_PORT, BREW_BUTTON_LED_1, coff_mod & CUP_SIZE_1);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	2101      	movs	r1, #1
 800109a:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <SetCoffeeMode+0x74>)
 800109c:	f003 fbe2 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREW_BUTTON_LED_2_PORT, BREW_BUTTON_LED_2, coff_mod & CUP_SIZE_2);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	2108      	movs	r1, #8
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b0:	f003 fbd8 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREW_BUTTON_LED_3_PORT, BREW_BUTTON_LED_3, coff_mod & CUP_SIZE_3);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	2110      	movs	r1, #16
 80010c0:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <SetCoffeeMode+0x74>)
 80010c2:	f003 fbcf 	bl	8004864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREW_BUTTON_LED_4_PORT, BREW_BUTTON_LED_4, coff_mod & CUP_SIZE_4);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	2102      	movs	r1, #2
 80010d2:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <SetCoffeeMode+0x74>)
 80010d4:	f003 fbc6 	bl	8004864 <HAL_GPIO_WritePin>

}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48000400 	.word	0x48000400

080010e8 <HAL_TIM_PeriodElapsedCallback>:
//Callback function to jump to when external interruption happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	//Increment elapsed time in every 1 second
	if(htim->Instance == TIM6) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d105      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x1e>
		elapsed_time++;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001104:	701a      	strb	r2, [r3, #0]
	}
	/* Start TIM6 in interrupt mode */
	HAL_TIM_Base_Start_IT(&htim6);
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001108:	f006 f866 	bl	80071d8 <HAL_TIM_Base_Start_IT>

}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40001000 	.word	0x40001000
 8001118:	200009dd 	.word	0x200009dd
 800111c:	2000039c 	.word	0x2000039c

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	uint8_t coff_time = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t debounce = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	71bb      	strb	r3, [r7, #6]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800112e:	f001 fc0a 	bl	8002946 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001132:	f000 f915 	bl	8001360 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001136:	f000 f975 	bl	8001424 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800113a:	f000 fbb9 	bl	80018b0 <MX_GPIO_Init>
	MX_DFSDM1_Init();
 800113e:	f000 fa15 	bl	800156c <MX_DFSDM1_Init>
	MX_I2C2_Init();
 8001142:	f000 fa4b 	bl	80015dc <MX_I2C2_Init>
	MX_QUADSPI_Init();
 8001146:	f000 fa89 	bl	800165c <MX_QUADSPI_Init>
	MX_SPI3_Init();
 800114a:	f000 faad 	bl	80016a8 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 800114e:	f000 fb21 	bl	8001794 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8001152:	f000 fb4f 	bl	80017f4 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8001156:	f000 fb7d 	bl	8001854 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 800115a:	f000 f991 	bl	8001480 <MX_ADC1_Init>
	MX_TIM6_Init();
 800115e:	f000 fae1 	bl	8001724 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	//Initialize Devices from BSP
	BSP_TSENSOR_Init();
 8001162:	f001 fb0d 	bl	8002780 <BSP_TSENSOR_Init>

	HAL_TIM_IRQHandler(&htim6);
 8001166:	4873      	ldr	r0, [pc, #460]	@ (8001334 <main+0x214>)
 8001168:	f006 f8a6 	bl	80072b8 <HAL_TIM_IRQHandler>
	/* Start TIM6 in interrupt mode */
	if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) {
 800116c:	4871      	ldr	r0, [pc, #452]	@ (8001334 <main+0x214>)
 800116e:	f006 f833 	bl	80071d8 <HAL_TIM_Base_Start_IT>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <main+0x5c>
		/* Starting Error */
		Error_Handler();
 8001178:	f000 fd00 	bl	8001b7c <Error_Handler>
	}

	HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800117c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001180:	f003 fb88 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>

	// Start first ADC conversion in interrupt mode
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001184:	486c      	ldr	r0, [pc, #432]	@ (8001338 <main+0x218>)
 8001186:	f001 ffab 	bl	80030e0 <HAL_ADC_Start>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <main+0x74>
	{
		// ADC start error
		Error_Handler();
 8001190:	f000 fcf4 	bl	8001b7c <Error_Handler>
	{
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
		//Check if the machine is On or OFF(Stand-by)
		switch(coff_mkr_status) {
 8001194:	4b69      	ldr	r3, [pc, #420]	@ (800133c <main+0x21c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <main+0x82>
 800119c:	2b01      	cmp	r3, #1
 800119e:	d00d      	beq.n	80011bc <main+0x9c>
 80011a0:	e0c4      	b.n	800132c <main+0x20c>
			//Case OFF (Stand-by)
			case COFF_MKR_OFF:
				BSP_LED_Off(PWR_ON_OFF_LED);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f001 f986 	bl	80024b4 <BSP_LED_Off>
				SetCoffeeMode(NONE);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff61 	bl	8001070 <SetCoffeeMode>
				HAL_GPIO_WritePin(AUTO_OFF_LED_PORT, AUTO_OFF_LED, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b6:	f003 fb55 	bl	8004864 <HAL_GPIO_WritePin>
				break;
 80011ba:	e0b7      	b.n	800132c <main+0x20c>
			//Case ON
			case COFF_MKR_ON:
				BSP_LED_On(PWR_ON_OFF_LED);
 80011bc:	2000      	movs	r0, #0
 80011be:	f001 f963 	bl	8002488 <BSP_LED_On>
				HAL_GPIO_WritePin(AUTO_OFF_LED_PORT, AUTO_OFF_LED, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2102      	movs	r1, #2
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f003 fb4b 	bl	8004864 <HAL_GPIO_WritePin>
				ReadWaterLevel();
 80011ce:	f7ff fed7 	bl	8000f80 <ReadWaterLevel>
				ReadWaterTemp();
 80011d2:	f7ff ff29 	bl	8001028 <ReadWaterTemp>
				//Read Inputs and choose the type of coffee to make
				if (!HAL_GPIO_ReadPin(STRONG_BREW_BUTTON_PORT, STRONG_BREW_BUTTON) && debounce) {
 80011d6:	2110      	movs	r1, #16
 80011d8:	4859      	ldr	r0, [pc, #356]	@ (8001340 <main+0x220>)
 80011da:	f003 fb2b 	bl	8004834 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d110      	bne.n	8001206 <main+0xe6>
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00d      	beq.n	8001206 <main+0xe6>
					debounce = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71bb      	strb	r3, [r7, #6]
					printf("Making Strong Coffee!\r\n");
 80011ee:	4855      	ldr	r0, [pc, #340]	@ (8001344 <main+0x224>)
 80011f0:	f008 f8b4 	bl	800935c <puts>
					elapsed_time = 0;
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <main+0x228>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
					coff_time = 10;
 80011fa:	230a      	movs	r3, #10
 80011fc:	71fb      	strb	r3, [r7, #7]
					SetCoffeeMode(STRONG);
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff ff36 	bl	8001070 <SetCoffeeMode>
 8001204:	e084      	b.n	8001310 <main+0x1f0>

				}
				else if (!HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_1_PORT, CUP_SIZE_BUTTON_1) && debounce) {
 8001206:	2108      	movs	r1, #8
 8001208:	484d      	ldr	r0, [pc, #308]	@ (8001340 <main+0x220>)
 800120a:	f003 fb13 	bl	8004834 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d110      	bne.n	8001236 <main+0x116>
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00d      	beq.n	8001236 <main+0x116>
					debounce = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	71bb      	strb	r3, [r7, #6]
					printf("Making Coffee Size 1!\r\n");
 800121e:	484b      	ldr	r0, [pc, #300]	@ (800134c <main+0x22c>)
 8001220:	f008 f89c 	bl	800935c <puts>
					elapsed_time = 0;
 8001224:	4b48      	ldr	r3, [pc, #288]	@ (8001348 <main+0x228>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
					coff_time = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	71fb      	strb	r3, [r7, #7]
					SetCoffeeMode(CUP_SIZE_1);
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff ff1e 	bl	8001070 <SetCoffeeMode>
 8001234:	e06c      	b.n	8001310 <main+0x1f0>
				}
				else if (!HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_2_PORT, CUP_SIZE_BUTTON_2) && debounce) {
 8001236:	2104      	movs	r1, #4
 8001238:	4841      	ldr	r0, [pc, #260]	@ (8001340 <main+0x220>)
 800123a:	f003 fafb 	bl	8004834 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d110      	bne.n	8001266 <main+0x146>
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00d      	beq.n	8001266 <main+0x146>
					debounce = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	71bb      	strb	r3, [r7, #6]
					printf("Making Coffee Size 2!\r\n");
 800124e:	4840      	ldr	r0, [pc, #256]	@ (8001350 <main+0x230>)
 8001250:	f008 f884 	bl	800935c <puts>
					elapsed_time = 0;
 8001254:	4b3c      	ldr	r3, [pc, #240]	@ (8001348 <main+0x228>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
					coff_time = 4;
 800125a:	2304      	movs	r3, #4
 800125c:	71fb      	strb	r3, [r7, #7]
					SetCoffeeMode(CUP_SIZE_2);
 800125e:	2004      	movs	r0, #4
 8001260:	f7ff ff06 	bl	8001070 <SetCoffeeMode>
 8001264:	e054      	b.n	8001310 <main+0x1f0>
				}
				else if (!HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_3_PORT, CUP_SIZE_BUTTON_3) && debounce) {
 8001266:	2102      	movs	r1, #2
 8001268:	4835      	ldr	r0, [pc, #212]	@ (8001340 <main+0x220>)
 800126a:	f003 fae3 	bl	8004834 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d110      	bne.n	8001296 <main+0x176>
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <main+0x176>
					debounce = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	71bb      	strb	r3, [r7, #6]
					printf("Making Coffee Size 3!\r\n");
 800127e:	4835      	ldr	r0, [pc, #212]	@ (8001354 <main+0x234>)
 8001280:	f008 f86c 	bl	800935c <puts>
					elapsed_time = 0;
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <main+0x228>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
					coff_time = 6;
 800128a:	2306      	movs	r3, #6
 800128c:	71fb      	strb	r3, [r7, #7]
					SetCoffeeMode(CUP_SIZE_3);
 800128e:	2008      	movs	r0, #8
 8001290:	f7ff feee 	bl	8001070 <SetCoffeeMode>
 8001294:	e03c      	b.n	8001310 <main+0x1f0>
				}
				else if (!HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_4_PORT, CUP_SIZE_BUTTON_4) && debounce) {
 8001296:	2101      	movs	r1, #1
 8001298:	4829      	ldr	r0, [pc, #164]	@ (8001340 <main+0x220>)
 800129a:	f003 facb 	bl	8004834 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d110      	bne.n	80012c6 <main+0x1a6>
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00d      	beq.n	80012c6 <main+0x1a6>
					debounce = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71bb      	strb	r3, [r7, #6]
					printf("Making Coffee Size 4!\r\n");
 80012ae:	482a      	ldr	r0, [pc, #168]	@ (8001358 <main+0x238>)
 80012b0:	f008 f854 	bl	800935c <puts>
					elapsed_time = 0;
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <main+0x228>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
					coff_time = 8;
 80012ba:	2308      	movs	r3, #8
 80012bc:	71fb      	strb	r3, [r7, #7]
					SetCoffeeMode(CUP_SIZE_4);
 80012be:	2010      	movs	r0, #16
 80012c0:	f7ff fed6 	bl	8001070 <SetCoffeeMode>
 80012c4:	e024      	b.n	8001310 <main+0x1f0>
				}
				else if (HAL_GPIO_ReadPin(STRONG_BREW_BUTTON_PORT, STRONG_BREW_BUTTON) &&
 80012c6:	2110      	movs	r1, #16
 80012c8:	481d      	ldr	r0, [pc, #116]	@ (8001340 <main+0x220>)
 80012ca:	f003 fab3 	bl	8004834 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01d      	beq.n	8001310 <main+0x1f0>
						HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_1_PORT, CUP_SIZE_BUTTON_1) &&
 80012d4:	2108      	movs	r1, #8
 80012d6:	481a      	ldr	r0, [pc, #104]	@ (8001340 <main+0x220>)
 80012d8:	f003 faac 	bl	8004834 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
				else if (HAL_GPIO_ReadPin(STRONG_BREW_BUTTON_PORT, STRONG_BREW_BUTTON) &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <main+0x1f0>
						HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_2_PORT, CUP_SIZE_BUTTON_2) &&
 80012e2:	2104      	movs	r1, #4
 80012e4:	4816      	ldr	r0, [pc, #88]	@ (8001340 <main+0x220>)
 80012e6:	f003 faa5 	bl	8004834 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
						HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_1_PORT, CUP_SIZE_BUTTON_1) &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00f      	beq.n	8001310 <main+0x1f0>
						HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_3_PORT, CUP_SIZE_BUTTON_3) &&
 80012f0:	2102      	movs	r1, #2
 80012f2:	4813      	ldr	r0, [pc, #76]	@ (8001340 <main+0x220>)
 80012f4:	f003 fa9e 	bl	8004834 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
						HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_2_PORT, CUP_SIZE_BUTTON_2) &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <main+0x1f0>
						HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_4_PORT, CUP_SIZE_BUTTON_4)) {
 80012fe:	2101      	movs	r1, #1
 8001300:	480f      	ldr	r0, [pc, #60]	@ (8001340 <main+0x220>)
 8001302:	f003 fa97 	bl	8004834 <HAL_GPIO_ReadPin>
 8001306:	4603      	mov	r3, r0
						HAL_GPIO_ReadPin(CUP_SIZE_BUTTON_3_PORT, CUP_SIZE_BUTTON_3) &&
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <main+0x1f0>
					debounce = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	71bb      	strb	r3, [r7, #6]
				}

				if (elapsed_time == coff_time) {
 8001310:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <main+0x228>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	429a      	cmp	r2, r3
 8001318:	d107      	bne.n	800132a <main+0x20a>
					coff_time = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]
					SetCoffeeMode(NONE);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fea6 	bl	8001070 <SetCoffeeMode>
					printf("Your Coffee is ready!\r\n");
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <main+0x23c>)
 8001326:	f008 f819 	bl	800935c <puts>
				}
				break;
 800132a:	bf00      	nop
		}
		//Debounce delay
		HAL_Delay(50);
 800132c:	2032      	movs	r0, #50	@ 0x32
 800132e:	f001 fb7f 	bl	8002a30 <HAL_Delay>
		switch(coff_mkr_status) {
 8001332:	e72f      	b.n	8001194 <main+0x74>
 8001334:	2000039c 	.word	0x2000039c
 8001338:	20000204 	.word	0x20000204
 800133c:	200009dc 	.word	0x200009dc
 8001340:	48000800 	.word	0x48000800
 8001344:	0800b2d4 	.word	0x0800b2d4
 8001348:	200009dd 	.word	0x200009dd
 800134c:	0800b2ec 	.word	0x0800b2ec
 8001350:	0800b304 	.word	0x0800b304
 8001354:	0800b31c 	.word	0x0800b31c
 8001358:	0800b334 	.word	0x0800b334
 800135c:	0800b34c 	.word	0x0800b34c

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b096      	sub	sp, #88	@ 0x58
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2244      	movs	r2, #68	@ 0x44
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f007 fffc 	bl	800936c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001382:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001386:	f004 fa3f 	bl	8005808 <HAL_PWREx_ControlVoltageScaling>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001390:	f000 fbf4 	bl	8001b7c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001394:	f004 fa1a 	bl	80057cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001398:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <SystemClock_Config+0xc0>)
 800139a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800139e:	4a20      	ldr	r2, [pc, #128]	@ (8001420 <SystemClock_Config+0xc0>)
 80013a0:	f023 0318 	bic.w	r3, r3, #24
 80013a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013a8:	2314      	movs	r3, #20
 80013aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013b0:	2301      	movs	r3, #1
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013b8:	2360      	movs	r3, #96	@ 0x60
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013c0:	2301      	movs	r3, #1
 80013c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013c8:	2328      	movs	r3, #40	@ 0x28
 80013ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013cc:	2307      	movs	r3, #7
 80013ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 fb35 	bl	8005a4c <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013e8:	f000 fbc8 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2303      	movs	r3, #3
 80013f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	2104      	movs	r1, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fefd 	bl	8006204 <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001410:	f000 fbb4 	bl	8001b7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001414:	f005 fc04 	bl	8006c20 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001418:	bf00      	nop
 800141a:	3758      	adds	r7, #88	@ 0x58
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000

08001424 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0a2      	sub	sp, #136	@ 0x88
 8001428:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142a:	463b      	mov	r3, r7
 800142c:	2288      	movs	r2, #136	@ 0x88
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 ff9b 	bl	800936c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001436:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800143a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800143c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001440:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001442:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001446:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800144c:	2301      	movs	r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001450:	2318      	movs	r3, #24
 8001452:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001454:	2307      	movs	r3, #7
 8001456:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001460:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001464:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4618      	mov	r0, r3
 800146a:	f005 f8ef 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001474:	f000 fb82 	bl	8001b7c <Error_Handler>
  }
}
 8001478:	bf00      	nop
 800147a:	3788      	adds	r7, #136	@ 0x88
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001564 <MX_ADC1_Init+0xe4>)
 80014a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ba:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c0:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014c6:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014cc:	4b24      	ldr	r3, [pc, #144]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d8:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_ADC1_Init+0xe0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001502:	4817      	ldr	r0, [pc, #92]	@ (8001560 <MX_ADC1_Init+0xe0>)
 8001504:	f001 fc9c 	bl	8002e40 <HAL_ADC_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800150e:	f000 fb35 	bl	8001b7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	@ (8001560 <MX_ADC1_Init+0xe0>)
 800151e:	f002 fc1d 	bl	8003d5c <HAL_ADCEx_MultiModeConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001528:	f000 fb28 	bl	8001b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_ADC1_Init+0xe8>)
 800152e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001530:	2306      	movs	r3, #6
 8001532:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001538:	237f      	movs	r3, #127	@ 0x7f
 800153a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800153c:	2304      	movs	r3, #4
 800153e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_ADC1_Init+0xe0>)
 800154a:	f001 ff69 	bl	8003420 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001554:	f000 fb12 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	@ 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000204 	.word	0x20000204
 8001564:	50040000 	.word	0x50040000
 8001568:	3ac04000 	.word	0x3ac04000

0800156c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 8001572:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <MX_DFSDM1_Init+0x6c>)
 8001574:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 8001578:	2201      	movs	r2, #1
 800157a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 8001584:	2202      	movs	r2, #2
 8001586:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 8001596:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800159a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800159c:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 80015a4:	2204      	movs	r2, #4
 80015a6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_DFSDM1_Init+0x68>)
 80015c2:	f002 fd8d 	bl	80040e0 <HAL_DFSDM_ChannelInit>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80015cc:	f000 fad6 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000268 	.word	0x20000268
 80015d8:	40016020 	.word	0x40016020

080015dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_I2C2_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <MX_I2C2_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_I2C2_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <MX_I2C2_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015ec:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_I2C2_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f2:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_I2C2_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <MX_I2C2_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_I2C2_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <MX_I2C2_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_I2C2_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_I2C2_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001616:	480e      	ldr	r0, [pc, #56]	@ (8001650 <MX_I2C2_Init+0x74>)
 8001618:	f003 f954 	bl	80048c4 <HAL_I2C_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001622:	f000 faab 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001626:	2100      	movs	r1, #0
 8001628:	4809      	ldr	r0, [pc, #36]	@ (8001650 <MX_I2C2_Init+0x74>)
 800162a:	f003 ff05 	bl	8005438 <HAL_I2CEx_ConfigAnalogFilter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001634:	f000 faa2 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_I2C2_Init+0x74>)
 800163c:	f003 ff47 	bl	80054ce <HAL_I2CEx_ConfigDigitalFilter>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001646:	f000 fa99 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200002a0 	.word	0x200002a0
 8001654:	40005800 	.word	0x40005800
 8001658:	10d19ce4 	.word	0x10d19ce4

0800165c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 8001662:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <MX_QUADSPI_Init+0x48>)
 8001664:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 8001668:	2202      	movs	r2, #2
 800166a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 800166e:	2204      	movs	r2, #4
 8001670:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 8001674:	2210      	movs	r2, #16
 8001676:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 800167a:	2217      	movs	r2, #23
 800167c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_QUADSPI_Init+0x44>)
 800168c:	f004 f922 	bl	80058d4 <HAL_QSPI_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001696:	f000 fa71 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002f4 	.word	0x200002f4
 80016a4:	a0001000 	.word	0xa0001000

080016a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <MX_SPI3_Init+0x74>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <MX_SPI3_Init+0x78>)
 80016b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <MX_SPI3_Init+0x74>)
 80016b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <MX_SPI3_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <MX_SPI3_Init+0x74>)
 80016c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_SPI3_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_SPI3_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_SPI3_Init+0x74>)
 80016d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_SPI3_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_SPI3_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_SPI3_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_SPI3_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_SPI3_Init+0x74>)
 80016f6:	2207      	movs	r2, #7
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_SPI3_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_SPI3_Init+0x74>)
 8001702:	2208      	movs	r2, #8
 8001704:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_SPI3_Init+0x74>)
 8001708:	f005 fc6c 	bl	8006fe4 <HAL_SPI_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001712:	f000 fa33 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000338 	.word	0x20000338
 8001720:	40003c00 	.word	0x40003c00

08001724 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_TIM6_Init+0x68>)
 8001736:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <MX_TIM6_Init+0x6c>)
 8001738:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_TIM6_Init+0x68>)
 800173c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001740:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_TIM6_Init+0x68>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001748:	4b10      	ldr	r3, [pc, #64]	@ (800178c <MX_TIM6_Init+0x68>)
 800174a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800174e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_TIM6_Init+0x68>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <MX_TIM6_Init+0x68>)
 8001758:	f005 fce7 	bl	800712a <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001762:	f000 fa0b 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	@ (800178c <MX_TIM6_Init+0x68>)
 8001774:	f005 ff76 	bl	8007664 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800177e:	f000 f9fd 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000039c 	.word	0x2000039c
 8001790:	40001000 	.word	0x40001000

08001794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <MX_USART1_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	@ (80017ec <MX_USART1_UART_Init+0x58>)
 80017d8:	f005 ffea 	bl	80077b0 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f000 f9cb 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200003e8 	.word	0x200003e8
 80017f0:	40013800 	.word	0x40013800

080017f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_USART3_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	@ (8001850 <MX_USART3_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_USART3_UART_Init+0x58>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_USART3_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_USART3_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_USART3_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USART3_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_USART3_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USART3_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_USART3_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USART3_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_USART3_UART_Init+0x58>)
 8001838:	f005 ffba 	bl	80077b0 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f000 f99b 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000470 	.word	0x20000470
 8001850:	40004800 	.word	0x40004800

08001854 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800185e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001862:	2206      	movs	r2, #6
 8001864:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001868:	2202      	movs	r2, #2
 800186a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800186e:	2202      	movs	r2, #2
 8001870:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001898:	f003 fe65 	bl	8005566 <HAL_PCD_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80018a2:	f000 f96b 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200004f8 	.word	0x200004f8

080018b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4aa7      	ldr	r2, [pc, #668]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4ba5      	ldr	r3, [pc, #660]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4ba2      	ldr	r3, [pc, #648]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4aa1      	ldr	r2, [pc, #644]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b9f      	ldr	r3, [pc, #636]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	4a9b      	ldr	r2, [pc, #620]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001902:	4b99      	ldr	r3, [pc, #612]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b96      	ldr	r3, [pc, #600]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	4a95      	ldr	r2, [pc, #596]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191a:	4b93      	ldr	r3, [pc, #588]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001926:	4b90      	ldr	r3, [pc, #576]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	4a8f      	ldr	r2, [pc, #572]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001932:	4b8d      	ldr	r3, [pc, #564]	@ (8001b68 <MX_GPIO_Init+0x2b8>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001944:	4889      	ldr	r0, [pc, #548]	@ (8001b6c <MX_GPIO_Init+0x2bc>)
 8001946:	f002 ff8d 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D1_Pin|ARD_D0_Pin|ARD_D10_Pin|ARD_D4_Pin
 800194a:	2200      	movs	r2, #0
 800194c:	f248 110f 	movw	r1, #33039	@ 0x810f
 8001950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001954:	f002 ff86 	bl	8004864 <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D3_Pin|ARD_D6_Pin|ARD_D8_Pin|ISM43362_BOOT0_Pin
 8001958:	2200      	movs	r2, #0
 800195a:	f24f 0117 	movw	r1, #61463	@ 0xf017
 800195e:	4884      	ldr	r0, [pc, #528]	@ (8001b70 <MX_GPIO_Init+0x2c0>)
 8001960:	f002 ff80 	bl	8004864 <HAL_GPIO_WritePin>
                          |ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f245 0181 	movw	r1, #20609	@ 0x5081
 800196a:	4882      	ldr	r0, [pc, #520]	@ (8001b74 <MX_GPIO_Init+0x2c4>)
 800196c:	f002 ff7a 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001976:	487f      	ldr	r0, [pc, #508]	@ (8001b74 <MX_GPIO_Init+0x2c4>)
 8001978:	f002 ff74 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001982:	487d      	ldr	r0, [pc, #500]	@ (8001b78 <MX_GPIO_Init+0x2c8>)
 8001984:	f002 ff6e 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2120      	movs	r1, #32
 800198c:	4878      	ldr	r0, [pc, #480]	@ (8001b70 <MX_GPIO_Init+0x2c0>)
 800198e:	f002 ff69 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	2101      	movs	r1, #1
 8001996:	4875      	ldr	r0, [pc, #468]	@ (8001b6c <MX_GPIO_Init+0x2bc>)
 8001998:	f002 ff64 	bl	8004864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800199c:	f240 1315 	movw	r3, #277	@ 0x115
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	486d      	ldr	r0, [pc, #436]	@ (8001b6c <MX_GPIO_Init+0x2bc>)
 80019b6:	f002 fc9f 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80019ba:	236a      	movs	r3, #106	@ 0x6a
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4867      	ldr	r0, [pc, #412]	@ (8001b6c <MX_GPIO_Init+0x2bc>)
 80019d0:	f002 fc92 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80019d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4863      	ldr	r0, [pc, #396]	@ (8001b78 <MX_GPIO_Init+0x2c8>)
 80019ec:	f002 fc84 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80019f0:	231f      	movs	r3, #31
 80019f2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	485d      	ldr	r0, [pc, #372]	@ (8001b78 <MX_GPIO_Init+0x2c8>)
 8001a04:	f002 fc78 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin ARD_D10_Pin ARD_D4_Pin
                           SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin|ARD_D10_Pin|ARD_D4_Pin
 8001a08:	f248 130f 	movw	r3, #33039	@ 0x810f
 8001a0c:	617b      	str	r3, [r7, #20]
                          |SPBTLE_RF_RST_Pin|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a24:	f002 fc68 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001a28:	23e0      	movs	r3, #224	@ 0xe0
 8001a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a38:	2305      	movs	r3, #5
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a46:	f002 fc57 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D6_Pin ARD_D8_Pin ISM43362_BOOT0_Pin
                           ISM43362_WAKEUP_Pin LED2_Pin SPSGRF_915_SDN_Pin ARD_D5_Pin
                           SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D6_Pin|ARD_D8_Pin|ISM43362_BOOT0_Pin
 8001a4a:	f24f 0337 	movw	r3, #61495	@ 0xf037
 8001a4e:	617b      	str	r3, [r7, #20]
                          |ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin|ARD_D5_Pin
                          |SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4843      	ldr	r0, [pc, #268]	@ (8001b70 <MX_GPIO_Init+0x2c0>)
 8001a64:	f002 fc48 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin PD11 PD15 PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|GPIO_PIN_11|GPIO_PIN_15|PMOD_IRQ_EXTI12_Pin;
 8001a68:	f648 4304 	movw	r3, #35844	@ 0x8c04
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	483d      	ldr	r0, [pc, #244]	@ (8001b74 <MX_GPIO_Init+0x2c4>)
 8001a80:	f002 fc3a 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin ARD_D2_Pin PMOD_RESET_Pin
                           STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|ARD_D2_Pin|PMOD_RESET_Pin
 8001a84:	f247 0381 	movw	r3, #28801	@ 0x7081
 8001a88:	617b      	str	r3, [r7, #20]
                          |STSAFE_A100_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4835      	ldr	r0, [pc, #212]	@ (8001b74 <MX_GPIO_Init+0x2c4>)
 8001a9e:	f002 fc2b 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001aa2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	482f      	ldr	r0, [pc, #188]	@ (8001b78 <MX_GPIO_Init+0x2c8>)
 8001abc:	f002 fc1c 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001ac0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4828      	ldr	r0, [pc, #160]	@ (8001b78 <MX_GPIO_Init+0x2c8>)
 8001ad8:	f002 fc0e 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001adc:	2302      	movs	r3, #2
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aec:	2305      	movs	r3, #5
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	481f      	ldr	r0, [pc, #124]	@ (8001b74 <MX_GPIO_Init+0x2c4>)
 8001af8:	f002 fbfe 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001afc:	2378      	movs	r3, #120	@ 0x78
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4817      	ldr	r0, [pc, #92]	@ (8001b74 <MX_GPIO_Init+0x2c4>)
 8001b18:	f002 fbee 	bl	80042f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001b1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b22:	2312      	movs	r3, #18
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <MX_GPIO_Init+0x2c0>)
 8001b3a:	f002 fbdd 	bl	80042f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2017      	movs	r0, #23
 8001b44:	f002 fa95 	bl	8004072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b48:	2017      	movs	r0, #23
 8001b4a:	f002 faae 	bl	80040aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2028      	movs	r0, #40	@ 0x28
 8001b54:	f002 fa8d 	bl	8004072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b58:	2028      	movs	r0, #40	@ 0x28
 8001b5a:	f002 faa6 	bl	80040aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	@ 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48001000 	.word	0x48001000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	48000c00 	.word	0x48000c00
 8001b78:	48000800 	.word	0x48000800

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <Error_Handler+0x8>

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <HAL_MspInit+0x44>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <HAL_MspInit+0x44>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_MspInit+0x44>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_MspInit+0x44>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <HAL_ADC_MspInit+0xa4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d13c      	bne.n	8001c6c <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a20      	ldr	r2, [pc, #128]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001bf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_ADC_MspInit+0xa8>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c3e:	230b      	movs	r3, #11
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c50:	f002 fb52 	bl	80042f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c54:	2320      	movs	r3, #32
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c58:	230b      	movs	r3, #11
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <HAL_ADC_MspInit+0xac>)
 8001c68:	f002 fb46 	bl	80042f8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	@ 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	50040000 	.word	0x50040000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	48000800 	.word	0x48000800

08001c80 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0ac      	sub	sp, #176	@ 0xb0
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2288      	movs	r2, #136	@ 0x88
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 fb63 	bl	800936c <memset>
  if(DFSDM1_Init == 0)
 8001ca6:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d142      	bne.n	8001d34 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001cae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fcc4 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001cca:	f7ff ff57 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cda:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce6:	4b16      	ldr	r3, [pc, #88]	@ (8001d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	4a15      	ldr	r2, [pc, #84]	@ (8001d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf2:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001cfe:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001d26:	f002 fae7 	bl	80042f8 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	4a02      	ldr	r2, [pc, #8]	@ (8001d3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d32:	6013      	str	r3, [r2, #0]
  }

}
 8001d34:	bf00      	nop
 8001d36:	37b0      	adds	r7, #176	@ 0xb0
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200009e0 	.word	0x200009e0
 8001d40:	40021000 	.word	0x40021000
 8001d44:	48001000 	.word	0x48001000

08001d48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0ac      	sub	sp, #176	@ 0xb0
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2288      	movs	r2, #136	@ 0x88
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f007 faff 	bl	800936c <memset>
  if(hi2c->Instance==I2C2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <HAL_I2C_MspInit+0xb0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d13b      	bne.n	8001df0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fc61 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d90:	f7ff fef4 	bl	8001b7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_I2C_MspInit+0xb4>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d98:	4a18      	ldr	r2, [pc, #96]	@ (8001dfc <HAL_I2C_MspInit+0xb4>)
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_I2C_MspInit+0xb4>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001dac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001db0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db4:	2312      	movs	r3, #18
 8001db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <HAL_I2C_MspInit+0xb8>)
 8001dd4:	f002 fa90 	bl	80042f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_I2C_MspInit+0xb4>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	4a07      	ldr	r2, [pc, #28]	@ (8001dfc <HAL_I2C_MspInit+0xb4>)
 8001dde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_I2C_MspInit+0xb4>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001df0:	bf00      	nop
 8001df2:	37b0      	adds	r7, #176	@ 0xb0
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40005800 	.word	0x40005800
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400

08001e04 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	@ (8001e40 <HAL_I2C_MspDeInit+0x3c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10f      	bne.n	8001e36 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_I2C_MspDeInit+0x40>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_I2C_MspDeInit+0x40>)
 8001e1c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e20:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001e22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e26:	4808      	ldr	r0, [pc, #32]	@ (8001e48 <HAL_I2C_MspDeInit+0x44>)
 8001e28:	f002 fc10 	bl	800464c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001e2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e30:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <HAL_I2C_MspDeInit+0x44>)
 8001e32:	f002 fc0b 	bl	800464c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005800 	.word	0x40005800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <HAL_QSPI_MspInit+0x7c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d128      	bne.n	8001ec0 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <HAL_QSPI_MspInit+0x80>)
 8001e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e72:	4a16      	ldr	r2, [pc, #88]	@ (8001ecc <HAL_QSPI_MspInit+0x80>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6513      	str	r3, [r2, #80]	@ 0x50
 8001e7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <HAL_QSPI_MspInit+0x80>)
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_QSPI_MspInit+0x80>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <HAL_QSPI_MspInit+0x80>)
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_QSPI_MspInit+0x80>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001e9e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001ea2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <HAL_QSPI_MspInit+0x84>)
 8001ebc:	f002 fa1c 	bl	80042f8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	@ 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	a0001000 	.word	0xa0001000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48001000 	.word	0x48001000

08001ed4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	@ 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <HAL_SPI_MspInit+0x7c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d128      	bne.n	8001f48 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <HAL_SPI_MspInit+0x80>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efa:	4a16      	ldr	r2, [pc, #88]	@ (8001f54 <HAL_SPI_MspInit+0x80>)
 8001efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	4a10      	ldr	r2, [pc, #64]	@ (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_SPI_MspInit+0x80>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f26:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f38:	2306      	movs	r3, #6
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <HAL_SPI_MspInit+0x84>)
 8001f44:	f002 f9d8 	bl	80042f8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	@ 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40003c00 	.word	0x40003c00
 8001f54:	40021000 	.word	0x40021000
 8001f58:	48000800 	.word	0x48000800

08001f5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x44>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x48>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x48>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x48>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2036      	movs	r0, #54	@ 0x36
 8001f8c:	f002 f871 	bl	8004072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f90:	2036      	movs	r0, #54	@ 0x36
 8001f92:	f002 f88a 	bl	80040aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40001000 	.word	0x40001000
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0ae      	sub	sp, #184	@ 0xb8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	2288      	movs	r2, #136	@ 0x88
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f007 f9cf 	bl	800936c <memset>
  if(huart->Instance==USART1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a42      	ldr	r2, [pc, #264]	@ (80020dc <HAL_UART_MspInit+0x134>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d13b      	bne.n	8002050 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 fb31 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ff0:	f7ff fdc4 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff8:	4a39      	ldr	r2, [pc, #228]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8001ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002000:	4b37      	ldr	r3, [pc, #220]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	4a33      	ldr	r2, [pc, #204]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002024:	23c0      	movs	r3, #192	@ 0xc0
 8002026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800203c:	2307      	movs	r3, #7
 800203e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002046:	4619      	mov	r1, r3
 8002048:	4826      	ldr	r0, [pc, #152]	@ (80020e4 <HAL_UART_MspInit+0x13c>)
 800204a:	f002 f955 	bl	80042f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800204e:	e040      	b.n	80020d2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <HAL_UART_MspInit+0x140>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d13b      	bne.n	80020d2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800205a:	2304      	movs	r3, #4
 800205c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800205e:	2300      	movs	r3, #0
 8002060:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4618      	mov	r0, r3
 8002068:	f004 faf0 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002072:	f7ff fd83 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002076:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6593      	str	r3, [r2, #88]	@ 0x58
 8002082:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_UART_MspInit+0x138>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80020a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c0:	2307      	movs	r3, #7
 80020c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020ca:	4619      	mov	r1, r3
 80020cc:	4807      	ldr	r0, [pc, #28]	@ (80020ec <HAL_UART_MspInit+0x144>)
 80020ce:	f002 f913 	bl	80042f8 <HAL_GPIO_Init>
}
 80020d2:	bf00      	nop
 80020d4:	37b8      	adds	r7, #184	@ 0xb8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	40004800 	.word	0x40004800
 80020ec:	48000c00 	.word	0x48000c00

080020f0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	@ 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002110:	d154      	bne.n	80021bc <HAL_PCD_MspInit+0xcc>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a2b      	ldr	r2, [pc, #172]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b29      	ldr	r3, [pc, #164]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800212a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002142:	f002 f8d9 	bl	80042f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002146:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002158:	230a      	movs	r3, #10
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002166:	f002 f8c7 	bl	80042f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	4a15      	ldr	r2, [pc, #84]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002170:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	4a0c      	ldr	r2, [pc, #48]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	@ 0x58
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80021a6:	f003 fb85 	bl	80058b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <HAL_PCD_MspInit+0xd4>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80021b6:	e001      	b.n	80021bc <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80021b8:	f003 fb7c 	bl	80058b4 <HAL_PWREx_EnableVddUSB>
}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	@ 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <NMI_Handler+0x4>

080021d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <HardFault_Handler+0x4>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <MemManage_Handler+0x4>

080021e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <BusFault_Handler+0x4>

080021e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <UsageFault_Handler+0x4>

080021f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221e:	f000 fbe7 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}

08002226 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800222a:	2020      	movs	r0, #32
 800222c:	f002 fb32 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002230:	2040      	movs	r0, #64	@ 0x40
 8002232:	f002 fb2f 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002236:	2080      	movs	r0, #128	@ 0x80
 8002238:	f002 fb2c 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800223c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002240:	f002 fb28 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800224c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002250:	f002 fb20 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002254:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002258:	f002 fb1c 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800225c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002260:	f002 fb18 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002264:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002268:	f002 fb14 	bl	8004894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <TIM6_DAC_IRQHandler+0x10>)
 8002276:	f005 f81f 	bl	80072b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000039c 	.word	0x2000039c

08002284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800229e:	f007 f86d 	bl	800937c <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
  return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <_exit+0x12>

080022ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e00a      	b.n	80022f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022dc:	f3af 8000 	nop.w
 80022e0:	4601      	mov	r1, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	60ba      	str	r2, [r7, #8]
 80022e8:	b2ca      	uxtb	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf0      	blt.n	80022dc <_read+0x12>
  }

  return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e009      	b.n	800232a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	60ba      	str	r2, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fdf8 	bl	8000f14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	dbf1      	blt.n	8002316 <_write+0x12>
  }
  return len;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_close>:

int _close(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002364:	605a      	str	r2, [r3, #4]
  return 0;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_isatty>:

int _isatty(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800237c:	2301      	movs	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f006 ffd2 	bl	800937c <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20018000 	.word	0x20018000
 8002404:	00000400 	.word	0x00000400
 8002408:	200009e4 	.word	0x200009e4
 800240c:	20000bb8 	.word	0x20000bb8

08002410 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800246c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002438:	f7ff ffea 	bl	8002410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800243c:	480c      	ldr	r0, [pc, #48]	@ (8002470 <LoopForever+0x6>)
  ldr r1, =_edata
 800243e:	490d      	ldr	r1, [pc, #52]	@ (8002474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <LoopForever+0xe>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002454:	4c0a      	ldr	r4, [pc, #40]	@ (8002480 <LoopForever+0x16>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002462:	f006 ff91 	bl	8009388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002466:	f7fe fe5b 	bl	8001120 <main>

0800246a <LoopForever>:

LoopForever:
    b LoopForever
 800246a:	e7fe      	b.n	800246a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800246c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002478:	0800b734 	.word	0x0800b734
  ldr r2, =_sbss
 800247c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002480:	20000bb4 	.word	0x20000bb4

08002484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC1_2_IRQHandler>
	...

08002488 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <BSP_LED_On+0x28>)
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800249e:	b291      	uxth	r1, r2
 80024a0:	2201      	movs	r2, #1
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 f9de 	bl	8004864 <HAL_GPIO_WritePin>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000004 	.word	0x20000004

080024b4 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	4a06      	ldr	r2, [pc, #24]	@ (80024dc <BSP_LED_Off+0x28>)
 80024c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ca:	b291      	uxth	r1, r2
 80024cc:	2200      	movs	r2, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 f9c8 	bl	8004864 <HAL_GPIO_WritePin>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000004 	.word	0x20000004

080024e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <I2Cx_MspInit+0xa8>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ec:	4a26      	ldr	r2, [pc, #152]	@ (8002588 <I2Cx_MspInit+0xa8>)
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f4:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <I2Cx_MspInit+0xa8>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002500:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002504:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002506:	2312      	movs	r3, #18
 8002508:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002512:	2304      	movs	r3, #4
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	481b      	ldr	r0, [pc, #108]	@ (800258c <I2Cx_MspInit+0xac>)
 800251e:	f001 feeb 	bl	80042f8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4818      	ldr	r0, [pc, #96]	@ (800258c <I2Cx_MspInit+0xac>)
 800252a:	f001 fee5 	bl	80042f8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800252e:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <I2Cx_MspInit+0xa8>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	4a15      	ldr	r2, [pc, #84]	@ (8002588 <I2Cx_MspInit+0xa8>)
 8002534:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002538:	6593      	str	r3, [r2, #88]	@ 0x58
 800253a:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <I2Cx_MspInit+0xa8>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002546:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <I2Cx_MspInit+0xa8>)
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	4a0f      	ldr	r2, [pc, #60]	@ (8002588 <I2Cx_MspInit+0xa8>)
 800254c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002550:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002552:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <I2Cx_MspInit+0xa8>)
 8002554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002556:	4a0c      	ldr	r2, [pc, #48]	@ (8002588 <I2Cx_MspInit+0xa8>)
 8002558:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800255c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	210f      	movs	r1, #15
 8002562:	2021      	movs	r0, #33	@ 0x21
 8002564:	f001 fd85 	bl	8004072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002568:	2021      	movs	r0, #33	@ 0x21
 800256a:	f001 fd9e 	bl	80040aa <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	210f      	movs	r1, #15
 8002572:	2022      	movs	r0, #34	@ 0x22
 8002574:	f001 fd7d 	bl	8004072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002578:	2022      	movs	r0, #34	@ 0x22
 800257a:	f001 fd96 	bl	80040aa <HAL_NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3728      	adds	r7, #40	@ 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	48000400 	.word	0x48000400

08002590 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <I2Cx_Init+0x54>)
 800259c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <I2Cx_Init+0x58>)
 80025a2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff89 	bl	80024e0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f002 f978 	bl	80048c4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80025d4:	2100      	movs	r1, #0
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f002 ff2e 	bl	8005438 <HAL_I2CEx_ConfigAnalogFilter>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40005800 	.word	0x40005800
 80025e8:	00702681 	.word	0x00702681

080025ec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	@ 0x28
 80025f0:	af04      	add	r7, sp, #16
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	72fb      	strb	r3, [r7, #11]
 80025fe:	460b      	mov	r3, r1
 8002600:	813b      	strh	r3, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	b299      	uxth	r1, r3
 800260e:	88f8      	ldrh	r0, [r7, #6]
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	4603      	mov	r3, r0
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f002 fb2c 	bl	8004c80 <HAL_I2C_Mem_Read>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	4619      	mov	r1, r3
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f832 	bl	80026a0 <I2Cx_Error>
  }
  return status;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b08a      	sub	sp, #40	@ 0x28
 800264a:	af04      	add	r7, sp, #16
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	461a      	mov	r2, r3
 8002654:	4603      	mov	r3, r0
 8002656:	72fb      	strb	r3, [r7, #11]
 8002658:	460b      	mov	r3, r1
 800265a:	813b      	strh	r3, [r7, #8]
 800265c:	4613      	mov	r3, r2
 800265e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002664:	7afb      	ldrb	r3, [r7, #11]
 8002666:	b299      	uxth	r1, r3
 8002668:	88f8      	ldrh	r0, [r7, #6]
 800266a:	893a      	ldrh	r2, [r7, #8]
 800266c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4603      	mov	r3, r0
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f002 f9eb 	bl	8004a58 <HAL_I2C_Mem_Write>
 8002682:	4603      	mov	r3, r0
 8002684:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	4619      	mov	r1, r3
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f805 	bl	80026a0 <I2Cx_Error>
  }
  return status;
 8002696:	7dfb      	ldrb	r3, [r7, #23]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f002 f9a4 	bl	80049fa <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ff6c 	bl	8002590 <I2Cx_Init>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <SENSOR_IO_Init+0x10>)
 80026c6:	f7ff ff63 	bl	8002590 <I2Cx_Init>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200009e8 	.word	0x200009e8

080026d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af02      	add	r7, sp, #8
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	460b      	mov	r3, r1
 80026e0:	71bb      	strb	r3, [r7, #6]
 80026e2:	4613      	mov	r3, r2
 80026e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80026e6:	79bb      	ldrb	r3, [r7, #6]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	79f9      	ldrb	r1, [r7, #7]
 80026ec:	2301      	movs	r3, #1
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	1d7b      	adds	r3, r7, #5
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2301      	movs	r3, #1
 80026f6:	4803      	ldr	r0, [pc, #12]	@ (8002704 <SENSOR_IO_Write+0x30>)
 80026f8:	f7ff ffa5 	bl	8002646 <I2Cx_WriteMultiple>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200009e8 	.word	0x200009e8

08002708 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af02      	add	r7, sp, #8
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800271c:	79bb      	ldrb	r3, [r7, #6]
 800271e:	b29a      	uxth	r2, r3
 8002720:	79f9      	ldrb	r1, [r7, #7]
 8002722:	2301      	movs	r3, #1
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f107 030f 	add.w	r3, r7, #15
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2301      	movs	r3, #1
 800272e:	4804      	ldr	r0, [pc, #16]	@ (8002740 <SENSOR_IO_Read+0x38>)
 8002730:	f7ff ff5c 	bl	80025ec <I2Cx_ReadMultiple>

  return read_value;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200009e8 	.word	0x200009e8

08002744 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af02      	add	r7, sp, #8
 800274a:	603a      	str	r2, [r7, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
 8002752:	460b      	mov	r3, r1
 8002754:	71bb      	strb	r3, [r7, #6]
 8002756:	4613      	mov	r3, r2
 8002758:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800275a:	79bb      	ldrb	r3, [r7, #6]
 800275c:	b29a      	uxth	r2, r3
 800275e:	79f9      	ldrb	r1, [r7, #7]
 8002760:	88bb      	ldrh	r3, [r7, #4]
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2301      	movs	r3, #1
 800276a:	4804      	ldr	r0, [pc, #16]	@ (800277c <SENSOR_IO_ReadMultiple+0x38>)
 800276c:	f7ff ff3e 	bl	80025ec <I2Cx_ReadMultiple>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200009e8 	.word	0x200009e8

08002780 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <BSP_TSENSOR_Init+0x30>)
 800278c:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <BSP_TSENSOR_Init+0x34>)
 800278e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002790:	f7ff ff96 	bl	80026c0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <BSP_TSENSOR_Init+0x30>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2100      	movs	r1, #0
 800279c:	20be      	movs	r0, #190	@ 0xbe
 800279e:	4798      	blx	r3

  ret = TSENSOR_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80027a4:	79fb      	ldrb	r3, [r7, #7]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000a3c 	.word	0x20000a3c
 80027b4:	20000008 	.word	0x20000008

080027b8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <BSP_TSENSOR_ReadTemp+0x18>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	20be      	movs	r0, #190	@ 0xbe
 80027c4:	4798      	blx	r3
 80027c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80027ca:	eeb0 0a67 	vmov.f32	s0, s15
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000a3c 	.word	0x20000a3c

080027d4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2120      	movs	r1, #32
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff8e 	bl	8002708 <SENSOR_IO_Read>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002816:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	2120      	movs	r1, #32
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff57 	bl	80026d4 <SENSOR_IO_Write>
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b088      	sub	sp, #32
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	b2d8      	uxtb	r0, r3
 800283c:	f107 0208 	add.w	r2, r7, #8
 8002840:	2302      	movs	r3, #2
 8002842:	21b2      	movs	r1, #178	@ 0xb2
 8002844:	f7ff ff7e 	bl	8002744 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2135      	movs	r1, #53	@ 0x35
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff5a 	bl	8002708 <SENSOR_IO_Read>
 8002854:	4603      	mov	r3, r0
 8002856:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002858:	7ffb      	ldrb	r3, [r7, #31]
 800285a:	b21b      	sxth	r3, r3
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b21b      	sxth	r3, r3
 8002860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002864:	b21a      	sxth	r2, r3
 8002866:	7a3b      	ldrb	r3, [r7, #8]
 8002868:	b21b      	sxth	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800286e:	7ffb      	ldrb	r3, [r7, #31]
 8002870:	b21b      	sxth	r3, r3
 8002872:	019b      	lsls	r3, r3, #6
 8002874:	b21b      	sxth	r3, r3
 8002876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800287a:	b21a      	sxth	r2, r3
 800287c:	7a7b      	ldrb	r3, [r7, #9]
 800287e:	b21b      	sxth	r3, r3
 8002880:	4313      	orrs	r3, r2
 8002882:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002884:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002888:	10db      	asrs	r3, r3, #3
 800288a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800288c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002890:	10db      	asrs	r3, r3, #3
 8002892:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	b2d8      	uxtb	r0, r3
 8002898:	f107 0208 	add.w	r2, r7, #8
 800289c:	2304      	movs	r3, #4
 800289e:	21bc      	movs	r1, #188	@ 0xbc
 80028a0:	f7ff ff50 	bl	8002744 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80028a4:	7a7b      	ldrb	r3, [r7, #9]
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	7a3b      	ldrb	r3, [r7, #8]
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80028b4:	7afb      	ldrb	r3, [r7, #11]
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	7abb      	ldrb	r3, [r7, #10]
 80028be:	b21b      	sxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	b2d8      	uxtb	r0, r3
 80028c8:	f107 0208 	add.w	r2, r7, #8
 80028cc:	2302      	movs	r3, #2
 80028ce:	21aa      	movs	r1, #170	@ 0xaa
 80028d0:	f7ff ff38 	bl	8002744 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80028d4:	7a7b      	ldrb	r3, [r7, #9]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	b21a      	sxth	r2, r3
 80028dc:	7a3b      	ldrb	r3, [r7, #8]
 80028de:	b21b      	sxth	r3, r3
 80028e0:	4313      	orrs	r3, r2
 80028e2:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80028e4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80028e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	ee07 3a90 	vmov	s15, r3
 8002904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002908:	ee67 6a27 	vmul.f32	s13, s14, s15
 800290c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002910:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002922:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002932:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	ee07 3a90 	vmov	s15, r3
}
 800293c:	eeb0 0a67 	vmov.f32	s0, s15
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002950:	2003      	movs	r0, #3
 8002952:	f001 fb83 	bl	800405c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002956:	2000      	movs	r0, #0
 8002958:	f000 f80e 	bl	8002978 <HAL_InitTick>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	e001      	b.n	800296c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002968:	f7ff f90e 	bl	8001b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800296c:	79fb      	ldrb	r3, [r7, #7]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002984:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <HAL_InitTick+0x6c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800298c:	4b16      	ldr	r3, [pc, #88]	@ (80029e8 <HAL_InitTick+0x70>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <HAL_InitTick+0x6c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800299a:	fbb3 f3f1 	udiv	r3, r3, r1
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 fb8f 	bl	80040c6 <HAL_SYSTICK_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b0f      	cmp	r3, #15
 80029b2:	d809      	bhi.n	80029c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b4:	2200      	movs	r2, #0
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029bc:	f001 fb59 	bl	8004072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029c0:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <HAL_InitTick+0x74>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e007      	b.n	80029d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e004      	b.n	80029d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e001      	b.n	80029d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000001c 	.word	0x2000001c
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000018 	.word	0x20000018

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_IncTick+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_IncTick+0x24>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_IncTick+0x24>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000001c 	.word	0x2000001c
 8002a14:	20000a40 	.word	0x20000a40

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000a40 	.word	0x20000a40

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000001c 	.word	0x2000001c

08002a78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3360      	adds	r3, #96	@ 0x60
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <LL_ADC_SetOffset+0x44>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	03fff000 	.word	0x03fff000

08002b28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3360      	adds	r3, #96	@ 0x60
 8002b36:	461a      	mov	r2, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3360      	adds	r3, #96	@ 0x60
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3330      	adds	r3, #48	@ 0x30
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	211f      	movs	r1, #31
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	f003 011f 	and.w	r1, r3, #31
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3314      	adds	r3, #20
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	0e5b      	lsrs	r3, r3, #25
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	0d1b      	lsrs	r3, r3, #20
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2107      	movs	r1, #7
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	0d1b      	lsrs	r3, r3, #20
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0318 	and.w	r3, r3, #24
 8002c82:	4908      	ldr	r1, [pc, #32]	@ (8002ca4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c84:	40d9      	lsrs	r1, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	400b      	ands	r3, r1
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	0007ffff 	.word	0x0007ffff

08002ca8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6093      	str	r3, [r2, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d18:	d101      	bne.n	8002d1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <LL_ADC_IsEnabled+0x18>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <LL_ADC_IsEnabled+0x1a>
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dde:	f043 0204 	orr.w	r2, r3, #4
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b089      	sub	sp, #36	@ 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e130      	b.n	80030bc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe feb1 	bl	8001bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff3f 	bl	8002d04 <LL_ADC_IsDeepPowerDownEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff25 	bl	8002ce0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff5a 	bl	8002d54 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d115      	bne.n	8002ed2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff3e 	bl	8002d2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb0:	4b84      	ldr	r3, [pc, #528]	@ (80030c4 <HAL_ADC_Init+0x284>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	4a84      	ldr	r2, [pc, #528]	@ (80030c8 <HAL_ADC_Init+0x288>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ec4:	e002      	b.n	8002ecc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f9      	bne.n	8002ec6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff3c 	bl	8002d54 <LL_ADC_IsInternalRegulatorEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff75 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8002f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 80c9 	bne.w	80030aa <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80c5 	bne.w	80030aa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f28:	f043 0202 	orr.w	r2, r3, #2
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff35 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d115      	bne.n	8002f6c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f40:	4862      	ldr	r0, [pc, #392]	@ (80030cc <HAL_ADC_Init+0x28c>)
 8002f42:	f7ff ff2f 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f46:	4604      	mov	r4, r0
 8002f48:	4861      	ldr	r0, [pc, #388]	@ (80030d0 <HAL_ADC_Init+0x290>)
 8002f4a:	f7ff ff2b 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	431c      	orrs	r4, r3
 8002f52:	4860      	ldr	r0, [pc, #384]	@ (80030d4 <HAL_ADC_Init+0x294>)
 8002f54:	f7ff ff26 	bl	8002da4 <LL_ADC_IsEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4323      	orrs	r3, r4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4619      	mov	r1, r3
 8002f66:	485c      	ldr	r0, [pc, #368]	@ (80030d8 <HAL_ADC_Init+0x298>)
 8002f68:	f7ff fd86 	bl	8002a78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7e5b      	ldrb	r3, [r3, #25]
 8002f70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	045b      	lsls	r3, r3, #17
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	4b44      	ldr	r3, [pc, #272]	@ (80030dc <HAL_ADC_Init+0x29c>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	69b9      	ldr	r1, [r7, #24]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff1b 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 8002fe2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13d      	bne.n	8003066 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d13a      	bne.n	8003066 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ff4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ffc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800300c:	f023 0302 	bic.w	r3, r3, #2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	69b9      	ldr	r1, [r7, #24]
 8003016:	430b      	orrs	r3, r1
 8003018:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003020:	2b01      	cmp	r3, #1
 8003022:	d118      	bne.n	8003056 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003046:	430a      	orrs	r2, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	611a      	str	r2, [r3, #16]
 8003054:	e007      	b.n	8003066 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10c      	bne.n	8003088 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	f023 010f 	bic.w	r1, r3, #15
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
 8003086:	e007      	b.n	8003098 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 020f 	bic.w	r2, r2, #15
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309c:	f023 0303 	bic.w	r3, r3, #3
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3724      	adds	r7, #36	@ 0x24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}
 80030c4:	20000000 	.word	0x20000000
 80030c8:	053e2d63 	.word	0x053e2d63
 80030cc:	50040000 	.word	0x50040000
 80030d0:	50040100 	.word	0x50040100
 80030d4:	50040200 	.word	0x50040200
 80030d8:	50040300 	.word	0x50040300
 80030dc:	fff0c007 	.word	0xfff0c007

080030e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e8:	4857      	ldr	r0, [pc, #348]	@ (8003248 <HAL_ADC_Start+0x168>)
 80030ea:	f7ff fddd 	bl	8002ca8 <LL_ADC_GetMultimode>
 80030ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe7c 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 809c 	bne.w	800323a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_Start+0x30>
 800310c:	2302      	movs	r3, #2
 800310e:	e097      	b.n	8003240 <HAL_ADC_Start+0x160>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fd73 	bl	8003c04 <ADC_Enable>
 800311e:	4603      	mov	r3, r0
 8003120:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003122:	7dfb      	ldrb	r3, [r7, #23]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 8083 	bne.w	8003230 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a42      	ldr	r2, [pc, #264]	@ (800324c <HAL_ADC_Start+0x16c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d002      	beq.n	800314e <HAL_ADC_Start+0x6e>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	e000      	b.n	8003150 <HAL_ADC_Start+0x70>
 800314e:	4b40      	ldr	r3, [pc, #256]	@ (8003250 <HAL_ADC_Start+0x170>)
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4293      	cmp	r3, r2
 8003156:	d002      	beq.n	800315e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003162:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003176:	d106      	bne.n	8003186 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	f023 0206 	bic.w	r2, r3, #6
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58
 8003184:	e002      	b.n	800318c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	221c      	movs	r2, #28
 8003192:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	@ (800324c <HAL_ADC_Start+0x16c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d002      	beq.n	80031ac <HAL_ADC_Start+0xcc>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e000      	b.n	80031ae <HAL_ADC_Start+0xce>
 80031ac:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <HAL_ADC_Start+0x170>)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d008      	beq.n	80031c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d002      	beq.n	80031c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d114      	bne.n	80031f2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fded 	bl	8002dca <LL_ADC_REG_StartConversion>
 80031f0:	e025      	b.n	800323e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a12      	ldr	r2, [pc, #72]	@ (800324c <HAL_ADC_Start+0x16c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d002      	beq.n	800320e <HAL_ADC_Start+0x12e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e000      	b.n	8003210 <HAL_ADC_Start+0x130>
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_ADC_Start+0x170>)
 8003210:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00f      	beq.n	800323e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003222:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003226:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
 800322e:	e006      	b.n	800323e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003238:	e001      	b.n	800323e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800323a:	2302      	movs	r3, #2
 800323c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	50040300 	.word	0x50040300
 800324c:	50040100 	.word	0x50040100
 8003250:	50040000 	.word	0x50040000

08003254 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800325e:	4866      	ldr	r0, [pc, #408]	@ (80033f8 <HAL_ADC_PollForConversion+0x1a4>)
 8003260:	f7ff fd22 	bl	8002ca8 <LL_ADC_GetMultimode>
 8003264:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d102      	bne.n	8003274 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800326e:	2308      	movs	r3, #8
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e02a      	b.n	80032ca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d002      	beq.n	8003286 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b09      	cmp	r3, #9
 8003284:	d111      	bne.n	80032aa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0a4      	b.n	80033ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80032a4:	2304      	movs	r3, #4
 80032a6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80032a8:	e00f      	b.n	80032ca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80032aa:	4853      	ldr	r0, [pc, #332]	@ (80033f8 <HAL_ADC_PollForConversion+0x1a4>)
 80032ac:	f7ff fd0a 	bl	8002cc4 <LL_ADC_GetMultiDMATransfer>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e093      	b.n	80033ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80032c6:	2304      	movs	r3, #4
 80032c8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032ca:	f7ff fba5 	bl	8002a18 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032d0:	e021      	b.n	8003316 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032d8:	d01d      	beq.n	8003316 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032da:	f7ff fb9d 	bl	8002a18 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <HAL_ADC_PollForConversion+0x9c>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d112      	bne.n	8003316 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e06b      	b.n	80033ee <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0d6      	beq.n	80032d2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fc28 	bl	8002b8a <LL_ADC_REG_IsTriggerSourceSWStart>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7e5b      	ldrb	r3, [r3, #25]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d118      	bne.n	800337a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b08      	cmp	r3, #8
 8003354:	d111      	bne.n	800337a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <HAL_ADC_PollForConversion+0x1a8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d002      	beq.n	800338a <HAL_ADC_PollForConversion+0x136>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	e000      	b.n	800338c <HAL_ADC_PollForConversion+0x138>
 800338a:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_ADC_PollForConversion+0x1ac>)
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	4293      	cmp	r3, r2
 8003392:	d008      	beq.n	80033a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d002      	beq.n	80033a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b09      	cmp	r3, #9
 80033a4:	d104      	bne.n	80033b0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e00c      	b.n	80033ca <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a11      	ldr	r2, [pc, #68]	@ (80033fc <HAL_ADC_PollForConversion+0x1a8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d002      	beq.n	80033c0 <HAL_ADC_PollForConversion+0x16c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	e000      	b.n	80033c2 <HAL_ADC_PollForConversion+0x16e>
 80033c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <HAL_ADC_PollForConversion+0x1ac>)
 80033c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d104      	bne.n	80033da <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2208      	movs	r2, #8
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e008      	b.n	80033ec <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	220c      	movs	r2, #12
 80033ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	50040300 	.word	0x50040300
 80033fc:	50040100 	.word	0x50040100
 8003400:	50040000 	.word	0x50040000

08003404 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b0b6      	sub	sp, #216	@ 0xd8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x22>
 800343e:	2302      	movs	r3, #2
 8003440:	e3c9      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x7b6>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fccf 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 83aa 	bne.w	8003bb0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d824      	bhi.n	80034b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	3b02      	subs	r3, #2
 8003472:	2b03      	cmp	r3, #3
 8003474:	d81b      	bhi.n	80034ae <HAL_ADC_ConfigChannel+0x8e>
 8003476:	a201      	add	r2, pc, #4	@ (adr r2, 800347c <HAL_ADC_ConfigChannel+0x5c>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	0800348d 	.word	0x0800348d
 8003480:	08003495 	.word	0x08003495
 8003484:	0800349d 	.word	0x0800349d
 8003488:	080034a5 	.word	0x080034a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800348c:	230c      	movs	r3, #12
 800348e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003492:	e010      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003494:	2312      	movs	r3, #18
 8003496:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800349a:	e00c      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800349c:	2318      	movs	r3, #24
 800349e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80034a2:	e008      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80034a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80034ac:	e003      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80034ae:	2306      	movs	r3, #6
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80034b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80034c4:	f7ff fb74 	bl	8002bb0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fc90 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 80034d2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fc9c 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 80034e0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f040 81a4 	bne.w	8003836 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 819f 	bne.w	8003836 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	461a      	mov	r2, r3
 8003506:	f7ff fb7f 	bl	8002c08 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	08db      	lsrs	r3, r3, #3
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d00a      	beq.n	8003542 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6919      	ldr	r1, [r3, #16]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800353c:	f7ff fad0 	bl	8002ae0 <LL_ADC_SetOffset>
 8003540:	e179      	b.n	8003836 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff faed 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_ADC_ConfigChannel+0x14e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fae2 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	0e9b      	lsrs	r3, r3, #26
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	e01e      	b.n	80035ac <HAL_ADC_ConfigChannel+0x18c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fad7 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800358c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800359c:	2320      	movs	r3, #32
 800359e:	e004      	b.n	80035aa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80035a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x1a4>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	e018      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1d6>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80035d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80035e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e004      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80035ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d106      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff faa6 	bl	8002b54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2101      	movs	r1, #1
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fa8a 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x214>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fa7f 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 800362a:	4603      	mov	r3, r0
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	f003 021f 	and.w	r2, r3, #31
 8003632:	e01e      	b.n	8003672 <HAL_ADC_ConfigChannel+0x252>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fa74 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003652:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800365a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003662:	2320      	movs	r3, #32
 8003664:	e004      	b.n	8003670 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_ADC_ConfigChannel+0x26a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	0e9b      	lsrs	r3, r3, #26
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	e018      	b.n	80036bc <HAL_ADC_ConfigChannel+0x29c>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800369e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80036a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80036ae:	2320      	movs	r3, #32
 80036b0:	e004      	b.n	80036bc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80036b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036bc:	429a      	cmp	r2, r3
 80036be:	d106      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fa43 	bl	8002b54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2102      	movs	r1, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fa27 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 80036da:	4603      	mov	r3, r0
 80036dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x2da>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fa1c 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 80036f0:	4603      	mov	r3, r0
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	e01e      	b.n	8003738 <HAL_ADC_ConfigChannel+0x318>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2102      	movs	r1, #2
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fa11 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003706:	4603      	mov	r3, r0
 8003708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800371c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e004      	b.n	8003736 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800372c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x330>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	e014      	b.n	800377a <HAL_ADC_ConfigChannel+0x35a>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800375e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003760:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003764:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e004      	b.n	800377a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800377a:	429a      	cmp	r2, r3
 800377c:	d106      	bne.n	800378c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	2102      	movs	r1, #2
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f9e4 	bl	8002b54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2103      	movs	r1, #3
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff f9c8 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003798:	4603      	mov	r3, r0
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x398>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2103      	movs	r1, #3
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff f9bd 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 80037ae:	4603      	mov	r3, r0
 80037b0:	0e9b      	lsrs	r3, r3, #26
 80037b2:	f003 021f 	and.w	r2, r3, #31
 80037b6:	e017      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x3c8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2103      	movs	r1, #3
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff f9b2 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80037d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80037d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80037da:	2320      	movs	r3, #32
 80037dc:	e003      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80037de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x3e0>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0e9b      	lsrs	r3, r3, #26
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	e011      	b.n	8003824 <HAL_ADC_ConfigChannel+0x404>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800380e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003810:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003812:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003818:	2320      	movs	r3, #32
 800381a:	e003      	b.n	8003824 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800381c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003824:	429a      	cmp	r2, r3
 8003826:	d106      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	2103      	movs	r1, #3
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f98f 	bl	8002b54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fab2 	bl	8002da4 <LL_ADC_IsEnabled>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 8140 	bne.w	8003ac8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	461a      	mov	r2, r3
 8003856:	f7ff fa03 	bl	8002c60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a8f      	ldr	r2, [pc, #572]	@ (8003a9c <HAL_ADC_ConfigChannel+0x67c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	f040 8131 	bne.w	8003ac8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_ADC_ConfigChannel+0x46e>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0e9b      	lsrs	r3, r3, #26
 800387c:	3301      	adds	r3, #1
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2b09      	cmp	r3, #9
 8003884:	bf94      	ite	ls
 8003886:	2301      	movls	r3, #1
 8003888:	2300      	movhi	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	e019      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x4a2>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80038a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80038aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	bf94      	ite	ls
 80038bc:	2301      	movls	r3, #1
 80038be:	2300      	movhi	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d079      	beq.n	80039ba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x4c2>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	0e9b      	lsrs	r3, r3, #26
 80038d8:	3301      	adds	r3, #1
 80038da:	069b      	lsls	r3, r3, #26
 80038dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038e0:	e015      	b.n	800390e <HAL_ADC_ConfigChannel+0x4ee>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80038f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80038f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80038fa:	2320      	movs	r3, #32
 80038fc:	e003      	b.n	8003906 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80038fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	3301      	adds	r3, #1
 8003908:	069b      	lsls	r3, r3, #26
 800390a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_ADC_ConfigChannel+0x50e>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	3301      	adds	r3, #1
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2101      	movs	r1, #1
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	e017      	b.n	800395e <HAL_ADC_ConfigChannel+0x53e>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800393c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003946:	2320      	movs	r3, #32
 8003948:	e003      	b.n	8003952 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800394a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394c:	fab3 f383 	clz	r3, r3
 8003950:	b2db      	uxtb	r3, r3
 8003952:	3301      	adds	r3, #1
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	ea42 0103 	orr.w	r1, r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x564>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	0e9b      	lsrs	r3, r3, #26
 8003974:	3301      	adds	r3, #1
 8003976:	f003 021f 	and.w	r2, r3, #31
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	051b      	lsls	r3, r3, #20
 8003982:	e018      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x596>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e003      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	f003 021f 	and.w	r2, r3, #31
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b6:	430b      	orrs	r3, r1
 80039b8:	e081      	b.n	8003abe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x5b6>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	0e9b      	lsrs	r3, r3, #26
 80039cc:	3301      	adds	r3, #1
 80039ce:	069b      	lsls	r3, r3, #26
 80039d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039d4:	e015      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x5e2>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80039e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e003      	b.n	80039fa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	069b      	lsls	r3, r3, #26
 80039fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x602>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	3301      	adds	r3, #1
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	e017      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x632>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
  return result;
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	e003      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	ea42 0103 	orr.w	r1, r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x65e>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0e9b      	lsrs	r3, r3, #26
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f003 021f 	and.w	r2, r3, #31
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	3b1e      	subs	r3, #30
 8003a76:	051b      	lsls	r3, r3, #20
 8003a78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a7c:	e01e      	b.n	8003abc <HAL_ADC_ConfigChannel+0x69c>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
  return result;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003a96:	2320      	movs	r3, #32
 8003a98:	e006      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x688>
 8003a9a:	bf00      	nop
 8003a9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f003 021f 	and.w	r2, r3, #31
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3b1e      	subs	r3, #30
 8003ab6:	051b      	lsls	r3, r3, #20
 8003ab8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003abc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7ff f8a0 	bl	8002c08 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b44      	ldr	r3, [pc, #272]	@ (8003be0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d07a      	beq.n	8003bca <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ad4:	4843      	ldr	r0, [pc, #268]	@ (8003be4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ad6:	f7fe fff5 	bl	8002ac4 <LL_ADC_GetCommonPathInternalCh>
 8003ada:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a41      	ldr	r2, [pc, #260]	@ (8003be8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d12c      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d126      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bec <HAL_ADC_ConfigChannel+0x7cc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x6e8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d15d      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b10:	4619      	mov	r1, r3
 8003b12:	4834      	ldr	r0, [pc, #208]	@ (8003be4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003b14:	f7fe ffc3 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b18:	4b36      	ldr	r3, [pc, #216]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	4a36      	ldr	r2, [pc, #216]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b32:	e002      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f9      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b40:	e040      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2d      	ldr	r2, [pc, #180]	@ (8003bfc <HAL_ADC_ConfigChannel+0x7dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d118      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d112      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a23      	ldr	r2, [pc, #140]	@ (8003bec <HAL_ADC_ConfigChannel+0x7cc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x74c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d12d      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b74:	4619      	mov	r1, r3
 8003b76:	481b      	ldr	r0, [pc, #108]	@ (8003be4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003b78:	f7fe ff91 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b7c:	e024      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1f      	ldr	r2, [pc, #124]	@ (8003c00 <HAL_ADC_ConfigChannel+0x7e0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d120      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11a      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <HAL_ADC_ConfigChannel+0x7cc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d115      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ba2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	480e      	ldr	r0, [pc, #56]	@ (8003be4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003baa:	f7fe ff78 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
 8003bae:	e00c      	b.n	8003bca <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003bc2:	e002      	b.n	8003bca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bd2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	37d8      	adds	r7, #216	@ 0xd8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	80080000 	.word	0x80080000
 8003be4:	50040300 	.word	0x50040300
 8003be8:	c7520000 	.word	0xc7520000
 8003bec:	50040000 	.word	0x50040000
 8003bf0:	50040200 	.word	0x50040200
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	053e2d63 	.word	0x053e2d63
 8003bfc:	cb840000 	.word	0xcb840000
 8003c00:	80000001 	.word	0x80000001

08003c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff f8c5 	bl	8002da4 <LL_ADC_IsEnabled>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d169      	bne.n	8003cf4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <ADC_Enable+0xfc>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c32:	f043 0210 	orr.w	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	f043 0201 	orr.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e055      	b.n	8003cf6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff f894 	bl	8002d7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c54:	482b      	ldr	r0, [pc, #172]	@ (8003d04 <ADC_Enable+0x100>)
 8003c56:	f7fe ff35 	bl	8002ac4 <LL_ADC_GetCommonPathInternalCh>
 8003c5a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c64:	4b28      	ldr	r3, [pc, #160]	@ (8003d08 <ADC_Enable+0x104>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	4a28      	ldr	r2, [pc, #160]	@ (8003d0c <ADC_Enable+0x108>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	4613      	mov	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c7e:	e002      	b.n	8003c86 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f9      	bne.n	8003c80 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c8c:	f7fe fec4 	bl	8002a18 <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c92:	e028      	b.n	8003ce6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f883 	bl	8002da4 <LL_ADC_IsEnabled>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f867 	bl	8002d7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cae:	f7fe feb3 	bl	8002a18 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d914      	bls.n	8003ce6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d00d      	beq.n	8003ce6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cce:	f043 0210 	orr.w	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e007      	b.n	8003cf6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d1cf      	bne.n	8003c94 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	8000003f 	.word	0x8000003f
 8003d04:	50040300 	.word	0x50040300
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	053e2d63 	.word	0x053e2d63

08003d10 <LL_ADC_IsEnabled>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <LL_ADC_IsEnabled+0x18>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <LL_ADC_IsEnabled+0x1a>
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d101      	bne.n	8003d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d5c:	b590      	push	{r4, r7, lr}
 8003d5e:	b09f      	sub	sp, #124	@ 0x7c
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e093      	b.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d82:	2300      	movs	r3, #0
 8003d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d86:	2300      	movs	r3, #0
 8003d88:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a47      	ldr	r2, [pc, #284]	@ (8003eac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d102      	bne.n	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d94:	4b46      	ldr	r3, [pc, #280]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	e001      	b.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e072      	b.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ffb9 	bl	8003d36 <LL_ADC_REG_IsConversionOngoing>
 8003dc4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ffb3 	bl	8003d36 <LL_ADC_REG_IsConversionOngoing>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d154      	bne.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d151      	bne.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ddc:	4b35      	ldr	r3, [pc, #212]	@ (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003dde:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d02c      	beq.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dfa:	035b      	lsls	r3, r3, #13
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e04:	4829      	ldr	r0, [pc, #164]	@ (8003eac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e06:	f7ff ff83 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4828      	ldr	r0, [pc, #160]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e0e:	f7ff ff7f 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e12:	4603      	mov	r3, r0
 8003e14:	431c      	orrs	r4, r3
 8003e16:	4828      	ldr	r0, [pc, #160]	@ (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e18:	f7ff ff7a 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4323      	orrs	r3, r4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d137      	bne.n	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e2c:	f023 030f 	bic.w	r3, r3, #15
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	6811      	ldr	r1, [r2, #0]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	6892      	ldr	r2, [r2, #8]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e3e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e40:	e028      	b.n	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e4e:	4817      	ldr	r0, [pc, #92]	@ (8003eac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e50:	f7ff ff5e 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e54:	4604      	mov	r4, r0
 8003e56:	4816      	ldr	r0, [pc, #88]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e58:	f7ff ff5a 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	431c      	orrs	r4, r3
 8003e60:	4815      	ldr	r0, [pc, #84]	@ (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e62:	f7ff ff55 	bl	8003d10 <LL_ADC_IsEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4323      	orrs	r3, r4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d112      	bne.n	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e7c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e7e:	e009      	b.n	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e92:	e000      	b.n	8003e96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e9e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	377c      	adds	r7, #124	@ 0x7c
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	50040000 	.word	0x50040000
 8003eb0:	50040100 	.word	0x50040100
 8003eb4:	50040300 	.word	0x50040300
 8003eb8:	50040200 	.word	0x50040200

08003ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eee:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	60d3      	str	r3, [r2, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f08:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <__NVIC_GetPriorityGrouping+0x18>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 0307 	and.w	r3, r3, #7
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	db0b      	blt.n	8003f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	4907      	ldr	r1, [pc, #28]	@ (8003f58 <__NVIC_EnableIRQ+0x38>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	2001      	movs	r0, #1
 8003f42:	fa00 f202 	lsl.w	r2, r0, r2
 8003f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	e000e100 	.word	0xe000e100

08003f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db0a      	blt.n	8003f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	490c      	ldr	r1, [pc, #48]	@ (8003fa8 <__NVIC_SetPriority+0x4c>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f84:	e00a      	b.n	8003f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4908      	ldr	r1, [pc, #32]	@ (8003fac <__NVIC_SetPriority+0x50>)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3b04      	subs	r3, #4
 8003f94:	0112      	lsls	r2, r2, #4
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	440b      	add	r3, r1
 8003f9a:	761a      	strb	r2, [r3, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000e100 	.word	0xe000e100
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	@ 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f1c3 0307 	rsb	r3, r3, #7
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	bf28      	it	cs
 8003fce:	2304      	movcs	r3, #4
 8003fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d902      	bls.n	8003fe0 <NVIC_EncodePriority+0x30>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3b03      	subs	r3, #3
 8003fde:	e000      	b.n	8003fe2 <NVIC_EncodePriority+0x32>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43d9      	mvns	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	4313      	orrs	r3, r2
         );
}
 800400a:	4618      	mov	r0, r3
 800400c:	3724      	adds	r7, #36	@ 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004028:	d301      	bcc.n	800402e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800402a:	2301      	movs	r3, #1
 800402c:	e00f      	b.n	800404e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800402e:	4a0a      	ldr	r2, [pc, #40]	@ (8004058 <SysTick_Config+0x40>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3b01      	subs	r3, #1
 8004034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004036:	210f      	movs	r1, #15
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800403c:	f7ff ff8e 	bl	8003f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004040:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <SysTick_Config+0x40>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004046:	4b04      	ldr	r3, [pc, #16]	@ (8004058 <SysTick_Config+0x40>)
 8004048:	2207      	movs	r2, #7
 800404a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	e000e010 	.word	0xe000e010

0800405c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ff29 	bl	8003ebc <__NVIC_SetPriorityGrouping>
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004084:	f7ff ff3e 	bl	8003f04 <__NVIC_GetPriorityGrouping>
 8004088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	6978      	ldr	r0, [r7, #20]
 8004090:	f7ff ff8e 	bl	8003fb0 <NVIC_EncodePriority>
 8004094:	4602      	mov	r2, r0
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ff5d 	bl	8003f5c <__NVIC_SetPriority>
}
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	4603      	mov	r3, r0
 80040b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff31 	bl	8003f20 <__NVIC_EnableIRQ>
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ffa2 	bl	8004018 <SysTick_Config>
 80040d4:	4603      	mov	r3, r0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0ac      	b.n	800424c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f8b2 	bl	8004260 <DFSDM_GetChannelFromInstance>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4a55      	ldr	r2, [pc, #340]	@ (8004254 <HAL_DFSDM_ChannelInit+0x174>)
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e09f      	b.n	800424c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fd fdb7 	bl	8001c80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004112:	4b51      	ldr	r3, [pc, #324]	@ (8004258 <HAL_DFSDM_ChannelInit+0x178>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3301      	adds	r3, #1
 8004118:	4a4f      	ldr	r2, [pc, #316]	@ (8004258 <HAL_DFSDM_ChannelInit+0x178>)
 800411a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800411c:	4b4e      	ldr	r3, [pc, #312]	@ (8004258 <HAL_DFSDM_ChannelInit+0x178>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d125      	bne.n	8004170 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004124:	4b4d      	ldr	r3, [pc, #308]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a4c      	ldr	r2, [pc, #304]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 800412a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800412e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004130:	4b4a      	ldr	r3, [pc, #296]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4948      	ldr	r1, [pc, #288]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800413e:	4b47      	ldr	r3, [pc, #284]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a46      	ldr	r2, [pc, #280]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 8004144:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004148:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	791b      	ldrb	r3, [r3, #4]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d108      	bne.n	8004164 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004152:	4b42      	ldr	r3, [pc, #264]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	3b01      	subs	r3, #1
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	493f      	ldr	r1, [pc, #252]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004164:	4b3d      	ldr	r3, [pc, #244]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a3c      	ldr	r2, [pc, #240]	@ (800425c <HAL_DFSDM_ChannelInit+0x17c>)
 800416a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800416e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800417e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800418e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004194:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 020f 	bic.w	r2, r2, #15
 80041ac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80041d4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6899      	ldr	r1, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	3b01      	subs	r3, #1
 80041e6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f002 0207 	and.w	r2, r2, #7
 8004200:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6859      	ldr	r1, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800422c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f810 	bl	8004260 <DFSDM_GetChannelFromInstance>
 8004240:	4602      	mov	r2, r0
 8004242:	4904      	ldr	r1, [pc, #16]	@ (8004254 <HAL_DFSDM_ChannelInit+0x174>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000a48 	.word	0x20000a48
 8004258:	20000a44 	.word	0x20000a44
 800425c:	40016000 	.word	0x40016000

08004260 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1c      	ldr	r2, [pc, #112]	@ (80042dc <DFSDM_GetChannelFromInstance+0x7c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d102      	bne.n	8004276 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e02b      	b.n	80042ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a19      	ldr	r2, [pc, #100]	@ (80042e0 <DFSDM_GetChannelFromInstance+0x80>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d102      	bne.n	8004284 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800427e:	2301      	movs	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e024      	b.n	80042ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <DFSDM_GetChannelFromInstance+0x84>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d102      	bne.n	8004292 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800428c:	2302      	movs	r3, #2
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e01d      	b.n	80042ce <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <DFSDM_GetChannelFromInstance+0x88>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d102      	bne.n	80042a0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800429a:	2304      	movs	r3, #4
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e016      	b.n	80042ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <DFSDM_GetChannelFromInstance+0x8c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d102      	bne.n	80042ae <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80042a8:	2305      	movs	r3, #5
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e00f      	b.n	80042ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a0f      	ldr	r2, [pc, #60]	@ (80042f0 <DFSDM_GetChannelFromInstance+0x90>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d102      	bne.n	80042bc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80042b6:	2306      	movs	r3, #6
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e008      	b.n	80042ce <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a0d      	ldr	r2, [pc, #52]	@ (80042f4 <DFSDM_GetChannelFromInstance+0x94>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d102      	bne.n	80042ca <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80042c4:	2307      	movs	r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e001      	b.n	80042ce <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80042ca:	2303      	movs	r3, #3
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40016000 	.word	0x40016000
 80042e0:	40016020 	.word	0x40016020
 80042e4:	40016040 	.word	0x40016040
 80042e8:	40016080 	.word	0x40016080
 80042ec:	400160a0 	.word	0x400160a0
 80042f0:	400160c0 	.word	0x400160c0
 80042f4:	400160e0 	.word	0x400160e0

080042f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004306:	e17f      	b.n	8004608 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	4013      	ands	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8171 	beq.w	8004602 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d005      	beq.n	8004338 <HAL_GPIO_Init+0x40>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d130      	bne.n	800439a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	2203      	movs	r2, #3
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800436e:	2201      	movs	r2, #1
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4013      	ands	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	091b      	lsrs	r3, r3, #4
 8004384:	f003 0201 	and.w	r2, r3, #1
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d118      	bne.n	80043d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043ac:	2201      	movs	r2, #1
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f003 0201 	and.w	r2, r3, #1
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d017      	beq.n	8004414 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	2203      	movs	r2, #3
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d123      	bne.n	8004468 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	08da      	lsrs	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3208      	adds	r2, #8
 8004428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	220f      	movs	r2, #15
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	08da      	lsrs	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3208      	adds	r2, #8
 8004462:	6939      	ldr	r1, [r7, #16]
 8004464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80ac 	beq.w	8004602 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004628 <HAL_GPIO_Init+0x330>)
 80044ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004628 <HAL_GPIO_Init+0x330>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80044b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004628 <HAL_GPIO_Init+0x330>)
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044c2:	4a5a      	ldr	r2, [pc, #360]	@ (800462c <HAL_GPIO_Init+0x334>)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044ec:	d025      	beq.n	800453a <HAL_GPIO_Init+0x242>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004630 <HAL_GPIO_Init+0x338>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01f      	beq.n	8004536 <HAL_GPIO_Init+0x23e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004634 <HAL_GPIO_Init+0x33c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d019      	beq.n	8004532 <HAL_GPIO_Init+0x23a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4d      	ldr	r2, [pc, #308]	@ (8004638 <HAL_GPIO_Init+0x340>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_GPIO_Init+0x236>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4c      	ldr	r2, [pc, #304]	@ (800463c <HAL_GPIO_Init+0x344>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00d      	beq.n	800452a <HAL_GPIO_Init+0x232>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4b      	ldr	r2, [pc, #300]	@ (8004640 <HAL_GPIO_Init+0x348>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <HAL_GPIO_Init+0x22e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4a      	ldr	r2, [pc, #296]	@ (8004644 <HAL_GPIO_Init+0x34c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <HAL_GPIO_Init+0x22a>
 800451e:	2306      	movs	r3, #6
 8004520:	e00c      	b.n	800453c <HAL_GPIO_Init+0x244>
 8004522:	2307      	movs	r3, #7
 8004524:	e00a      	b.n	800453c <HAL_GPIO_Init+0x244>
 8004526:	2305      	movs	r3, #5
 8004528:	e008      	b.n	800453c <HAL_GPIO_Init+0x244>
 800452a:	2304      	movs	r3, #4
 800452c:	e006      	b.n	800453c <HAL_GPIO_Init+0x244>
 800452e:	2303      	movs	r3, #3
 8004530:	e004      	b.n	800453c <HAL_GPIO_Init+0x244>
 8004532:	2302      	movs	r3, #2
 8004534:	e002      	b.n	800453c <HAL_GPIO_Init+0x244>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_GPIO_Init+0x244>
 800453a:	2300      	movs	r3, #0
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	f002 0203 	and.w	r2, r2, #3
 8004542:	0092      	lsls	r2, r2, #2
 8004544:	4093      	lsls	r3, r2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800454c:	4937      	ldr	r1, [pc, #220]	@ (800462c <HAL_GPIO_Init+0x334>)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	3302      	adds	r3, #2
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800455a:	4b3b      	ldr	r3, [pc, #236]	@ (8004648 <HAL_GPIO_Init+0x350>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	43db      	mvns	r3, r3
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800457e:	4a32      	ldr	r2, [pc, #200]	@ (8004648 <HAL_GPIO_Init+0x350>)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004584:	4b30      	ldr	r3, [pc, #192]	@ (8004648 <HAL_GPIO_Init+0x350>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	43db      	mvns	r3, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045a8:	4a27      	ldr	r2, [pc, #156]	@ (8004648 <HAL_GPIO_Init+0x350>)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045ae:	4b26      	ldr	r3, [pc, #152]	@ (8004648 <HAL_GPIO_Init+0x350>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004648 <HAL_GPIO_Init+0x350>)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_GPIO_Init+0x350>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045fc:	4a12      	ldr	r2, [pc, #72]	@ (8004648 <HAL_GPIO_Init+0x350>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	3301      	adds	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa22 f303 	lsr.w	r3, r2, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	f47f ae78 	bne.w	8004308 <HAL_GPIO_Init+0x10>
  }
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	40010000 	.word	0x40010000
 8004630:	48000400 	.word	0x48000400
 8004634:	48000800 	.word	0x48000800
 8004638:	48000c00 	.word	0x48000c00
 800463c:	48001000 	.word	0x48001000
 8004640:	48001400 	.word	0x48001400
 8004644:	48001800 	.word	0x48001800
 8004648:	40010400 	.word	0x40010400

0800464c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800465a:	e0cd      	b.n	80047f8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800465c:	2201      	movs	r2, #1
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80c0 	beq.w	80047f2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004672:	4a68      	ldr	r2, [pc, #416]	@ (8004814 <HAL_GPIO_DeInit+0x1c8>)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	3302      	adds	r3, #2
 800467a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	220f      	movs	r2, #15
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800469a:	d025      	beq.n	80046e8 <HAL_GPIO_DeInit+0x9c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a5e      	ldr	r2, [pc, #376]	@ (8004818 <HAL_GPIO_DeInit+0x1cc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d01f      	beq.n	80046e4 <HAL_GPIO_DeInit+0x98>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a5d      	ldr	r2, [pc, #372]	@ (800481c <HAL_GPIO_DeInit+0x1d0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d019      	beq.n	80046e0 <HAL_GPIO_DeInit+0x94>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004820 <HAL_GPIO_DeInit+0x1d4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <HAL_GPIO_DeInit+0x90>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004824 <HAL_GPIO_DeInit+0x1d8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00d      	beq.n	80046d8 <HAL_GPIO_DeInit+0x8c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a5a      	ldr	r2, [pc, #360]	@ (8004828 <HAL_GPIO_DeInit+0x1dc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <HAL_GPIO_DeInit+0x88>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a59      	ldr	r2, [pc, #356]	@ (800482c <HAL_GPIO_DeInit+0x1e0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d101      	bne.n	80046d0 <HAL_GPIO_DeInit+0x84>
 80046cc:	2306      	movs	r3, #6
 80046ce:	e00c      	b.n	80046ea <HAL_GPIO_DeInit+0x9e>
 80046d0:	2307      	movs	r3, #7
 80046d2:	e00a      	b.n	80046ea <HAL_GPIO_DeInit+0x9e>
 80046d4:	2305      	movs	r3, #5
 80046d6:	e008      	b.n	80046ea <HAL_GPIO_DeInit+0x9e>
 80046d8:	2304      	movs	r3, #4
 80046da:	e006      	b.n	80046ea <HAL_GPIO_DeInit+0x9e>
 80046dc:	2303      	movs	r3, #3
 80046de:	e004      	b.n	80046ea <HAL_GPIO_DeInit+0x9e>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e002      	b.n	80046ea <HAL_GPIO_DeInit+0x9e>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_GPIO_DeInit+0x9e>
 80046e8:	2300      	movs	r3, #0
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	f002 0203 	and.w	r2, r2, #3
 80046f0:	0092      	lsls	r2, r2, #2
 80046f2:	4093      	lsls	r3, r2
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d132      	bne.n	8004760 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80046fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	494b      	ldr	r1, [pc, #300]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 8004704:	4013      	ands	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004708:	4b49      	ldr	r3, [pc, #292]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	43db      	mvns	r3, r3
 8004710:	4947      	ldr	r1, [pc, #284]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 8004712:	4013      	ands	r3, r2
 8004714:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004716:	4b46      	ldr	r3, [pc, #280]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	43db      	mvns	r3, r3
 800471e:	4944      	ldr	r1, [pc, #272]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 8004720:	4013      	ands	r3, r2
 8004722:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004724:	4b42      	ldr	r3, [pc, #264]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	4940      	ldr	r1, [pc, #256]	@ (8004830 <HAL_GPIO_DeInit+0x1e4>)
 800472e:	4013      	ands	r3, r2
 8004730:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	220f      	movs	r2, #15
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004742:	4a34      	ldr	r2, [pc, #208]	@ (8004814 <HAL_GPIO_DeInit+0x1c8>)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	3302      	adds	r3, #2
 800474a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	43da      	mvns	r2, r3
 8004752:	4830      	ldr	r0, [pc, #192]	@ (8004814 <HAL_GPIO_DeInit+0x1c8>)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	400a      	ands	r2, r1
 800475a:	3302      	adds	r3, #2
 800475c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	2103      	movs	r1, #3
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	08da      	lsrs	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3208      	adds	r2, #8
 800477c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	08d2      	lsrs	r2, r2, #3
 8004794:	4019      	ands	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3208      	adds	r2, #8
 800479a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	2103      	movs	r1, #3
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	2101      	movs	r1, #1
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	2103      	movs	r1, #3
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	401a      	ands	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	2101      	movs	r1, #1
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	401a      	ands	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3301      	adds	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f af2b 	bne.w	800465c <HAL_GPIO_DeInit+0x10>
  }
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40010000 	.word	0x40010000
 8004818:	48000400 	.word	0x48000400
 800481c:	48000800 	.word	0x48000800
 8004820:	48000c00 	.word	0x48000c00
 8004824:	48001000 	.word	0x48001000
 8004828:	48001400 	.word	0x48001400
 800482c:	48001800 	.word	0x48001800
 8004830:	40010400 	.word	0x40010400

08004834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	887b      	ldrh	r3, [r7, #2]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e001      	b.n	8004856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
 8004870:	4613      	mov	r3, r2
 8004872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004874:	787b      	ldrb	r3, [r7, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004880:	e002      	b.n	8004888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800489e:	4b08      	ldr	r3, [pc, #32]	@ (80048c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d006      	beq.n	80048b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048aa:	4a05      	ldr	r2, [pc, #20]	@ (80048c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc fb40 	bl	8000f38 <HAL_GPIO_EXTI_Callback>
  }
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40010400 	.word	0x40010400

080048c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e08d      	b.n	80049f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd fa2c 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	@ 0x24
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004914:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004924:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	e006      	b.n	800494c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800494a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d108      	bne.n	8004966 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	e007      	b.n	8004976 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e021      	b.n	8004a50 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	@ 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fd f9ed 	bl	8001e04 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	817b      	strh	r3, [r7, #10]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	813b      	strh	r3, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	f040 80f9 	bne.w	8004c72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x34>
 8004a86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0ed      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2C_Mem_Write+0x4e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0e6      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aae:	f7fd ffb3 	bl	8002a18 <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2319      	movs	r3, #25
 8004aba:	2201      	movs	r2, #1
 8004abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fac3 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0d1      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2221      	movs	r2, #33	@ 0x21
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2240      	movs	r2, #64	@ 0x40
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004af8:	88f8      	ldrh	r0, [r7, #6]
 8004afa:	893a      	ldrh	r2, [r7, #8]
 8004afc:	8979      	ldrh	r1, [r7, #10]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4603      	mov	r3, r0
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f9d3 	bl	8004eb4 <I2C_RequestMemoryWrite>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0a9      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2bff      	cmp	r3, #255	@ 0xff
 8004b28:	d90e      	bls.n	8004b48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	22ff      	movs	r2, #255	@ 0xff
 8004b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	8979      	ldrh	r1, [r7, #10]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fc47 	bl	80053d4 <I2C_TransferConfig>
 8004b46:	e00f      	b.n	8004b68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	8979      	ldrh	r1, [r7, #10]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fc36 	bl	80053d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fac6 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e07b      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d034      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d130      	bne.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2180      	movs	r1, #128	@ 0x80
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa3f 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e04d      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2bff      	cmp	r3, #255	@ 0xff
 8004be0:	d90e      	bls.n	8004c00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	22ff      	movs	r2, #255	@ 0xff
 8004be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	8979      	ldrh	r1, [r7, #10]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fbeb 	bl	80053d4 <I2C_TransferConfig>
 8004bfe:	e00f      	b.n	8004c20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	8979      	ldrh	r1, [r7, #10]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fbda 	bl	80053d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d19e      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 faac 	bl	800518c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e01a      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2220      	movs	r2, #32
 8004c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <HAL_I2C_Mem_Write+0x224>)
 8004c52:	400b      	ands	r3, r1
 8004c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
  }
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	fe00e800 	.word	0xfe00e800

08004c80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	f040 80fd 	bne.w	8004ea2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0x34>
 8004cae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0f1      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_I2C_Mem_Read+0x4e>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0ea      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fd fe9f 	bl	8002a18 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2319      	movs	r3, #25
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f9af 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0d5      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2222      	movs	r2, #34	@ 0x22
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2240      	movs	r2, #64	@ 0x40
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d20:	88f8      	ldrh	r0, [r7, #6]
 8004d22:	893a      	ldrh	r2, [r7, #8]
 8004d24:	8979      	ldrh	r1, [r7, #10]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4603      	mov	r3, r0
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f913 	bl	8004f5c <I2C_RequestMemoryRead>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0ad      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2bff      	cmp	r3, #255	@ 0xff
 8004d50:	d90e      	bls.n	8004d70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	4b52      	ldr	r3, [pc, #328]	@ (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fb33 	bl	80053d4 <I2C_TransferConfig>
 8004d6e:	e00f      	b.n	8004d90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	8979      	ldrh	r1, [r7, #10]
 8004d82:	4b4a      	ldr	r3, [pc, #296]	@ (8004eac <HAL_I2C_Mem_Read+0x22c>)
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb22 	bl	80053d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	2200      	movs	r2, #0
 8004d98:	2104      	movs	r1, #4
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f956 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07c      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d034      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d130      	bne.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	2200      	movs	r2, #0
 8004df6:	2180      	movs	r1, #128	@ 0x80
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f927 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04d      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2bff      	cmp	r3, #255	@ 0xff
 8004e10:	d90e      	bls.n	8004e30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	8979      	ldrh	r1, [r7, #10]
 8004e20:	2300      	movs	r3, #0
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fad3 	bl	80053d4 <I2C_TransferConfig>
 8004e2e:	e00f      	b.n	8004e50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	8979      	ldrh	r1, [r7, #10]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fac2 	bl	80053d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d19a      	bne.n	8004d90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f994 	bl	800518c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e01a      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2220      	movs	r2, #32
 8004e74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6859      	ldr	r1, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <HAL_I2C_Mem_Read+0x230>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	80002400 	.word	0x80002400
 8004eb0:	fe00e800 	.word	0xfe00e800

08004eb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	817b      	strh	r3, [r7, #10]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	813b      	strh	r3, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	8979      	ldrh	r1, [r7, #10]
 8004ed4:	4b20      	ldr	r3, [pc, #128]	@ (8004f58 <I2C_RequestMemoryWrite+0xa4>)
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fa79 	bl	80053d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f909 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e02c      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f06:	e015      	b.n	8004f34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f08:	893b      	ldrh	r3, [r7, #8]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	69b9      	ldr	r1, [r7, #24]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8ef 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e012      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	@ 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f884 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	80002000 	.word	0x80002000

08004f5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	813b      	strh	r3, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	8979      	ldrh	r1, [r7, #10]
 8004f7c:	4b20      	ldr	r3, [pc, #128]	@ (8005000 <I2C_RequestMemoryRead+0xa4>)
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fa26 	bl	80053d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	69b9      	ldr	r1, [r7, #24]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f8b6 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e02c      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa2:	893b      	ldrh	r3, [r7, #8]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fac:	e015      	b.n	8004fda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fae:	893b      	ldrh	r3, [r7, #8]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	69b9      	ldr	r1, [r7, #24]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f89c 	bl	80050fe <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e012      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd0:	893b      	ldrh	r3, [r7, #8]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2140      	movs	r1, #64	@ 0x40
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f831 	bl	800504c <I2C_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	80002000 	.word	0x80002000

08005004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d103      	bne.n	8005022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d007      	beq.n	8005040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	619a      	str	r2, [r3, #24]
  }
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800505c:	e03b      	b.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8d6 	bl	8005214 <I2C_IsErrorOccurred>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e041      	b.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005078:	d02d      	beq.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507a:	f7fd fccd 	bl	8002a18 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <I2C_WaitOnFlagUntilTimeout+0x44>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d122      	bne.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4013      	ands	r3, r2
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	429a      	cmp	r2, r3
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d113      	bne.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e00f      	b.n	80050f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d0b4      	beq.n	800505e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800510a:	e033      	b.n	8005174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f87f 	bl	8005214 <I2C_IsErrorOccurred>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e031      	b.n	8005184 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005126:	d025      	beq.n	8005174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005128:	f7fd fc76 	bl	8002a18 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	d302      	bcc.n	800513e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d11a      	bne.n	8005174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d013      	beq.n	8005174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e007      	b.n	8005184 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d1c4      	bne.n	800510c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005198:	e02f      	b.n	80051fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f838 	bl	8005214 <I2C_IsErrorOccurred>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e02d      	b.n	800520a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fd fc33 	bl	8002a18 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d11a      	bne.n	80051fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d013      	beq.n	80051fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e007      	b.n	800520a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b20      	cmp	r3, #32
 8005206:	d1c8      	bne.n	800519a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	@ 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	d068      	beq.n	8005312 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2210      	movs	r2, #16
 8005246:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005248:	e049      	b.n	80052de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005250:	d045      	beq.n	80052de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fd fbe1 	bl	8002a18 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_IsErrorOccurred+0x54>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d13a      	bne.n	80052de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005272:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800527a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800528a:	d121      	bne.n	80052d0 <I2C_IsErrorOccurred+0xbc>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005292:	d01d      	beq.n	80052d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	2b20      	cmp	r3, #32
 8005298:	d01a      	beq.n	80052d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052aa:	f7fd fbb5 	bl	8002a18 <HAL_GetTick>
 80052ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052b0:	e00e      	b.n	80052d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052b2:	f7fd fbb1 	bl	8002a18 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b19      	cmp	r3, #25
 80052be:	d907      	bls.n	80052d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	f043 0320 	orr.w	r3, r3, #32
 80052c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80052ce:	e006      	b.n	80052de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d1e9      	bne.n	80052b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d003      	beq.n	80052f4 <I2C_IsErrorOccurred+0xe0>
 80052ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0aa      	beq.n	800524a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2220      	movs	r2, #32
 8005302:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f043 0308 	orr.w	r3, r3, #8
 800534c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005356:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	f043 0302 	orr.w	r3, r3, #2
 800536e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005378:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01c      	beq.n	80053c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fe3b 	bl	8005004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6859      	ldr	r1, [r3, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <I2C_IsErrorOccurred+0x1bc>)
 800539a:	400b      	ands	r3, r1
 800539c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80053c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3728      	adds	r7, #40	@ 0x28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	fe00e800 	.word	0xfe00e800

080053d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	460b      	mov	r3, r1
 80053e0:	817b      	strh	r3, [r7, #10]
 80053e2:	4613      	mov	r3, r2
 80053e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053e6:	897b      	ldrh	r3, [r7, #10]
 80053e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053ec:	7a7b      	ldrb	r3, [r7, #9]
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005402:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	0d5b      	lsrs	r3, r3, #21
 800540e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005412:	4b08      	ldr	r3, [pc, #32]	@ (8005434 <I2C_TransferConfig+0x60>)
 8005414:	430b      	orrs	r3, r1
 8005416:	43db      	mvns	r3, r3
 8005418:	ea02 0103 	and.w	r1, r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	03ff63ff 	.word	0x03ff63ff

08005438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b20      	cmp	r3, #32
 800544c:	d138      	bne.n	80054c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005458:	2302      	movs	r3, #2
 800545a:	e032      	b.n	80054c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2224      	movs	r2, #36	@ 0x24
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800548a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d139      	bne.n	8005558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e033      	b.n	800555a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2224      	movs	r2, #36	@ 0x24
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af02      	add	r7, sp, #8
 800556c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e101      	b.n	800577c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fc fdaf 	bl	80020f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2203      	movs	r2, #3
 8005596:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f002 fedb 	bl	8008360 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	7c1a      	ldrb	r2, [r3, #16]
 80055b2:	f88d 2000 	strb.w	r2, [sp]
 80055b6:	3304      	adds	r3, #4
 80055b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055ba:	f002 fea4 	bl	8008306 <USB_CoreInit>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0d5      	b.n	800577c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2100      	movs	r1, #0
 80055d6:	4618      	mov	r0, r3
 80055d8:	f002 fed3 	bl	8008382 <USB_SetCurrentMode>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0c6      	b.n	800577c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
 80055f2:	e04a      	b.n	800568a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055f4:	7bfa      	ldrb	r2, [r7, #15]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3315      	adds	r3, #21
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	3314      	adds	r3, #20
 8005618:	7bfa      	ldrb	r2, [r7, #15]
 800561a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800561c:	7bfa      	ldrb	r2, [r7, #15]
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	b298      	uxth	r0, r3
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	332e      	adds	r3, #46	@ 0x2e
 8005630:	4602      	mov	r2, r0
 8005632:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	3318      	adds	r3, #24
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	331c      	adds	r3, #28
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	3320      	adds	r3, #32
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	3324      	adds	r3, #36	@ 0x24
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	3301      	adds	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	791b      	ldrb	r3, [r3, #4]
 800568e:	7bfa      	ldrb	r2, [r7, #15]
 8005690:	429a      	cmp	r2, r3
 8005692:	d3af      	bcc.n	80055f4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e044      	b.n	8005724 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800569a:	7bfa      	ldrb	r2, [r7, #15]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056b0:	7bfa      	ldrb	r2, [r7, #15]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056c6:	7bfa      	ldrb	r2, [r7, #15]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	3301      	adds	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	791b      	ldrb	r3, [r3, #4]
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	429a      	cmp	r2, r3
 800572c:	d3b5      	bcc.n	800569a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	7c1a      	ldrb	r2, [r3, #16]
 8005736:	f88d 2000 	strb.w	r2, [sp]
 800573a:	3304      	adds	r3, #4
 800573c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800573e:	f002 fe6d 	bl	800841c <USB_DevInit>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e013      	b.n	800577c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	7b1b      	ldrb	r3, [r3, #12]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f80a 	bl	8005784 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f003 f812 	bl	800879e <USB_DevDisconnect>

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	f043 0303 	orr.w	r3, r3, #3
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a04      	ldr	r2, [pc, #16]	@ (80057e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057da:	6013      	str	r3, [r2, #0]
}
 80057dc:	bf00      	nop
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40007000 	.word	0x40007000

080057ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057f0:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <HAL_PWREx_GetVoltageRange+0x18>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40007000 	.word	0x40007000

08005808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005816:	d130      	bne.n	800587a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005818:	4b23      	ldr	r3, [pc, #140]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005824:	d038      	beq.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005826:	4b20      	ldr	r3, [pc, #128]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800582e:	4a1e      	ldr	r2, [pc, #120]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005830:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005836:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2232      	movs	r2, #50	@ 0x32
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	4a1b      	ldr	r2, [pc, #108]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	0c9b      	lsrs	r3, r3, #18
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800584c:	e002      	b.n	8005854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3b01      	subs	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005854:	4b14      	ldr	r3, [pc, #80]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800585c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005860:	d102      	bne.n	8005868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f2      	bne.n	800584e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005868:	4b0f      	ldr	r3, [pc, #60]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005874:	d110      	bne.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e00f      	b.n	800589a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800587a:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005886:	d007      	beq.n	8005898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005888:	4b07      	ldr	r3, [pc, #28]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005890:	4a05      	ldr	r2, [pc, #20]	@ (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40007000 	.word	0x40007000
 80058ac:	20000000 	.word	0x20000000
 80058b0:	431bde83 	.word	0x431bde83

080058b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80058b8:	4b05      	ldr	r3, [pc, #20]	@ (80058d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a04      	ldr	r2, [pc, #16]	@ (80058d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80058be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058c2:	6053      	str	r3, [r2, #4]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40007000 	.word	0x40007000

080058d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af02      	add	r7, sp, #8
 80058da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80058dc:	f7fd f89c 	bl	8002a18 <HAL_GetTick>
 80058e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e063      	b.n	80059b4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fc faa3 	bl	8001e4c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005906:	f241 3188 	movw	r1, #5000	@ 0x1388
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f858 	bl	80059c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	3b01      	subs	r3, #1
 8005920:	021a      	lsls	r2, r3, #8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	2120      	movs	r1, #32
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f850 	bl	80059dc <QSPI_WaitFlagStateUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d131      	bne.n	80059aa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005950:	f023 0310 	bic.w	r3, r3, #16
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6852      	ldr	r2, [r2, #4]
 8005958:	0611      	lsls	r1, r2, #24
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68d2      	ldr	r2, [r2, #12]
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	430b      	orrs	r3, r1
 8005966:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	4b13      	ldr	r3, [pc, #76]	@ (80059bc <HAL_QSPI_Init+0xe8>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6912      	ldr	r2, [r2, #16]
 8005976:	0411      	lsls	r1, r2, #16
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6952      	ldr	r2, [r2, #20]
 800597c:	4311      	orrs	r1, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6992      	ldr	r2, [r2, #24]
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	430b      	orrs	r3, r1
 800598a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80059b2:	7afb      	ldrb	r3, [r7, #11]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	ffe0f8fe 	.word	0xffe0f8fe

080059c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80059ec:	e01a      	b.n	8005a24 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059f4:	d016      	beq.n	8005a24 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fd f80f 	bl	8002a18 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	f043 0201 	orr.w	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e00e      	b.n	8005a42 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d1d6      	bne.n	80059ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e3ca      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a5e:	4b97      	ldr	r3, [pc, #604]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
 8005a66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a68:	4b94      	ldr	r3, [pc, #592]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80e4 	beq.w	8005c48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <HAL_RCC_OscConfig+0x4a>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	f040 808b 	bne.w	8005ba4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 8087 	bne.w	8005ba4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a96:	4b89      	ldr	r3, [pc, #548]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_RCC_OscConfig+0x62>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e3a2      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	4b82      	ldr	r3, [pc, #520]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x7c>
 8005abe:	4b7f      	ldr	r3, [pc, #508]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ac6:	e005      	b.n	8005ad4 <HAL_RCC_OscConfig+0x88>
 8005ac8:	4b7c      	ldr	r3, [pc, #496]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ace:	091b      	lsrs	r3, r3, #4
 8005ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d223      	bcs.n	8005b20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fd55 	bl	800658c <RCC_SetFlashLatencyFromMSIRange>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e383      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aec:	4b73      	ldr	r3, [pc, #460]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a72      	ldr	r2, [pc, #456]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005af2:	f043 0308 	orr.w	r3, r3, #8
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	4b70      	ldr	r3, [pc, #448]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	496d      	ldr	r1, [pc, #436]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	4968      	ldr	r1, [pc, #416]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
 8005b1e:	e025      	b.n	8005b6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b20:	4b66      	ldr	r3, [pc, #408]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a65      	ldr	r2, [pc, #404]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b26:	f043 0308 	orr.w	r3, r3, #8
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b63      	ldr	r3, [pc, #396]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	4960      	ldr	r1, [pc, #384]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	495b      	ldr	r1, [pc, #364]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fd15 	bl	800658c <RCC_SetFlashLatencyFromMSIRange>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e343      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b6c:	f000 fc4a 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	4b52      	ldr	r3, [pc, #328]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	091b      	lsrs	r3, r3, #4
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	4950      	ldr	r1, [pc, #320]	@ (8005cc0 <HAL_RCC_OscConfig+0x274>)
 8005b7e:	5ccb      	ldrb	r3, [r1, r3]
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
 8005b88:	4a4e      	ldr	r2, [pc, #312]	@ (8005cc4 <HAL_RCC_OscConfig+0x278>)
 8005b8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b8c:	4b4e      	ldr	r3, [pc, #312]	@ (8005cc8 <HAL_RCC_OscConfig+0x27c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fc fef1 	bl	8002978 <HAL_InitTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d052      	beq.n	8005c46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	e327      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d032      	beq.n	8005c12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bac:	4b43      	ldr	r3, [pc, #268]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a42      	ldr	r2, [pc, #264]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bb8:	f7fc ff2e 	bl	8002a18 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bc0:	f7fc ff2a 	bl	8002a18 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e310      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bde:	4b37      	ldr	r3, [pc, #220]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a36      	ldr	r2, [pc, #216]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005be4:	f043 0308 	orr.w	r3, r3, #8
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	4b34      	ldr	r3, [pc, #208]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	4931      	ldr	r1, [pc, #196]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	492c      	ldr	r1, [pc, #176]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	e01a      	b.n	8005c48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c12:	4b2a      	ldr	r3, [pc, #168]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a29      	ldr	r2, [pc, #164]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c1e:	f7fc fefb 	bl	8002a18 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c26:	f7fc fef7 	bl	8002a18 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e2dd      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c38:	4b20      	ldr	r3, [pc, #128]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f0      	bne.n	8005c26 <HAL_RCC_OscConfig+0x1da>
 8005c44:	e000      	b.n	8005c48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d074      	beq.n	8005d3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d005      	beq.n	8005c66 <HAL_RCC_OscConfig+0x21a>
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d10e      	bne.n	8005c7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d10b      	bne.n	8005c7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c66:	4b15      	ldr	r3, [pc, #84]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d064      	beq.n	8005d3c <HAL_RCC_OscConfig+0x2f0>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d160      	bne.n	8005d3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e2ba      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c86:	d106      	bne.n	8005c96 <HAL_RCC_OscConfig+0x24a>
 8005c88:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e026      	b.n	8005ce4 <HAL_RCC_OscConfig+0x298>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c9e:	d115      	bne.n	8005ccc <HAL_RCC_OscConfig+0x280>
 8005ca0:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a05      	ldr	r2, [pc, #20]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005ca6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	4b03      	ldr	r3, [pc, #12]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a02      	ldr	r2, [pc, #8]	@ (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e014      	b.n	8005ce4 <HAL_RCC_OscConfig+0x298>
 8005cba:	bf00      	nop
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	0800b364 	.word	0x0800b364
 8005cc4:	20000000 	.word	0x20000000
 8005cc8:	20000018 	.word	0x20000018
 8005ccc:	4ba0      	ldr	r3, [pc, #640]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a9f      	ldr	r2, [pc, #636]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	4b9d      	ldr	r3, [pc, #628]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a9c      	ldr	r2, [pc, #624]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d013      	beq.n	8005d14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fc fe94 	bl	8002a18 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fc fe90 	bl	8002a18 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	@ 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e276      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d06:	4b92      	ldr	r3, [pc, #584]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x2a8>
 8005d12:	e014      	b.n	8005d3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fc fe80 	bl	8002a18 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fc fe7c 	bl	8002a18 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	@ 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e262      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d2e:	4b88      	ldr	r3, [pc, #544]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2d0>
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d060      	beq.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_OscConfig+0x310>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b0c      	cmp	r3, #12
 8005d54:	d119      	bne.n	8005d8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d116      	bne.n	8005d8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d5c:	4b7c      	ldr	r3, [pc, #496]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_OscConfig+0x328>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e23f      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d74:	4b76      	ldr	r3, [pc, #472]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	061b      	lsls	r3, r3, #24
 8005d82:	4973      	ldr	r1, [pc, #460]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d88:	e040      	b.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d023      	beq.n	8005dda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d92:	4b6f      	ldr	r3, [pc, #444]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6e      	ldr	r2, [pc, #440]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9e:	f7fc fe3b 	bl	8002a18 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da6:	f7fc fe37 	bl	8002a18 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e21d      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005db8:	4b65      	ldr	r3, [pc, #404]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0f0      	beq.n	8005da6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc4:	4b62      	ldr	r3, [pc, #392]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	061b      	lsls	r3, r3, #24
 8005dd2:	495f      	ldr	r1, [pc, #380]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	604b      	str	r3, [r1, #4]
 8005dd8:	e018      	b.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dda:	4b5d      	ldr	r3, [pc, #372]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a5c      	ldr	r2, [pc, #368]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fc fe17 	bl	8002a18 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dee:	f7fc fe13 	bl	8002a18 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e1f9      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e00:	4b53      	ldr	r3, [pc, #332]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f0      	bne.n	8005dee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03c      	beq.n	8005e92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01c      	beq.n	8005e5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e20:	4b4b      	ldr	r3, [pc, #300]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e26:	4a4a      	ldr	r2, [pc, #296]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fc fdf2 	bl	8002a18 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e38:	f7fc fdee 	bl	8002a18 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e1d4      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e4a:	4b41      	ldr	r3, [pc, #260]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ef      	beq.n	8005e38 <HAL_RCC_OscConfig+0x3ec>
 8005e58:	e01b      	b.n	8005e92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e60:	4a3b      	ldr	r2, [pc, #236]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6a:	f7fc fdd5 	bl	8002a18 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e72:	f7fc fdd1 	bl	8002a18 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e1b7      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e84:	4b32      	ldr	r3, [pc, #200]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ef      	bne.n	8005e72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 80a6 	beq.w	8005fec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb0:	4b27      	ldr	r3, [pc, #156]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb4:	4a26      	ldr	r2, [pc, #152]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ebc:	4b24      	ldr	r3, [pc, #144]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ecc:	4b21      	ldr	r3, [pc, #132]	@ (8005f54 <HAL_RCC_OscConfig+0x508>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d118      	bne.n	8005f0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f54 <HAL_RCC_OscConfig+0x508>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f54 <HAL_RCC_OscConfig+0x508>)
 8005ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ee4:	f7fc fd98 	bl	8002a18 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eec:	f7fc fd94 	bl	8002a18 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e17a      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005efe:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <HAL_RCC_OscConfig+0x508>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d108      	bne.n	8005f24 <HAL_RCC_OscConfig+0x4d8>
 8005f12:	4b0f      	ldr	r3, [pc, #60]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f18:	4a0d      	ldr	r2, [pc, #52]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f22:	e029      	b.n	8005f78 <HAL_RCC_OscConfig+0x52c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d115      	bne.n	8005f58 <HAL_RCC_OscConfig+0x50c>
 8005f2c:	4b08      	ldr	r3, [pc, #32]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f32:	4a07      	ldr	r2, [pc, #28]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005f34:	f043 0304 	orr.w	r3, r3, #4
 8005f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f3c:	4b04      	ldr	r3, [pc, #16]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f42:	4a03      	ldr	r2, [pc, #12]	@ (8005f50 <HAL_RCC_OscConfig+0x504>)
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f4c:	e014      	b.n	8005f78 <HAL_RCC_OscConfig+0x52c>
 8005f4e:	bf00      	nop
 8005f50:	40021000 	.word	0x40021000
 8005f54:	40007000 	.word	0x40007000
 8005f58:	4b9c      	ldr	r3, [pc, #624]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5e:	4a9b      	ldr	r2, [pc, #620]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f68:	4b98      	ldr	r3, [pc, #608]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6e:	4a97      	ldr	r2, [pc, #604]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005f70:	f023 0304 	bic.w	r3, r3, #4
 8005f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d016      	beq.n	8005fae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f80:	f7fc fd4a 	bl	8002a18 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f86:	e00a      	b.n	8005f9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f88:	f7fc fd46 	bl	8002a18 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e12a      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0ed      	beq.n	8005f88 <HAL_RCC_OscConfig+0x53c>
 8005fac:	e015      	b.n	8005fda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fae:	f7fc fd33 	bl	8002a18 <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb6:	f7fc fd2f 	bl	8002a18 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e113      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fcc:	4b7f      	ldr	r3, [pc, #508]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1ed      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fda:	7ffb      	ldrb	r3, [r7, #31]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d105      	bne.n	8005fec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe4:	4a79      	ldr	r2, [pc, #484]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8005fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80fe 	beq.w	80061f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	f040 80d0 	bne.w	80061a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006000:	4b72      	ldr	r3, [pc, #456]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 0203 	and.w	r2, r3, #3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	429a      	cmp	r2, r3
 8006012:	d130      	bne.n	8006076 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	3b01      	subs	r3, #1
 8006020:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d127      	bne.n	8006076 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006030:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006032:	429a      	cmp	r2, r3
 8006034:	d11f      	bne.n	8006076 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006040:	2a07      	cmp	r2, #7
 8006042:	bf14      	ite	ne
 8006044:	2201      	movne	r2, #1
 8006046:	2200      	moveq	r2, #0
 8006048:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800604a:	4293      	cmp	r3, r2
 800604c:	d113      	bne.n	8006076 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	3b01      	subs	r3, #1
 800605c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d109      	bne.n	8006076 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	3b01      	subs	r3, #1
 8006070:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006072:	429a      	cmp	r2, r3
 8006074:	d06e      	beq.n	8006154 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d069      	beq.n	8006150 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800607c:	4b53      	ldr	r3, [pc, #332]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006088:	4b50      	ldr	r3, [pc, #320]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0ad      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006098:	4b4c      	ldr	r3, [pc, #304]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a4b      	ldr	r2, [pc, #300]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 800609e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060a4:	f7fc fcb8 	bl	8002a18 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ac:	f7fc fcb4 	bl	8002a18 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e09a      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060be:	4b43      	ldr	r3, [pc, #268]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060ca:	4b40      	ldr	r3, [pc, #256]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	4b40      	ldr	r3, [pc, #256]	@ (80061d0 <HAL_RCC_OscConfig+0x784>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060da:	3a01      	subs	r2, #1
 80060dc:	0112      	lsls	r2, r2, #4
 80060de:	4311      	orrs	r1, r2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060e4:	0212      	lsls	r2, r2, #8
 80060e6:	4311      	orrs	r1, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060ec:	0852      	lsrs	r2, r2, #1
 80060ee:	3a01      	subs	r2, #1
 80060f0:	0552      	lsls	r2, r2, #21
 80060f2:	4311      	orrs	r1, r2
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80060f8:	0852      	lsrs	r2, r2, #1
 80060fa:	3a01      	subs	r2, #1
 80060fc:	0652      	lsls	r2, r2, #25
 80060fe:	4311      	orrs	r1, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006104:	0912      	lsrs	r2, r2, #4
 8006106:	0452      	lsls	r2, r2, #17
 8006108:	430a      	orrs	r2, r1
 800610a:	4930      	ldr	r1, [pc, #192]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 800610c:	4313      	orrs	r3, r2
 800610e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006110:	4b2e      	ldr	r3, [pc, #184]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a2d      	ldr	r2, [pc, #180]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800611a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800611c:	4b2b      	ldr	r3, [pc, #172]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4a2a      	ldr	r2, [pc, #168]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006126:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006128:	f7fc fc76 	bl	8002a18 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006130:	f7fc fc72 	bl	8002a18 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e058      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006142:	4b22      	ldr	r3, [pc, #136]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0f0      	beq.n	8006130 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800614e:	e050      	b.n	80061f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e04f      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006154:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d148      	bne.n	80061f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006160:	4b1a      	ldr	r3, [pc, #104]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a19      	ldr	r2, [pc, #100]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800616a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800616c:	4b17      	ldr	r3, [pc, #92]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006176:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006178:	f7fc fc4e 	bl	8002a18 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fc fc4a 	bl	8002a18 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e030      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006192:	4b0e      	ldr	r3, [pc, #56]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x734>
 800619e:	e028      	b.n	80061f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d023      	beq.n	80061ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a6:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a08      	ldr	r2, [pc, #32]	@ (80061cc <HAL_RCC_OscConfig+0x780>)
 80061ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b2:	f7fc fc31 	bl	8002a18 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b8:	e00c      	b.n	80061d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ba:	f7fc fc2d 	bl	8002a18 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d905      	bls.n	80061d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e013      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
 80061cc:	40021000 	.word	0x40021000
 80061d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_OscConfig+0x7b0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1ec      	bne.n	80061ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80061e0:	4b06      	ldr	r3, [pc, #24]	@ (80061fc <HAL_RCC_OscConfig+0x7b0>)
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	4905      	ldr	r1, [pc, #20]	@ (80061fc <HAL_RCC_OscConfig+0x7b0>)
 80061e6:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <HAL_RCC_OscConfig+0x7b4>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	60cb      	str	r3, [r1, #12]
 80061ec:	e001      	b.n	80061f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3720      	adds	r7, #32
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40021000 	.word	0x40021000
 8006200:	feeefffc 	.word	0xfeeefffc

08006204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e0e7      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006218:	4b75      	ldr	r3, [pc, #468]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d910      	bls.n	8006248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006226:	4b72      	ldr	r3, [pc, #456]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f023 0207 	bic.w	r2, r3, #7
 800622e:	4970      	ldr	r1, [pc, #448]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	4313      	orrs	r3, r2
 8006234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006236:	4b6e      	ldr	r3, [pc, #440]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0cf      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d010      	beq.n	8006276 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	4b66      	ldr	r3, [pc, #408]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006260:	429a      	cmp	r2, r3
 8006262:	d908      	bls.n	8006276 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006264:	4b63      	ldr	r3, [pc, #396]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4960      	ldr	r1, [pc, #384]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04c      	beq.n	800631c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b03      	cmp	r3, #3
 8006288:	d107      	bne.n	800629a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800628a:	4b5a      	ldr	r3, [pc, #360]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d121      	bne.n	80062da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0a6      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d107      	bne.n	80062b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062a2:	4b54      	ldr	r3, [pc, #336]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d115      	bne.n	80062da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e09a      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062ba:	4b4e      	ldr	r3, [pc, #312]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e08e      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062ca:	4b4a      	ldr	r3, [pc, #296]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e086      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062da:	4b46      	ldr	r3, [pc, #280]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 0203 	bic.w	r2, r3, #3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4943      	ldr	r1, [pc, #268]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ec:	f7fc fb94 	bl	8002a18 <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f2:	e00a      	b.n	800630a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f4:	f7fc fb90 	bl	8002a18 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e06e      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630a:	4b3a      	ldr	r3, [pc, #232]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 020c 	and.w	r2, r3, #12
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	429a      	cmp	r2, r3
 800631a:	d1eb      	bne.n	80062f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	4b31      	ldr	r3, [pc, #196]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006334:	429a      	cmp	r2, r3
 8006336:	d208      	bcs.n	800634a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006338:	4b2e      	ldr	r3, [pc, #184]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	492b      	ldr	r1, [pc, #172]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800634a:	4b29      	ldr	r3, [pc, #164]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d210      	bcs.n	800637a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006358:	4b25      	ldr	r3, [pc, #148]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f023 0207 	bic.w	r2, r3, #7
 8006360:	4923      	ldr	r1, [pc, #140]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	4313      	orrs	r3, r2
 8006366:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006368:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <HAL_RCC_ClockConfig+0x1ec>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d001      	beq.n	800637a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e036      	b.n	80063e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d008      	beq.n	8006398 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006386:	4b1b      	ldr	r3, [pc, #108]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	4918      	ldr	r1, [pc, #96]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d009      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063a4:	4b13      	ldr	r3, [pc, #76]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4910      	ldr	r1, [pc, #64]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063b8:	f000 f824 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 80063bc:	4602      	mov	r2, r0
 80063be:	4b0d      	ldr	r3, [pc, #52]	@ (80063f4 <HAL_RCC_ClockConfig+0x1f0>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	091b      	lsrs	r3, r3, #4
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	490b      	ldr	r1, [pc, #44]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f4>)
 80063ca:	5ccb      	ldrb	r3, [r1, r3]
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
 80063d4:	4a09      	ldr	r2, [pc, #36]	@ (80063fc <HAL_RCC_ClockConfig+0x1f8>)
 80063d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063d8:	4b09      	ldr	r3, [pc, #36]	@ (8006400 <HAL_RCC_ClockConfig+0x1fc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fc facb 	bl	8002978 <HAL_InitTick>
 80063e2:	4603      	mov	r3, r0
 80063e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80063e6:	7afb      	ldrb	r3, [r7, #11]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40022000 	.word	0x40022000
 80063f4:	40021000 	.word	0x40021000
 80063f8:	0800b364 	.word	0x0800b364
 80063fc:	20000000 	.word	0x20000000
 8006400:	20000018 	.word	0x20000018

08006404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	@ 0x24
 8006408:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006412:	4b3e      	ldr	r3, [pc, #248]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 030c 	and.w	r3, r3, #12
 800641a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800641c:	4b3b      	ldr	r3, [pc, #236]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_RCC_GetSysClockFreq+0x34>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d121      	bne.n	8006476 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d11e      	bne.n	8006476 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006438:	4b34      	ldr	r3, [pc, #208]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d107      	bne.n	8006454 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006444:	4b31      	ldr	r3, [pc, #196]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e005      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006454:	4b2d      	ldr	r3, [pc, #180]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006460:	4a2b      	ldr	r2, [pc, #172]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006468:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006474:	e00a      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d102      	bne.n	8006482 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800647c:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x110>)
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e004      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d101      	bne.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006488:	4b23      	ldr	r3, [pc, #140]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x114>)
 800648a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b0c      	cmp	r3, #12
 8006490:	d134      	bne.n	80064fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006492:	4b1e      	ldr	r3, [pc, #120]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d003      	beq.n	80064aa <HAL_RCC_GetSysClockFreq+0xa6>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d003      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0xac>
 80064a8:	e005      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x110>)
 80064ac:	617b      	str	r3, [r7, #20]
      break;
 80064ae:	e005      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064b0:	4b19      	ldr	r3, [pc, #100]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x114>)
 80064b2:	617b      	str	r3, [r7, #20]
      break;
 80064b4:	e002      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	617b      	str	r3, [r7, #20]
      break;
 80064ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064bc:	4b13      	ldr	r3, [pc, #76]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	3301      	adds	r3, #1
 80064c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064ca:	4b10      	ldr	r3, [pc, #64]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	fb03 f202 	mul.w	r2, r3, r2
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064e2:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <HAL_RCC_GetSysClockFreq+0x108>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	0e5b      	lsrs	r3, r3, #25
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	3301      	adds	r3, #1
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064fc:	69bb      	ldr	r3, [r7, #24]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3724      	adds	r7, #36	@ 0x24
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40021000 	.word	0x40021000
 8006510:	0800b37c 	.word	0x0800b37c
 8006514:	00f42400 	.word	0x00f42400
 8006518:	007a1200 	.word	0x007a1200

0800651c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006520:	4b03      	ldr	r3, [pc, #12]	@ (8006530 <HAL_RCC_GetHCLKFreq+0x14>)
 8006522:	681b      	ldr	r3, [r3, #0]
}
 8006524:	4618      	mov	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000000 	.word	0x20000000

08006534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006538:	f7ff fff0 	bl	800651c <HAL_RCC_GetHCLKFreq>
 800653c:	4602      	mov	r2, r0
 800653e:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	4904      	ldr	r1, [pc, #16]	@ (800655c <HAL_RCC_GetPCLK1Freq+0x28>)
 800654a:	5ccb      	ldrb	r3, [r1, r3]
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006554:	4618      	mov	r0, r3
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40021000 	.word	0x40021000
 800655c:	0800b374 	.word	0x0800b374

08006560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006564:	f7ff ffda 	bl	800651c <HAL_RCC_GetHCLKFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <HAL_RCC_GetPCLK2Freq+0x24>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	0adb      	lsrs	r3, r3, #11
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	4904      	ldr	r1, [pc, #16]	@ (8006588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40021000 	.word	0x40021000
 8006588:	0800b374 	.word	0x0800b374

0800658c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006594:	2300      	movs	r3, #0
 8006596:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006598:	4b2a      	ldr	r3, [pc, #168]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800659a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065a4:	f7ff f922 	bl	80057ec <HAL_PWREx_GetVoltageRange>
 80065a8:	6178      	str	r0, [r7, #20]
 80065aa:	e014      	b.n	80065d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065ac:	4b25      	ldr	r3, [pc, #148]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b0:	4a24      	ldr	r2, [pc, #144]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065b8:	4b22      	ldr	r3, [pc, #136]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065c4:	f7ff f912 	bl	80057ec <HAL_PWREx_GetVoltageRange>
 80065c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065dc:	d10b      	bne.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b80      	cmp	r3, #128	@ 0x80
 80065e2:	d919      	bls.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80065e8:	d902      	bls.n	80065f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065ea:	2302      	movs	r3, #2
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	e013      	b.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065f0:	2301      	movs	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	e010      	b.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b80      	cmp	r3, #128	@ 0x80
 80065fa:	d902      	bls.n	8006602 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80065fc:	2303      	movs	r3, #3
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e00a      	b.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b80      	cmp	r3, #128	@ 0x80
 8006606:	d102      	bne.n	800660e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006608:	2302      	movs	r3, #2
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	e004      	b.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b70      	cmp	r3, #112	@ 0x70
 8006612:	d101      	bne.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006614:	2301      	movs	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006618:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f023 0207 	bic.w	r2, r3, #7
 8006620:	4909      	ldr	r1, [pc, #36]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006628:	4b07      	ldr	r3, [pc, #28]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	429a      	cmp	r2, r3
 8006634:	d001      	beq.n	800663a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40021000 	.word	0x40021000
 8006648:	40022000 	.word	0x40022000

0800664c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006654:	2300      	movs	r3, #0
 8006656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006658:	2300      	movs	r3, #0
 800665a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006664:	2b00      	cmp	r3, #0
 8006666:	d041      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800666c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006670:	d02a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006672:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006676:	d824      	bhi.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006678:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800667c:	d008      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800667e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006682:	d81e      	bhi.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800668c:	d010      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800668e:	e018      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006690:	4b86      	ldr	r3, [pc, #536]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4a85      	ldr	r2, [pc, #532]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800669a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800669c:	e015      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	2100      	movs	r1, #0
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 facb 	bl	8006c40 <RCCEx_PLLSAI1_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066ae:	e00c      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3320      	adds	r3, #32
 80066b4:	2100      	movs	r1, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fbb6 	bl	8006e28 <RCCEx_PLLSAI2_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066c0:	e003      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	74fb      	strb	r3, [r7, #19]
      break;
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80066c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ca:	7cfb      	ldrb	r3, [r7, #19]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066d0:	4b76      	ldr	r3, [pc, #472]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066de:	4973      	ldr	r1, [pc, #460]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80066e6:	e001      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d041      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006700:	d02a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006702:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006706:	d824      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800670c:	d008      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800670e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006712:	d81e      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800671c:	d010      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800671e:	e018      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006720:	4b62      	ldr	r3, [pc, #392]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4a61      	ldr	r2, [pc, #388]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800672a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800672c:	e015      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fa83 	bl	8006c40 <RCCEx_PLLSAI1_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800673e:	e00c      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3320      	adds	r3, #32
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fb6e 	bl	8006e28 <RCCEx_PLLSAI2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006750:	e003      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	74fb      	strb	r3, [r7, #19]
      break;
 8006756:	e000      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006760:	4b52      	ldr	r3, [pc, #328]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006766:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800676e:	494f      	ldr	r1, [pc, #316]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006776:	e001      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	7cfb      	ldrb	r3, [r7, #19]
 800677a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80a0 	beq.w	80068ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800678a:	2300      	movs	r3, #0
 800678c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800678e:	4b47      	ldr	r3, [pc, #284]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00d      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067a4:	4b41      	ldr	r3, [pc, #260]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a8:	4a40      	ldr	r2, [pc, #256]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80067b0:	4b3e      	ldr	r3, [pc, #248]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067bc:	2301      	movs	r3, #1
 80067be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c0:	4b3b      	ldr	r3, [pc, #236]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3a      	ldr	r2, [pc, #232]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067cc:	f7fc f924 	bl	8002a18 <HAL_GetTick>
 80067d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067d2:	e009      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d4:	f7fc f920 	bl	8002a18 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d902      	bls.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	74fb      	strb	r3, [r7, #19]
        break;
 80067e6:	e005      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067e8:	4b31      	ldr	r3, [pc, #196]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0ef      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d15c      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067fa:	4b2c      	ldr	r3, [pc, #176]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006804:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01f      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	429a      	cmp	r2, r3
 8006816:	d019      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006818:	4b24      	ldr	r3, [pc, #144]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006822:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006824:	4b21      	ldr	r3, [pc, #132]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682a:	4a20      	ldr	r2, [pc, #128]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800682c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006834:	4b1d      	ldr	r3, [pc, #116]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683a:	4a1c      	ldr	r2, [pc, #112]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800683c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006844:	4a19      	ldr	r2, [pc, #100]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d016      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fc f8df 	bl	8002a18 <HAL_GetTick>
 800685a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800685c:	e00b      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685e:	f7fc f8db 	bl	8002a18 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686c:	4293      	cmp	r3, r2
 800686e:	d902      	bls.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	74fb      	strb	r3, [r7, #19]
            break;
 8006874:	e006      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ec      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006884:	7cfb      	ldrb	r3, [r7, #19]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10c      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800688a:	4b08      	ldr	r3, [pc, #32]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800688c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006890:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800689a:	4904      	ldr	r1, [pc, #16]	@ (80068ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800689c:	4313      	orrs	r3, r2
 800689e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80068a2:	e009      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
 80068a6:	74bb      	strb	r3, [r7, #18]
 80068a8:	e006      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80068aa:	bf00      	nop
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7cfb      	ldrb	r3, [r7, #19]
 80068b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068b8:	7c7b      	ldrb	r3, [r7, #17]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d105      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068be:	4b9e      	ldr	r3, [pc, #632]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	4a9d      	ldr	r2, [pc, #628]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068d6:	4b98      	ldr	r3, [pc, #608]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068dc:	f023 0203 	bic.w	r2, r3, #3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	4994      	ldr	r1, [pc, #592]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068f8:	4b8f      	ldr	r3, [pc, #572]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fe:	f023 020c 	bic.w	r2, r3, #12
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006906:	498c      	ldr	r1, [pc, #560]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800691a:	4b87      	ldr	r3, [pc, #540]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006920:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	4983      	ldr	r1, [pc, #524]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800693c:	4b7e      	ldr	r3, [pc, #504]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006942:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	497b      	ldr	r1, [pc, #492]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800695e:	4b76      	ldr	r3, [pc, #472]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800696c:	4972      	ldr	r1, [pc, #456]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006980:	4b6d      	ldr	r3, [pc, #436]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006986:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800698e:	496a      	ldr	r1, [pc, #424]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069a2:	4b65      	ldr	r3, [pc, #404]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b0:	4961      	ldr	r1, [pc, #388]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069d2:	4959      	ldr	r1, [pc, #356]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069e6:	4b54      	ldr	r3, [pc, #336]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	4950      	ldr	r1, [pc, #320]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a08:	4b4b      	ldr	r3, [pc, #300]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a16:	4948      	ldr	r1, [pc, #288]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a2a:	4b43      	ldr	r3, [pc, #268]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a38:	493f      	ldr	r1, [pc, #252]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d028      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a5a:	4937      	ldr	r1, [pc, #220]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a6a:	d106      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a6c:	4b32      	ldr	r3, [pc, #200]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4a31      	ldr	r2, [pc, #196]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a76:	60d3      	str	r3, [r2, #12]
 8006a78:	e011      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a82:	d10c      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3304      	adds	r3, #4
 8006a88:	2101      	movs	r1, #1
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f8d8 	bl	8006c40 <RCCEx_PLLSAI1_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006a9a:	7cfb      	ldrb	r3, [r7, #19]
 8006a9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d028      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006aaa:	4b23      	ldr	r3, [pc, #140]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab8:	491f      	ldr	r1, [pc, #124]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ac8:	d106      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aca:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4a1a      	ldr	r2, [pc, #104]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ad4:	60d3      	str	r3, [r2, #12]
 8006ad6:	e011      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006adc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ae0:	d10c      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 f8a9 	bl	8006c40 <RCCEx_PLLSAI1_Config>
 8006aee:	4603      	mov	r3, r0
 8006af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006af2:	7cfb      	ldrb	r3, [r7, #19]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006af8:	7cfb      	ldrb	r3, [r7, #19]
 8006afa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d02b      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b16:	4908      	ldr	r1, [pc, #32]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b26:	d109      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b28:	4b03      	ldr	r3, [pc, #12]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4a02      	ldr	r2, [pc, #8]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b32:	60d3      	str	r3, [r2, #12]
 8006b34:	e014      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f877 	bl	8006c40 <RCCEx_PLLSAI1_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b56:	7cfb      	ldrb	r3, [r7, #19]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006b5c:	7cfb      	ldrb	r3, [r7, #19]
 8006b5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02f      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b72:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b7a:	4928      	ldr	r1, [pc, #160]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b8a:	d10d      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	2102      	movs	r1, #2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f854 	bl	8006c40 <RCCEx_PLLSAI1_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d014      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ba2:	7cfb      	ldrb	r3, [r7, #19]
 8006ba4:	74bb      	strb	r3, [r7, #18]
 8006ba6:	e011      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bb0:	d10c      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3320      	adds	r3, #32
 8006bb6:	2102      	movs	r1, #2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f935 	bl	8006e28 <RCCEx_PLLSAI2_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bc2:	7cfb      	ldrb	r3, [r7, #19]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006bc8:	7cfb      	ldrb	r3, [r7, #19]
 8006bca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bd8:	4b10      	ldr	r3, [pc, #64]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bde:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006be6:	490d      	ldr	r1, [pc, #52]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bfa:	4b08      	ldr	r3, [pc, #32]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c0a:	4904      	ldr	r1, [pc, #16]	@ (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c12:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40021000 	.word	0x40021000

08006c20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006c24:	4b05      	ldr	r3, [pc, #20]	@ (8006c3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a04      	ldr	r2, [pc, #16]	@ (8006c3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c2a:	f043 0304 	orr.w	r3, r3, #4
 8006c2e:	6013      	str	r3, [r2, #0]
}
 8006c30:	bf00      	nop
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40021000 	.word	0x40021000

08006c40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c4e:	4b75      	ldr	r3, [pc, #468]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d018      	beq.n	8006c8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c5a:	4b72      	ldr	r3, [pc, #456]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f003 0203 	and.w	r2, r3, #3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d10d      	bne.n	8006c86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
       ||
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006c72:	4b6c      	ldr	r3, [pc, #432]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	091b      	lsrs	r3, r3, #4
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
       ||
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d047      	beq.n	8006d16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	73fb      	strb	r3, [r7, #15]
 8006c8a:	e044      	b.n	8006d16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d018      	beq.n	8006cc6 <RCCEx_PLLSAI1_Config+0x86>
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d825      	bhi.n	8006ce4 <RCCEx_PLLSAI1_Config+0xa4>
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d002      	beq.n	8006ca2 <RCCEx_PLLSAI1_Config+0x62>
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d009      	beq.n	8006cb4 <RCCEx_PLLSAI1_Config+0x74>
 8006ca0:	e020      	b.n	8006ce4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ca2:	4b60      	ldr	r3, [pc, #384]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d11d      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cb2:	e01a      	b.n	8006cea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d116      	bne.n	8006cee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc4:	e013      	b.n	8006cee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cc6:	4b57      	ldr	r3, [pc, #348]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10f      	bne.n	8006cf2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cd2:	4b54      	ldr	r3, [pc, #336]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ce2:	e006      	b.n	8006cf2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce8:	e004      	b.n	8006cf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006cea:	bf00      	nop
 8006cec:	e002      	b.n	8006cf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006cf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10d      	bne.n	8006d16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6819      	ldr	r1, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	4944      	ldr	r1, [pc, #272]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d17d      	bne.n	8006e18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d1c:	4b41      	ldr	r3, [pc, #260]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a40      	ldr	r2, [pc, #256]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d28:	f7fb fe76 	bl	8002a18 <HAL_GetTick>
 8006d2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d2e:	e009      	b.n	8006d44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d30:	f7fb fe72 	bl	8002a18 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d902      	bls.n	8006d44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	73fb      	strb	r3, [r7, #15]
        break;
 8006d42:	e005      	b.n	8006d50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d44:	4b37      	ldr	r3, [pc, #220]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ef      	bne.n	8006d30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d160      	bne.n	8006e18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d111      	bne.n	8006d80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d5c:	4b31      	ldr	r3, [pc, #196]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6892      	ldr	r2, [r2, #8]
 8006d6c:	0211      	lsls	r1, r2, #8
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68d2      	ldr	r2, [r2, #12]
 8006d72:	0912      	lsrs	r2, r2, #4
 8006d74:	0452      	lsls	r2, r2, #17
 8006d76:	430a      	orrs	r2, r1
 8006d78:	492a      	ldr	r1, [pc, #168]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]
 8006d7e:	e027      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d112      	bne.n	8006dac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d86:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006d8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6892      	ldr	r2, [r2, #8]
 8006d96:	0211      	lsls	r1, r2, #8
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6912      	ldr	r2, [r2, #16]
 8006d9c:	0852      	lsrs	r2, r2, #1
 8006d9e:	3a01      	subs	r2, #1
 8006da0:	0552      	lsls	r2, r2, #21
 8006da2:	430a      	orrs	r2, r1
 8006da4:	491f      	ldr	r1, [pc, #124]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	610b      	str	r3, [r1, #16]
 8006daa:	e011      	b.n	8006dd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dac:	4b1d      	ldr	r3, [pc, #116]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006db4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6892      	ldr	r2, [r2, #8]
 8006dbc:	0211      	lsls	r1, r2, #8
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6952      	ldr	r2, [r2, #20]
 8006dc2:	0852      	lsrs	r2, r2, #1
 8006dc4:	3a01      	subs	r2, #1
 8006dc6:	0652      	lsls	r2, r2, #25
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	4916      	ldr	r1, [pc, #88]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006dd0:	4b14      	ldr	r3, [pc, #80]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a13      	ldr	r2, [pc, #76]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ddc:	f7fb fe1c 	bl	8002a18 <HAL_GetTick>
 8006de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006de2:	e009      	b.n	8006df8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006de4:	f7fb fe18 	bl	8002a18 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d902      	bls.n	8006df8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	73fb      	strb	r3, [r7, #15]
          break;
 8006df6:	e005      	b.n	8006e04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006df8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0ef      	beq.n	8006de4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e0a:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	4904      	ldr	r1, [pc, #16]	@ (8006e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000

08006e28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e36:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d018      	beq.n	8006e74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e42:	4b67      	ldr	r3, [pc, #412]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f003 0203 	and.w	r2, r3, #3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d10d      	bne.n	8006e6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
       ||
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006e5a:	4b61      	ldr	r3, [pc, #388]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
       ||
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d047      	beq.n	8006efe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	73fb      	strb	r3, [r7, #15]
 8006e72:	e044      	b.n	8006efe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d018      	beq.n	8006eae <RCCEx_PLLSAI2_Config+0x86>
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d825      	bhi.n	8006ecc <RCCEx_PLLSAI2_Config+0xa4>
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d002      	beq.n	8006e8a <RCCEx_PLLSAI2_Config+0x62>
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d009      	beq.n	8006e9c <RCCEx_PLLSAI2_Config+0x74>
 8006e88:	e020      	b.n	8006ecc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e8a:	4b55      	ldr	r3, [pc, #340]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d11d      	bne.n	8006ed2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e9a:	e01a      	b.n	8006ed2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e9c:	4b50      	ldr	r3, [pc, #320]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d116      	bne.n	8006ed6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006eac:	e013      	b.n	8006ed6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006eae:	4b4c      	ldr	r3, [pc, #304]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10f      	bne.n	8006eda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006eba:	4b49      	ldr	r3, [pc, #292]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006eca:	e006      	b.n	8006eda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e004      	b.n	8006edc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e002      	b.n	8006edc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006eda:	bf00      	nop
    }

    if(status == HAL_OK)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	4939      	ldr	r1, [pc, #228]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d167      	bne.n	8006fd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f04:	4b36      	ldr	r3, [pc, #216]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a35      	ldr	r2, [pc, #212]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f10:	f7fb fd82 	bl	8002a18 <HAL_GetTick>
 8006f14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f16:	e009      	b.n	8006f2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f18:	f7fb fd7e 	bl	8002a18 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d902      	bls.n	8006f2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	73fb      	strb	r3, [r7, #15]
        break;
 8006f2a:	e005      	b.n	8006f38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ef      	bne.n	8006f18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d14a      	bne.n	8006fd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d111      	bne.n	8006f68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f44:	4b26      	ldr	r3, [pc, #152]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6892      	ldr	r2, [r2, #8]
 8006f54:	0211      	lsls	r1, r2, #8
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68d2      	ldr	r2, [r2, #12]
 8006f5a:	0912      	lsrs	r2, r2, #4
 8006f5c:	0452      	lsls	r2, r2, #17
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	491f      	ldr	r1, [pc, #124]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	614b      	str	r3, [r1, #20]
 8006f66:	e011      	b.n	8006f8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f68:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006f70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6892      	ldr	r2, [r2, #8]
 8006f78:	0211      	lsls	r1, r2, #8
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6912      	ldr	r2, [r2, #16]
 8006f7e:	0852      	lsrs	r2, r2, #1
 8006f80:	3a01      	subs	r2, #1
 8006f82:	0652      	lsls	r2, r2, #25
 8006f84:	430a      	orrs	r2, r1
 8006f86:	4916      	ldr	r1, [pc, #88]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006f8c:	4b14      	ldr	r3, [pc, #80]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a13      	ldr	r2, [pc, #76]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f98:	f7fb fd3e 	bl	8002a18 <HAL_GetTick>
 8006f9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f9e:	e009      	b.n	8006fb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fa0:	f7fb fd3a 	bl	8002a18 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d902      	bls.n	8006fb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	73fb      	strb	r3, [r7, #15]
          break;
 8006fb2:	e005      	b.n	8006fc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0ef      	beq.n	8006fa0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006fc6:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	4904      	ldr	r1, [pc, #16]	@ (8006fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000

08006fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e095      	b.n	8007122 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d108      	bne.n	8007010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007006:	d009      	beq.n	800701c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	61da      	str	r2, [r3, #28]
 800700e:	e005      	b.n	800701c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7fa ff4c 	bl	8001ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007052:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800705c:	d902      	bls.n	8007064 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e002      	b.n	800706a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007068:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007072:	d007      	beq.n	8007084 <HAL_SPI_Init+0xa0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800707c:	d002      	beq.n	8007084 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c6:	ea42 0103 	orr.w	r1, r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	0c1b      	lsrs	r3, r3, #16
 80070e0:	f003 0204 	and.w	r2, r3, #4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007100:	ea42 0103 	orr.w	r1, r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e049      	b.n	80071d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fa ff03 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	4619      	mov	r1, r3
 8007168:	4610      	mov	r0, r2
 800716a:	f000 f9d5 	bl	8007518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d001      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e04f      	b.n	8007290 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a23      	ldr	r2, [pc, #140]	@ (800729c <HAL_TIM_Base_Start_IT+0xc4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01d      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x76>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721a:	d018      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x76>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1f      	ldr	r2, [pc, #124]	@ (80072a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x76>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1e      	ldr	r2, [pc, #120]	@ (80072a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x76>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1c      	ldr	r2, [pc, #112]	@ (80072a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x76>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1b      	ldr	r2, [pc, #108]	@ (80072ac <HAL_TIM_Base_Start_IT+0xd4>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <HAL_TIM_Base_Start_IT+0x76>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a19      	ldr	r2, [pc, #100]	@ (80072b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d115      	bne.n	800727a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	4b17      	ldr	r3, [pc, #92]	@ (80072b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007256:	4013      	ands	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b06      	cmp	r3, #6
 800725e:	d015      	beq.n	800728c <HAL_TIM_Base_Start_IT+0xb4>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007266:	d011      	beq.n	800728c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	e008      	b.n	800728c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	e000      	b.n	800728e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40013400 	.word	0x40013400
 80072b0:	40014000 	.word	0x40014000
 80072b4:	00010007 	.word	0x00010007

080072b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0202 	mvn.w	r2, #2
 80072ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f8e9 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f8db 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f8ec 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d020      	beq.n	8007368 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01b      	beq.n	8007368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0204 	mvn.w	r2, #4
 8007338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8c3 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 8007354:	e005      	b.n	8007362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f8b5 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8c6 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d020      	beq.n	80073b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0208 	mvn.w	r2, #8
 8007384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f89d 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 80073a0:	e005      	b.n	80073ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f88f 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8a0 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d020      	beq.n	8007400 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01b      	beq.n	8007400 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0210 	mvn.w	r2, #16
 80073d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2208      	movs	r2, #8
 80073d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f877 	bl	80074da <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f869 	bl	80074c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f87a 	bl	80074ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00c      	beq.n	8007424 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0201 	mvn.w	r2, #1
 800741c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7f9 fe62 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00c      	beq.n	8007452 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800744a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f99b 	bl	8007788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00c      	beq.n	8007476 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800746e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f993 	bl	800779c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00c      	beq.n	800749a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f834 	bl	8007502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00c      	beq.n	80074be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f06f 0220 	mvn.w	r2, #32
 80074b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f95b 	bl	8007774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a46      	ldr	r2, [pc, #280]	@ (8007644 <TIM_Base_SetConfig+0x12c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007536:	d00f      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a43      	ldr	r2, [pc, #268]	@ (8007648 <TIM_Base_SetConfig+0x130>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00b      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a42      	ldr	r2, [pc, #264]	@ (800764c <TIM_Base_SetConfig+0x134>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d007      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a41      	ldr	r2, [pc, #260]	@ (8007650 <TIM_Base_SetConfig+0x138>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a40      	ldr	r2, [pc, #256]	@ (8007654 <TIM_Base_SetConfig+0x13c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d108      	bne.n	800756a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a35      	ldr	r2, [pc, #212]	@ (8007644 <TIM_Base_SetConfig+0x12c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d01f      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007578:	d01b      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a32      	ldr	r2, [pc, #200]	@ (8007648 <TIM_Base_SetConfig+0x130>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d017      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a31      	ldr	r2, [pc, #196]	@ (800764c <TIM_Base_SetConfig+0x134>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a30      	ldr	r2, [pc, #192]	@ (8007650 <TIM_Base_SetConfig+0x138>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00f      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a2f      	ldr	r2, [pc, #188]	@ (8007654 <TIM_Base_SetConfig+0x13c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00b      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2e      	ldr	r2, [pc, #184]	@ (8007658 <TIM_Base_SetConfig+0x140>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d007      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2d      	ldr	r2, [pc, #180]	@ (800765c <TIM_Base_SetConfig+0x144>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d003      	beq.n	80075b2 <TIM_Base_SetConfig+0x9a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007660 <TIM_Base_SetConfig+0x148>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d108      	bne.n	80075c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a16      	ldr	r2, [pc, #88]	@ (8007644 <TIM_Base_SetConfig+0x12c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00f      	beq.n	8007610 <TIM_Base_SetConfig+0xf8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a18      	ldr	r2, [pc, #96]	@ (8007654 <TIM_Base_SetConfig+0x13c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_Base_SetConfig+0xf8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a17      	ldr	r2, [pc, #92]	@ (8007658 <TIM_Base_SetConfig+0x140>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_Base_SetConfig+0xf8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a16      	ldr	r2, [pc, #88]	@ (800765c <TIM_Base_SetConfig+0x144>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0xf8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a15      	ldr	r2, [pc, #84]	@ (8007660 <TIM_Base_SetConfig+0x148>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d103      	bne.n	8007618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b01      	cmp	r3, #1
 8007628:	d105      	bne.n	8007636 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f023 0201 	bic.w	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	611a      	str	r2, [r3, #16]
  }
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40013400 	.word	0x40013400
 8007658:	40014000 	.word	0x40014000
 800765c:	40014400 	.word	0x40014400
 8007660:	40014800 	.word	0x40014800

08007664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007678:	2302      	movs	r3, #2
 800767a:	e068      	b.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a2e      	ldr	r2, [pc, #184]	@ (800775c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d004      	beq.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d108      	bne.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80076b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1e      	ldr	r2, [pc, #120]	@ (800775c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ee:	d018      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a18      	ldr	r2, [pc, #96]	@ (800776c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a13      	ldr	r2, [pc, #76]	@ (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a14      	ldr	r2, [pc, #80]	@ (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d10c      	bne.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4313      	orrs	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40013400 	.word	0x40013400
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40014000 	.word	0x40014000

08007774 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e040      	b.n	8007844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fa fbe8 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2224      	movs	r2, #36	@ 0x24
 80077dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0201 	bic.w	r2, r2, #1
 80077ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fb6a 	bl	8007ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f8af 	bl	8007960 <UART_SetConfig>
 8007802:	4603      	mov	r3, r0
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e01b      	b.n	8007844 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800781a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800782a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fbe9 	bl	8008014 <UART_CheckIdleState>
 8007842:	4603      	mov	r3, r0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	@ 0x28
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	4613      	mov	r3, r2
 800785a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007860:	2b20      	cmp	r3, #32
 8007862:	d177      	bne.n	8007954 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_UART_Transmit+0x24>
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e070      	b.n	8007956 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2221      	movs	r2, #33	@ 0x21
 8007880:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007882:	f7fb f8c9 	bl	8002a18 <HAL_GetTick>
 8007886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078a0:	d108      	bne.n	80078b4 <HAL_UART_Transmit+0x68>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	61bb      	str	r3, [r7, #24]
 80078b2:	e003      	b.n	80078bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078bc:	e02f      	b.n	800791e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2200      	movs	r2, #0
 80078c6:	2180      	movs	r1, #128	@ 0x80
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fc4b 	bl	8008164 <UART_WaitOnFlagUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2220      	movs	r2, #32
 80078d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e03b      	b.n	8007956 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10b      	bne.n	80078fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	881a      	ldrh	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f0:	b292      	uxth	r2, r2
 80078f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	3302      	adds	r3, #2
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	e007      	b.n	800790c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	3301      	adds	r3, #1
 800790a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1c9      	bne.n	80078be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	2140      	movs	r1, #64	@ 0x40
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fc15 	bl	8008164 <UART_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e005      	b.n	8007956 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	e000      	b.n	8007956 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007954:	2302      	movs	r3, #2
  }
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007964:	b08a      	sub	sp, #40	@ 0x28
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	431a      	orrs	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	431a      	orrs	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	4313      	orrs	r3, r2
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	4ba4      	ldr	r3, [pc, #656]	@ (8007c20 <UART_SetConfig+0x2c0>)
 8007990:	4013      	ands	r3, r2
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007998:	430b      	orrs	r3, r1
 800799a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a99      	ldr	r2, [pc, #612]	@ (8007c24 <UART_SetConfig+0x2c4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d004      	beq.n	80079cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079c8:	4313      	orrs	r3, r2
 80079ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a90      	ldr	r2, [pc, #576]	@ (8007c28 <UART_SetConfig+0x2c8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d126      	bne.n	8007a38 <UART_SetConfig+0xd8>
 80079ea:	4b90      	ldr	r3, [pc, #576]	@ (8007c2c <UART_SetConfig+0x2cc>)
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d81b      	bhi.n	8007a30 <UART_SetConfig+0xd0>
 80079f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0xa0>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a11 	.word	0x08007a11
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a19 	.word	0x08007a19
 8007a0c:	08007a29 	.word	0x08007a29
 8007a10:	2301      	movs	r3, #1
 8007a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a16:	e116      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a1e:	e112      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007a20:	2304      	movs	r3, #4
 8007a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a26:	e10e      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a2e:	e10a      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007a30:	2310      	movs	r3, #16
 8007a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a36:	e106      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a7c      	ldr	r2, [pc, #496]	@ (8007c30 <UART_SetConfig+0x2d0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d138      	bne.n	8007ab4 <UART_SetConfig+0x154>
 8007a42:	4b7a      	ldr	r3, [pc, #488]	@ (8007c2c <UART_SetConfig+0x2cc>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a48:	f003 030c 	and.w	r3, r3, #12
 8007a4c:	2b0c      	cmp	r3, #12
 8007a4e:	d82d      	bhi.n	8007aac <UART_SetConfig+0x14c>
 8007a50:	a201      	add	r2, pc, #4	@ (adr r2, 8007a58 <UART_SetConfig+0xf8>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a8d 	.word	0x08007a8d
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007a9d 	.word	0x08007a9d
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a92:	e0d8      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007a94:	2302      	movs	r3, #2
 8007a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a9a:	e0d4      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa2:	e0d0      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aaa:	e0cc      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab2:	e0c8      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8007c34 <UART_SetConfig+0x2d4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d125      	bne.n	8007b0a <UART_SetConfig+0x1aa>
 8007abe:	4b5b      	ldr	r3, [pc, #364]	@ (8007c2c <UART_SetConfig+0x2cc>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ac8:	2b30      	cmp	r3, #48	@ 0x30
 8007aca:	d016      	beq.n	8007afa <UART_SetConfig+0x19a>
 8007acc:	2b30      	cmp	r3, #48	@ 0x30
 8007ace:	d818      	bhi.n	8007b02 <UART_SetConfig+0x1a2>
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d00a      	beq.n	8007aea <UART_SetConfig+0x18a>
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d814      	bhi.n	8007b02 <UART_SetConfig+0x1a2>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <UART_SetConfig+0x182>
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d008      	beq.n	8007af2 <UART_SetConfig+0x192>
 8007ae0:	e00f      	b.n	8007b02 <UART_SetConfig+0x1a2>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ae8:	e0ad      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007aea:	2302      	movs	r3, #2
 8007aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af0:	e0a9      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007af2:	2304      	movs	r3, #4
 8007af4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af8:	e0a5      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007afa:	2308      	movs	r3, #8
 8007afc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b00:	e0a1      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007b02:	2310      	movs	r3, #16
 8007b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b08:	e09d      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4a      	ldr	r2, [pc, #296]	@ (8007c38 <UART_SetConfig+0x2d8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d125      	bne.n	8007b60 <UART_SetConfig+0x200>
 8007b14:	4b45      	ldr	r3, [pc, #276]	@ (8007c2c <UART_SetConfig+0x2cc>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b20:	d016      	beq.n	8007b50 <UART_SetConfig+0x1f0>
 8007b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b24:	d818      	bhi.n	8007b58 <UART_SetConfig+0x1f8>
 8007b26:	2b80      	cmp	r3, #128	@ 0x80
 8007b28:	d00a      	beq.n	8007b40 <UART_SetConfig+0x1e0>
 8007b2a:	2b80      	cmp	r3, #128	@ 0x80
 8007b2c:	d814      	bhi.n	8007b58 <UART_SetConfig+0x1f8>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <UART_SetConfig+0x1d8>
 8007b32:	2b40      	cmp	r3, #64	@ 0x40
 8007b34:	d008      	beq.n	8007b48 <UART_SetConfig+0x1e8>
 8007b36:	e00f      	b.n	8007b58 <UART_SetConfig+0x1f8>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b3e:	e082      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b46:	e07e      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b4e:	e07a      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b56:	e076      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5e:	e072      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a35      	ldr	r2, [pc, #212]	@ (8007c3c <UART_SetConfig+0x2dc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d12a      	bne.n	8007bc0 <UART_SetConfig+0x260>
 8007b6a:	4b30      	ldr	r3, [pc, #192]	@ (8007c2c <UART_SetConfig+0x2cc>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b78:	d01a      	beq.n	8007bb0 <UART_SetConfig+0x250>
 8007b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b7e:	d81b      	bhi.n	8007bb8 <UART_SetConfig+0x258>
 8007b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b84:	d00c      	beq.n	8007ba0 <UART_SetConfig+0x240>
 8007b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b8a:	d815      	bhi.n	8007bb8 <UART_SetConfig+0x258>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <UART_SetConfig+0x238>
 8007b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b94:	d008      	beq.n	8007ba8 <UART_SetConfig+0x248>
 8007b96:	e00f      	b.n	8007bb8 <UART_SetConfig+0x258>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b9e:	e052      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ba6:	e04e      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007ba8:	2304      	movs	r3, #4
 8007baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bae:	e04a      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bb6:	e046      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007bb8:	2310      	movs	r3, #16
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bbe:	e042      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a17      	ldr	r2, [pc, #92]	@ (8007c24 <UART_SetConfig+0x2c4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d13a      	bne.n	8007c40 <UART_SetConfig+0x2e0>
 8007bca:	4b18      	ldr	r3, [pc, #96]	@ (8007c2c <UART_SetConfig+0x2cc>)
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bd8:	d01a      	beq.n	8007c10 <UART_SetConfig+0x2b0>
 8007bda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bde:	d81b      	bhi.n	8007c18 <UART_SetConfig+0x2b8>
 8007be0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be4:	d00c      	beq.n	8007c00 <UART_SetConfig+0x2a0>
 8007be6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bea:	d815      	bhi.n	8007c18 <UART_SetConfig+0x2b8>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <UART_SetConfig+0x298>
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf4:	d008      	beq.n	8007c08 <UART_SetConfig+0x2a8>
 8007bf6:	e00f      	b.n	8007c18 <UART_SetConfig+0x2b8>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bfe:	e022      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007c00:	2302      	movs	r3, #2
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c06:	e01e      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007c08:	2304      	movs	r3, #4
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c0e:	e01a      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007c10:	2308      	movs	r3, #8
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c16:	e016      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007c18:	2310      	movs	r3, #16
 8007c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c1e:	e012      	b.n	8007c46 <UART_SetConfig+0x2e6>
 8007c20:	efff69f3 	.word	0xefff69f3
 8007c24:	40008000 	.word	0x40008000
 8007c28:	40013800 	.word	0x40013800
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	40004400 	.word	0x40004400
 8007c34:	40004800 	.word	0x40004800
 8007c38:	40004c00 	.word	0x40004c00
 8007c3c:	40005000 	.word	0x40005000
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a9f      	ldr	r2, [pc, #636]	@ (8007ec8 <UART_SetConfig+0x568>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d17a      	bne.n	8007d46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d824      	bhi.n	8007ca2 <UART_SetConfig+0x342>
 8007c58:	a201      	add	r2, pc, #4	@ (adr r2, 8007c60 <UART_SetConfig+0x300>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007c85 	.word	0x08007c85
 8007c64:	08007ca3 	.word	0x08007ca3
 8007c68:	08007c8d 	.word	0x08007c8d
 8007c6c:	08007ca3 	.word	0x08007ca3
 8007c70:	08007c93 	.word	0x08007c93
 8007c74:	08007ca3 	.word	0x08007ca3
 8007c78:	08007ca3 	.word	0x08007ca3
 8007c7c:	08007ca3 	.word	0x08007ca3
 8007c80:	08007c9b 	.word	0x08007c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c84:	f7fe fc56 	bl	8006534 <HAL_RCC_GetPCLK1Freq>
 8007c88:	61f8      	str	r0, [r7, #28]
        break;
 8007c8a:	e010      	b.n	8007cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c8c:	4b8f      	ldr	r3, [pc, #572]	@ (8007ecc <UART_SetConfig+0x56c>)
 8007c8e:	61fb      	str	r3, [r7, #28]
        break;
 8007c90:	e00d      	b.n	8007cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c92:	f7fe fbb7 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 8007c96:	61f8      	str	r0, [r7, #28]
        break;
 8007c98:	e009      	b.n	8007cae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c9e:	61fb      	str	r3, [r7, #28]
        break;
 8007ca0:	e005      	b.n	8007cae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007cac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 80fb 	beq.w	8007eac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	4413      	add	r3, r2
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d305      	bcc.n	8007cd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d903      	bls.n	8007cda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007cd8:	e0e8      	b.n	8007eac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	461c      	mov	r4, r3
 8007ce0:	4615      	mov	r5, r2
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	f04f 0300 	mov.w	r3, #0
 8007cea:	022b      	lsls	r3, r5, #8
 8007cec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007cf0:	0222      	lsls	r2, r4, #8
 8007cf2:	68f9      	ldr	r1, [r7, #12]
 8007cf4:	6849      	ldr	r1, [r1, #4]
 8007cf6:	0849      	lsrs	r1, r1, #1
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	4681      	mov	r9, r0
 8007cfe:	eb12 0a08 	adds.w	sl, r2, r8
 8007d02:	eb43 0b09 	adc.w	fp, r3, r9
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d14:	4650      	mov	r0, sl
 8007d16:	4659      	mov	r1, fp
 8007d18:	f7f8 ff66 	bl	8000be8 <__aeabi_uldivmod>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4613      	mov	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d2a:	d308      	bcc.n	8007d3e <UART_SetConfig+0x3de>
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d32:	d204      	bcs.n	8007d3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	60da      	str	r2, [r3, #12]
 8007d3c:	e0b6      	b.n	8007eac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d44:	e0b2      	b.n	8007eac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d4e:	d15e      	bne.n	8007e0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d828      	bhi.n	8007daa <UART_SetConfig+0x44a>
 8007d58:	a201      	add	r2, pc, #4	@ (adr r2, 8007d60 <UART_SetConfig+0x400>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007d85 	.word	0x08007d85
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007d95 	.word	0x08007d95
 8007d6c:	08007dab 	.word	0x08007dab
 8007d70:	08007d9b 	.word	0x08007d9b
 8007d74:	08007dab 	.word	0x08007dab
 8007d78:	08007dab 	.word	0x08007dab
 8007d7c:	08007dab 	.word	0x08007dab
 8007d80:	08007da3 	.word	0x08007da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d84:	f7fe fbd6 	bl	8006534 <HAL_RCC_GetPCLK1Freq>
 8007d88:	61f8      	str	r0, [r7, #28]
        break;
 8007d8a:	e014      	b.n	8007db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d8c:	f7fe fbe8 	bl	8006560 <HAL_RCC_GetPCLK2Freq>
 8007d90:	61f8      	str	r0, [r7, #28]
        break;
 8007d92:	e010      	b.n	8007db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d94:	4b4d      	ldr	r3, [pc, #308]	@ (8007ecc <UART_SetConfig+0x56c>)
 8007d96:	61fb      	str	r3, [r7, #28]
        break;
 8007d98:	e00d      	b.n	8007db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d9a:	f7fe fb33 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 8007d9e:	61f8      	str	r0, [r7, #28]
        break;
 8007da0:	e009      	b.n	8007db6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da6:	61fb      	str	r3, [r7, #28]
        break;
 8007da8:	e005      	b.n	8007db6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d077      	beq.n	8007eac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	005a      	lsls	r2, r3, #1
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	441a      	add	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b0f      	cmp	r3, #15
 8007dd6:	d916      	bls.n	8007e06 <UART_SetConfig+0x4a6>
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dde:	d212      	bcs.n	8007e06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f023 030f 	bic.w	r3, r3, #15
 8007de8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	8afb      	ldrh	r3, [r7, #22]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	8afa      	ldrh	r2, [r7, #22]
 8007e02:	60da      	str	r2, [r3, #12]
 8007e04:	e052      	b.n	8007eac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e0c:	e04e      	b.n	8007eac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d827      	bhi.n	8007e66 <UART_SetConfig+0x506>
 8007e16:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <UART_SetConfig+0x4bc>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e49 	.word	0x08007e49
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e67 	.word	0x08007e67
 8007e2c:	08007e57 	.word	0x08007e57
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e67 	.word	0x08007e67
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	08007e5f 	.word	0x08007e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e40:	f7fe fb78 	bl	8006534 <HAL_RCC_GetPCLK1Freq>
 8007e44:	61f8      	str	r0, [r7, #28]
        break;
 8007e46:	e014      	b.n	8007e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e48:	f7fe fb8a 	bl	8006560 <HAL_RCC_GetPCLK2Freq>
 8007e4c:	61f8      	str	r0, [r7, #28]
        break;
 8007e4e:	e010      	b.n	8007e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e50:	4b1e      	ldr	r3, [pc, #120]	@ (8007ecc <UART_SetConfig+0x56c>)
 8007e52:	61fb      	str	r3, [r7, #28]
        break;
 8007e54:	e00d      	b.n	8007e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fe fad5 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 8007e5a:	61f8      	str	r0, [r7, #28]
        break;
 8007e5c:	e009      	b.n	8007e72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e62:	61fb      	str	r3, [r7, #28]
        break;
 8007e64:	e005      	b.n	8007e72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e70:	bf00      	nop
    }

    if (pclk != 0U)
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d019      	beq.n	8007eac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	085a      	lsrs	r2, r3, #1
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	d909      	bls.n	8007ea6 <UART_SetConfig+0x546>
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e98:	d205      	bcs.n	8007ea6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60da      	str	r2, [r3, #12]
 8007ea4:	e002      	b.n	8007eac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007eb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3728      	adds	r7, #40	@ 0x28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40008000 	.word	0x40008000
 8007ecc:	00f42400 	.word	0x00f42400

08007ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01a      	beq.n	8007fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fce:	d10a      	bne.n	8007fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	605a      	str	r2, [r3, #4]
  }
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b098      	sub	sp, #96	@ 0x60
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008024:	f7fa fcf8 	bl	8002a18 <HAL_GetTick>
 8008028:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b08      	cmp	r3, #8
 8008036:	d12e      	bne.n	8008096 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008038:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008040:	2200      	movs	r2, #0
 8008042:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f88c 	bl	8008164 <UART_WaitOnFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d021      	beq.n	8008096 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008066:	653b      	str	r3, [r7, #80]	@ 0x50
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008070:	647b      	str	r3, [r7, #68]	@ 0x44
 8008072:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800807e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e062      	b.n	800815c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d149      	bne.n	8008138 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ac:	2200      	movs	r2, #0
 80080ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f856 	bl	8008164 <UART_WaitOnFlagUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d03c      	beq.n	8008138 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	623b      	str	r3, [r7, #32]
   return(result);
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80080de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e6      	bne.n	80080be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0301 	bic.w	r3, r3, #1
 8008106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3308      	adds	r3, #8
 800810e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008110:	61fa      	str	r2, [r7, #28]
 8008112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	69b9      	ldr	r1, [r7, #24]
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	617b      	str	r3, [r7, #20]
   return(result);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2220      	movs	r2, #32
 8008128:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e011      	b.n	800815c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3758      	adds	r7, #88	@ 0x58
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	4613      	mov	r3, r2
 8008172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008174:	e04f      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800817c:	d04b      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817e:	f7fa fc4b 	bl	8002a18 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	429a      	cmp	r2, r3
 800818c:	d302      	bcc.n	8008194 <UART_WaitOnFlagUntilTimeout+0x30>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e04e      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d037      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b80      	cmp	r3, #128	@ 0x80
 80081aa:	d034      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b40      	cmp	r3, #64	@ 0x40
 80081b0:	d031      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d110      	bne.n	80081e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f838 	bl	800823e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e029      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f0:	d111      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f81e 	bl	800823e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e00f      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4013      	ands	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d0a0      	beq.n	8008176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800823e:	b480      	push	{r7}
 8008240:	b095      	sub	sp, #84	@ 0x54
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800825a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008264:	643b      	str	r3, [r7, #64]	@ 0x40
 8008266:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800826a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800826c:	e841 2300 	strex	r3, r2, [r1]
 8008270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e6      	bne.n	8008246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3308      	adds	r3, #8
 800827e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	61fb      	str	r3, [r7, #28]
   return(result);
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800829a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800829e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e5      	bne.n	8008278 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d118      	bne.n	80082e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f023 0310 	bic.w	r3, r3, #16
 80082c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d2:	61bb      	str	r3, [r7, #24]
 80082d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6979      	ldr	r1, [r7, #20]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	613b      	str	r3, [r7, #16]
   return(result);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e6      	bne.n	80082b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80082fa:	bf00      	nop
 80082fc:	3754      	adds	r7, #84	@ 0x54
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008306:	b084      	sub	sp, #16
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	f107 001c 	add.w	r0, r7, #28
 8008314:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fa69 	bl	80087fc <USB_CoreReset>
 800832a:	4603      	mov	r3, r0
 800832c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800832e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	639a      	str	r2, [r3, #56]	@ 0x38
 8008342:	e005      	b.n	8008350 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800835c:	b004      	add	sp, #16
 800835e:	4770      	bx	lr

08008360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f023 0201 	bic.w	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d115      	bne.n	80083d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083b0:	200a      	movs	r0, #10
 80083b2:	f7fa fb3d 	bl	8002a30 <HAL_Delay>
      ms += 10U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	330a      	adds	r3, #10
 80083ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fa0f 	bl	80087e0 <USB_GetMode>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d01e      	beq.n	8008406 <USB_SetCurrentMode+0x84>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80083cc:	d9f0      	bls.n	80083b0 <USB_SetCurrentMode+0x2e>
 80083ce:	e01a      	b.n	8008406 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d115      	bne.n	8008402 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083e2:	200a      	movs	r0, #10
 80083e4:	f7fa fb24 	bl	8002a30 <HAL_Delay>
      ms += 10U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	330a      	adds	r3, #10
 80083ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9f6 	bl	80087e0 <USB_GetMode>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <USB_SetCurrentMode+0x84>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80083fe:	d9f0      	bls.n	80083e2 <USB_SetCurrentMode+0x60>
 8008400:	e001      	b.n	8008406 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e005      	b.n	8008412 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2bc8      	cmp	r3, #200	@ 0xc8
 800840a:	d101      	bne.n	8008410 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800841c:	b084      	sub	sp, #16
 800841e:	b580      	push	{r7, lr}
 8008420:	b086      	sub	sp, #24
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800842a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	e009      	b.n	8008450 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	3340      	adds	r3, #64	@ 0x40
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	2200      	movs	r2, #0
 8008448:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3301      	adds	r3, #1
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b0e      	cmp	r3, #14
 8008454:	d9f2      	bls.n	800843c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008456:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800845a:	2b00      	cmp	r3, #0
 800845c:	d11c      	bne.n	8008498 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008476:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	e005      	b.n	80084a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800849c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084aa:	461a      	mov	r2, r3
 80084ac:	2300      	movs	r3, #0
 80084ae:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084b0:	2103      	movs	r1, #3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f95a 	bl	800876c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084b8:	2110      	movs	r1, #16
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f8f6 	bl	80086ac <USB_FlushTxFifo>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f920 	bl	8008710 <USB_FlushRxFifo>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084e0:	461a      	mov	r2, r3
 80084e2:	2300      	movs	r3, #0
 80084e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ec:	461a      	mov	r2, r3
 80084ee:	2300      	movs	r3, #0
 80084f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f8:	461a      	mov	r2, r3
 80084fa:	2300      	movs	r3, #0
 80084fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	e043      	b.n	800858c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800851a:	d118      	bne.n	800854e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800852e:	461a      	mov	r2, r3
 8008530:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	e013      	b.n	8008560 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008544:	461a      	mov	r2, r3
 8008546:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	e008      	b.n	8008560 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855a:	461a      	mov	r2, r3
 800855c:	2300      	movs	r3, #0
 800855e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800856c:	461a      	mov	r2, r3
 800856e:	2300      	movs	r3, #0
 8008570:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857e:	461a      	mov	r2, r3
 8008580:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3301      	adds	r3, #1
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008590:	461a      	mov	r2, r3
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	4293      	cmp	r3, r2
 8008596:	d3b5      	bcc.n	8008504 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008598:	2300      	movs	r3, #0
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	e043      	b.n	8008626 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085b4:	d118      	bne.n	80085e8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c8:	461a      	mov	r2, r3
 80085ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	e013      	b.n	80085fa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085de:	461a      	mov	r2, r3
 80085e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	e008      	b.n	80085fa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f4:	461a      	mov	r2, r3
 80085f6:	2300      	movs	r3, #0
 80085f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008606:	461a      	mov	r2, r3
 8008608:	2300      	movs	r3, #0
 800860a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008618:	461a      	mov	r2, r3
 800861a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800861e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	3301      	adds	r3, #1
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800862a:	461a      	mov	r2, r3
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	4293      	cmp	r3, r2
 8008630:	d3b5      	bcc.n	800859e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008644:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008652:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f043 0210 	orr.w	r2, r3, #16
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699a      	ldr	r2, [r3, #24]
 8008664:	4b10      	ldr	r3, [pc, #64]	@ (80086a8 <USB_DevInit+0x28c>)
 8008666:	4313      	orrs	r3, r2
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800866c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	f043 0208 	orr.w	r2, r3, #8
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008680:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008684:	2b01      	cmp	r3, #1
 8008686:	d107      	bne.n	8008698 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008690:	f043 0304 	orr.w	r3, r3, #4
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086a4:	b004      	add	sp, #16
 80086a6:	4770      	bx	lr
 80086a8:	803c3800 	.word	0x803c3800

080086ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3301      	adds	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086c6:	d901      	bls.n	80086cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e01b      	b.n	8008704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	daf2      	bge.n	80086ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	019b      	lsls	r3, r3, #6
 80086dc:	f043 0220 	orr.w	r2, r3, #32
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086f0:	d901      	bls.n	80086f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e006      	b.n	8008704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d0f0      	beq.n	80086e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008728:	d901      	bls.n	800872e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e018      	b.n	8008760 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	daf2      	bge.n	800871c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2210      	movs	r2, #16
 800873e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800874c:	d901      	bls.n	8008752 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e006      	b.n	8008760 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	f003 0310 	and.w	r3, r3, #16
 800875a:	2b10      	cmp	r3, #16
 800875c:	d0f0      	beq.n	8008740 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800878c:	4313      	orrs	r3, r2
 800878e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80087b8:	f023 0303 	bic.w	r3, r3, #3
 80087bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087cc:	f043 0302 	orr.w	r3, r3, #2
 80087d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	f003 0301 	and.w	r3, r3, #1
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3301      	adds	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008814:	d901      	bls.n	800881a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e01b      	b.n	8008852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	daf2      	bge.n	8008808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f043 0201 	orr.w	r2, r3, #1
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800883e:	d901      	bls.n	8008844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e006      	b.n	8008852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b01      	cmp	r3, #1
 800884e:	d0f0      	beq.n	8008832 <USB_CoreReset+0x36>

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <__cvt>:
 800885e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008862:	ec57 6b10 	vmov	r6, r7, d0
 8008866:	2f00      	cmp	r7, #0
 8008868:	460c      	mov	r4, r1
 800886a:	4619      	mov	r1, r3
 800886c:	463b      	mov	r3, r7
 800886e:	bfbb      	ittet	lt
 8008870:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008874:	461f      	movlt	r7, r3
 8008876:	2300      	movge	r3, #0
 8008878:	232d      	movlt	r3, #45	@ 0x2d
 800887a:	700b      	strb	r3, [r1, #0]
 800887c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800887e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008882:	4691      	mov	r9, r2
 8008884:	f023 0820 	bic.w	r8, r3, #32
 8008888:	bfbc      	itt	lt
 800888a:	4632      	movlt	r2, r6
 800888c:	4616      	movlt	r6, r2
 800888e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008892:	d005      	beq.n	80088a0 <__cvt+0x42>
 8008894:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008898:	d100      	bne.n	800889c <__cvt+0x3e>
 800889a:	3401      	adds	r4, #1
 800889c:	2102      	movs	r1, #2
 800889e:	e000      	b.n	80088a2 <__cvt+0x44>
 80088a0:	2103      	movs	r1, #3
 80088a2:	ab03      	add	r3, sp, #12
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	ab02      	add	r3, sp, #8
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	ec47 6b10 	vmov	d0, r6, r7
 80088ae:	4653      	mov	r3, sl
 80088b0:	4622      	mov	r2, r4
 80088b2:	f000 fe1d 	bl	80094f0 <_dtoa_r>
 80088b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80088ba:	4605      	mov	r5, r0
 80088bc:	d119      	bne.n	80088f2 <__cvt+0x94>
 80088be:	f019 0f01 	tst.w	r9, #1
 80088c2:	d00e      	beq.n	80088e2 <__cvt+0x84>
 80088c4:	eb00 0904 	add.w	r9, r0, r4
 80088c8:	2200      	movs	r2, #0
 80088ca:	2300      	movs	r3, #0
 80088cc:	4630      	mov	r0, r6
 80088ce:	4639      	mov	r1, r7
 80088d0:	f7f8 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d4:	b108      	cbz	r0, 80088da <__cvt+0x7c>
 80088d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80088da:	2230      	movs	r2, #48	@ 0x30
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	454b      	cmp	r3, r9
 80088e0:	d31e      	bcc.n	8008920 <__cvt+0xc2>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088e6:	1b5b      	subs	r3, r3, r5
 80088e8:	4628      	mov	r0, r5
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	b004      	add	sp, #16
 80088ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088f6:	eb00 0904 	add.w	r9, r0, r4
 80088fa:	d1e5      	bne.n	80088c8 <__cvt+0x6a>
 80088fc:	7803      	ldrb	r3, [r0, #0]
 80088fe:	2b30      	cmp	r3, #48	@ 0x30
 8008900:	d10a      	bne.n	8008918 <__cvt+0xba>
 8008902:	2200      	movs	r2, #0
 8008904:	2300      	movs	r3, #0
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f8 f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800890e:	b918      	cbnz	r0, 8008918 <__cvt+0xba>
 8008910:	f1c4 0401 	rsb	r4, r4, #1
 8008914:	f8ca 4000 	str.w	r4, [sl]
 8008918:	f8da 3000 	ldr.w	r3, [sl]
 800891c:	4499      	add	r9, r3
 800891e:	e7d3      	b.n	80088c8 <__cvt+0x6a>
 8008920:	1c59      	adds	r1, r3, #1
 8008922:	9103      	str	r1, [sp, #12]
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e7d9      	b.n	80088dc <__cvt+0x7e>

08008928 <__exponent>:
 8008928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800892a:	2900      	cmp	r1, #0
 800892c:	bfba      	itte	lt
 800892e:	4249      	neglt	r1, r1
 8008930:	232d      	movlt	r3, #45	@ 0x2d
 8008932:	232b      	movge	r3, #43	@ 0x2b
 8008934:	2909      	cmp	r1, #9
 8008936:	7002      	strb	r2, [r0, #0]
 8008938:	7043      	strb	r3, [r0, #1]
 800893a:	dd29      	ble.n	8008990 <__exponent+0x68>
 800893c:	f10d 0307 	add.w	r3, sp, #7
 8008940:	461d      	mov	r5, r3
 8008942:	270a      	movs	r7, #10
 8008944:	461a      	mov	r2, r3
 8008946:	fbb1 f6f7 	udiv	r6, r1, r7
 800894a:	fb07 1416 	mls	r4, r7, r6, r1
 800894e:	3430      	adds	r4, #48	@ 0x30
 8008950:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008954:	460c      	mov	r4, r1
 8008956:	2c63      	cmp	r4, #99	@ 0x63
 8008958:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800895c:	4631      	mov	r1, r6
 800895e:	dcf1      	bgt.n	8008944 <__exponent+0x1c>
 8008960:	3130      	adds	r1, #48	@ 0x30
 8008962:	1e94      	subs	r4, r2, #2
 8008964:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008968:	1c41      	adds	r1, r0, #1
 800896a:	4623      	mov	r3, r4
 800896c:	42ab      	cmp	r3, r5
 800896e:	d30a      	bcc.n	8008986 <__exponent+0x5e>
 8008970:	f10d 0309 	add.w	r3, sp, #9
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	42ac      	cmp	r4, r5
 8008978:	bf88      	it	hi
 800897a:	2300      	movhi	r3, #0
 800897c:	3302      	adds	r3, #2
 800897e:	4403      	add	r3, r0
 8008980:	1a18      	subs	r0, r3, r0
 8008982:	b003      	add	sp, #12
 8008984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008986:	f813 6b01 	ldrb.w	r6, [r3], #1
 800898a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800898e:	e7ed      	b.n	800896c <__exponent+0x44>
 8008990:	2330      	movs	r3, #48	@ 0x30
 8008992:	3130      	adds	r1, #48	@ 0x30
 8008994:	7083      	strb	r3, [r0, #2]
 8008996:	70c1      	strb	r1, [r0, #3]
 8008998:	1d03      	adds	r3, r0, #4
 800899a:	e7f1      	b.n	8008980 <__exponent+0x58>

0800899c <_printf_float>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	b08d      	sub	sp, #52	@ 0x34
 80089a2:	460c      	mov	r4, r1
 80089a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80089a8:	4616      	mov	r6, r2
 80089aa:	461f      	mov	r7, r3
 80089ac:	4605      	mov	r5, r0
 80089ae:	f000 fd13 	bl	80093d8 <_localeconv_r>
 80089b2:	6803      	ldr	r3, [r0, #0]
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7f7 fc5a 	bl	8000270 <strlen>
 80089bc:	2300      	movs	r3, #0
 80089be:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c0:	f8d8 3000 	ldr.w	r3, [r8]
 80089c4:	9005      	str	r0, [sp, #20]
 80089c6:	3307      	adds	r3, #7
 80089c8:	f023 0307 	bic.w	r3, r3, #7
 80089cc:	f103 0208 	add.w	r2, r3, #8
 80089d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089d4:	f8d4 b000 	ldr.w	fp, [r4]
 80089d8:	f8c8 2000 	str.w	r2, [r8]
 80089dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089e4:	9307      	str	r3, [sp, #28]
 80089e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80089ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089f2:	4b9c      	ldr	r3, [pc, #624]	@ (8008c64 <_printf_float+0x2c8>)
 80089f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089f8:	f7f8 f898 	bl	8000b2c <__aeabi_dcmpun>
 80089fc:	bb70      	cbnz	r0, 8008a5c <_printf_float+0xc0>
 80089fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a02:	4b98      	ldr	r3, [pc, #608]	@ (8008c64 <_printf_float+0x2c8>)
 8008a04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a08:	f7f8 f872 	bl	8000af0 <__aeabi_dcmple>
 8008a0c:	bb30      	cbnz	r0, 8008a5c <_printf_float+0xc0>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2300      	movs	r3, #0
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f8 f861 	bl	8000adc <__aeabi_dcmplt>
 8008a1a:	b110      	cbz	r0, 8008a22 <_printf_float+0x86>
 8008a1c:	232d      	movs	r3, #45	@ 0x2d
 8008a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a22:	4a91      	ldr	r2, [pc, #580]	@ (8008c68 <_printf_float+0x2cc>)
 8008a24:	4b91      	ldr	r3, [pc, #580]	@ (8008c6c <_printf_float+0x2d0>)
 8008a26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a2a:	bf8c      	ite	hi
 8008a2c:	4690      	movhi	r8, r2
 8008a2e:	4698      	movls	r8, r3
 8008a30:	2303      	movs	r3, #3
 8008a32:	6123      	str	r3, [r4, #16]
 8008a34:	f02b 0304 	bic.w	r3, fp, #4
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	f04f 0900 	mov.w	r9, #0
 8008a3e:	9700      	str	r7, [sp, #0]
 8008a40:	4633      	mov	r3, r6
 8008a42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a44:	4621      	mov	r1, r4
 8008a46:	4628      	mov	r0, r5
 8008a48:	f000 f9d2 	bl	8008df0 <_printf_common>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f040 808d 	bne.w	8008b6c <_printf_float+0x1d0>
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a56:	b00d      	add	sp, #52	@ 0x34
 8008a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5c:	4642      	mov	r2, r8
 8008a5e:	464b      	mov	r3, r9
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f8 f862 	bl	8000b2c <__aeabi_dcmpun>
 8008a68:	b140      	cbz	r0, 8008a7c <_printf_float+0xe0>
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bfbc      	itt	lt
 8008a70:	232d      	movlt	r3, #45	@ 0x2d
 8008a72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a76:	4a7e      	ldr	r2, [pc, #504]	@ (8008c70 <_printf_float+0x2d4>)
 8008a78:	4b7e      	ldr	r3, [pc, #504]	@ (8008c74 <_printf_float+0x2d8>)
 8008a7a:	e7d4      	b.n	8008a26 <_printf_float+0x8a>
 8008a7c:	6863      	ldr	r3, [r4, #4]
 8008a7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a82:	9206      	str	r2, [sp, #24]
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	d13b      	bne.n	8008b00 <_printf_float+0x164>
 8008a88:	2306      	movs	r3, #6
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a90:	2300      	movs	r3, #0
 8008a92:	6022      	str	r2, [r4, #0]
 8008a94:	9303      	str	r3, [sp, #12]
 8008a96:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a9c:	ab09      	add	r3, sp, #36	@ 0x24
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	ec49 8b10 	vmov	d0, r8, r9
 8008aa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7ff fed7 	bl	800885e <__cvt>
 8008ab0:	9b06      	ldr	r3, [sp, #24]
 8008ab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ab4:	2b47      	cmp	r3, #71	@ 0x47
 8008ab6:	4680      	mov	r8, r0
 8008ab8:	d129      	bne.n	8008b0e <_printf_float+0x172>
 8008aba:	1cc8      	adds	r0, r1, #3
 8008abc:	db02      	blt.n	8008ac4 <_printf_float+0x128>
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	4299      	cmp	r1, r3
 8008ac2:	dd41      	ble.n	8008b48 <_printf_float+0x1ac>
 8008ac4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8008acc:	3901      	subs	r1, #1
 8008ace:	4652      	mov	r2, sl
 8008ad0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ad4:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ad6:	f7ff ff27 	bl	8008928 <__exponent>
 8008ada:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008adc:	1813      	adds	r3, r2, r0
 8008ade:	2a01      	cmp	r2, #1
 8008ae0:	4681      	mov	r9, r0
 8008ae2:	6123      	str	r3, [r4, #16]
 8008ae4:	dc02      	bgt.n	8008aec <_printf_float+0x150>
 8008ae6:	6822      	ldr	r2, [r4, #0]
 8008ae8:	07d2      	lsls	r2, r2, #31
 8008aea:	d501      	bpl.n	8008af0 <_printf_float+0x154>
 8008aec:	3301      	adds	r3, #1
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0a2      	beq.n	8008a3e <_printf_float+0xa2>
 8008af8:	232d      	movs	r3, #45	@ 0x2d
 8008afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008afe:	e79e      	b.n	8008a3e <_printf_float+0xa2>
 8008b00:	9a06      	ldr	r2, [sp, #24]
 8008b02:	2a47      	cmp	r2, #71	@ 0x47
 8008b04:	d1c2      	bne.n	8008a8c <_printf_float+0xf0>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1c0      	bne.n	8008a8c <_printf_float+0xf0>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e7bd      	b.n	8008a8a <_printf_float+0xee>
 8008b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b12:	d9db      	bls.n	8008acc <_printf_float+0x130>
 8008b14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008b18:	d118      	bne.n	8008b4c <_printf_float+0x1b0>
 8008b1a:	2900      	cmp	r1, #0
 8008b1c:	6863      	ldr	r3, [r4, #4]
 8008b1e:	dd0b      	ble.n	8008b38 <_printf_float+0x19c>
 8008b20:	6121      	str	r1, [r4, #16]
 8008b22:	b913      	cbnz	r3, 8008b2a <_printf_float+0x18e>
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	07d0      	lsls	r0, r2, #31
 8008b28:	d502      	bpl.n	8008b30 <_printf_float+0x194>
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	440b      	add	r3, r1
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b32:	f04f 0900 	mov.w	r9, #0
 8008b36:	e7db      	b.n	8008af0 <_printf_float+0x154>
 8008b38:	b913      	cbnz	r3, 8008b40 <_printf_float+0x1a4>
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	07d2      	lsls	r2, r2, #31
 8008b3e:	d501      	bpl.n	8008b44 <_printf_float+0x1a8>
 8008b40:	3302      	adds	r3, #2
 8008b42:	e7f4      	b.n	8008b2e <_printf_float+0x192>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e7f2      	b.n	8008b2e <_printf_float+0x192>
 8008b48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b4e:	4299      	cmp	r1, r3
 8008b50:	db05      	blt.n	8008b5e <_printf_float+0x1c2>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	6121      	str	r1, [r4, #16]
 8008b56:	07d8      	lsls	r0, r3, #31
 8008b58:	d5ea      	bpl.n	8008b30 <_printf_float+0x194>
 8008b5a:	1c4b      	adds	r3, r1, #1
 8008b5c:	e7e7      	b.n	8008b2e <_printf_float+0x192>
 8008b5e:	2900      	cmp	r1, #0
 8008b60:	bfd4      	ite	le
 8008b62:	f1c1 0202 	rsble	r2, r1, #2
 8008b66:	2201      	movgt	r2, #1
 8008b68:	4413      	add	r3, r2
 8008b6a:	e7e0      	b.n	8008b2e <_printf_float+0x192>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	055a      	lsls	r2, r3, #21
 8008b70:	d407      	bmi.n	8008b82 <_printf_float+0x1e6>
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	4642      	mov	r2, r8
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d12b      	bne.n	8008bd8 <_printf_float+0x23c>
 8008b80:	e767      	b.n	8008a52 <_printf_float+0xb6>
 8008b82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b86:	f240 80dd 	bls.w	8008d44 <_printf_float+0x3a8>
 8008b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2300      	movs	r3, #0
 8008b92:	f7f7 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d033      	beq.n	8008c02 <_printf_float+0x266>
 8008b9a:	4a37      	ldr	r2, [pc, #220]	@ (8008c78 <_printf_float+0x2dc>)
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f43f af54 	beq.w	8008a52 <_printf_float+0xb6>
 8008baa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008bae:	4543      	cmp	r3, r8
 8008bb0:	db02      	blt.n	8008bb8 <_printf_float+0x21c>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	07d8      	lsls	r0, r3, #31
 8008bb6:	d50f      	bpl.n	8008bd8 <_printf_float+0x23c>
 8008bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f af45 	beq.w	8008a52 <_printf_float+0xb6>
 8008bc8:	f04f 0900 	mov.w	r9, #0
 8008bcc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008bd0:	f104 0a1a 	add.w	sl, r4, #26
 8008bd4:	45c8      	cmp	r8, r9
 8008bd6:	dc09      	bgt.n	8008bec <_printf_float+0x250>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	079b      	lsls	r3, r3, #30
 8008bdc:	f100 8103 	bmi.w	8008de6 <_printf_float+0x44a>
 8008be0:	68e0      	ldr	r0, [r4, #12]
 8008be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008be4:	4298      	cmp	r0, r3
 8008be6:	bfb8      	it	lt
 8008be8:	4618      	movlt	r0, r3
 8008bea:	e734      	b.n	8008a56 <_printf_float+0xba>
 8008bec:	2301      	movs	r3, #1
 8008bee:	4652      	mov	r2, sl
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	47b8      	blx	r7
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	f43f af2b 	beq.w	8008a52 <_printf_float+0xb6>
 8008bfc:	f109 0901 	add.w	r9, r9, #1
 8008c00:	e7e8      	b.n	8008bd4 <_printf_float+0x238>
 8008c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dc39      	bgt.n	8008c7c <_printf_float+0x2e0>
 8008c08:	4a1b      	ldr	r2, [pc, #108]	@ (8008c78 <_printf_float+0x2dc>)
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4628      	mov	r0, r5
 8008c10:	47b8      	blx	r7
 8008c12:	3001      	adds	r0, #1
 8008c14:	f43f af1d 	beq.w	8008a52 <_printf_float+0xb6>
 8008c18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008c1c:	ea59 0303 	orrs.w	r3, r9, r3
 8008c20:	d102      	bne.n	8008c28 <_printf_float+0x28c>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	07d9      	lsls	r1, r3, #31
 8008c26:	d5d7      	bpl.n	8008bd8 <_printf_float+0x23c>
 8008c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b8      	blx	r7
 8008c32:	3001      	adds	r0, #1
 8008c34:	f43f af0d 	beq.w	8008a52 <_printf_float+0xb6>
 8008c38:	f04f 0a00 	mov.w	sl, #0
 8008c3c:	f104 0b1a 	add.w	fp, r4, #26
 8008c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c42:	425b      	negs	r3, r3
 8008c44:	4553      	cmp	r3, sl
 8008c46:	dc01      	bgt.n	8008c4c <_printf_float+0x2b0>
 8008c48:	464b      	mov	r3, r9
 8008c4a:	e793      	b.n	8008b74 <_printf_float+0x1d8>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	465a      	mov	r2, fp
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	47b8      	blx	r7
 8008c56:	3001      	adds	r0, #1
 8008c58:	f43f aefb 	beq.w	8008a52 <_printf_float+0xb6>
 8008c5c:	f10a 0a01 	add.w	sl, sl, #1
 8008c60:	e7ee      	b.n	8008c40 <_printf_float+0x2a4>
 8008c62:	bf00      	nop
 8008c64:	7fefffff 	.word	0x7fefffff
 8008c68:	0800b3b0 	.word	0x0800b3b0
 8008c6c:	0800b3ac 	.word	0x0800b3ac
 8008c70:	0800b3b8 	.word	0x0800b3b8
 8008c74:	0800b3b4 	.word	0x0800b3b4
 8008c78:	0800b3bc 	.word	0x0800b3bc
 8008c7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c82:	4553      	cmp	r3, sl
 8008c84:	bfa8      	it	ge
 8008c86:	4653      	movge	r3, sl
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	4699      	mov	r9, r3
 8008c8c:	dc36      	bgt.n	8008cfc <_printf_float+0x360>
 8008c8e:	f04f 0b00 	mov.w	fp, #0
 8008c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c96:	f104 021a 	add.w	r2, r4, #26
 8008c9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c9c:	9306      	str	r3, [sp, #24]
 8008c9e:	eba3 0309 	sub.w	r3, r3, r9
 8008ca2:	455b      	cmp	r3, fp
 8008ca4:	dc31      	bgt.n	8008d0a <_printf_float+0x36e>
 8008ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca8:	459a      	cmp	sl, r3
 8008caa:	dc3a      	bgt.n	8008d22 <_printf_float+0x386>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	07da      	lsls	r2, r3, #31
 8008cb0:	d437      	bmi.n	8008d22 <_printf_float+0x386>
 8008cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb4:	ebaa 0903 	sub.w	r9, sl, r3
 8008cb8:	9b06      	ldr	r3, [sp, #24]
 8008cba:	ebaa 0303 	sub.w	r3, sl, r3
 8008cbe:	4599      	cmp	r9, r3
 8008cc0:	bfa8      	it	ge
 8008cc2:	4699      	movge	r9, r3
 8008cc4:	f1b9 0f00 	cmp.w	r9, #0
 8008cc8:	dc33      	bgt.n	8008d32 <_printf_float+0x396>
 8008cca:	f04f 0800 	mov.w	r8, #0
 8008cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd2:	f104 0b1a 	add.w	fp, r4, #26
 8008cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd8:	ebaa 0303 	sub.w	r3, sl, r3
 8008cdc:	eba3 0309 	sub.w	r3, r3, r9
 8008ce0:	4543      	cmp	r3, r8
 8008ce2:	f77f af79 	ble.w	8008bd8 <_printf_float+0x23c>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	465a      	mov	r2, fp
 8008cea:	4631      	mov	r1, r6
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	f43f aeae 	beq.w	8008a52 <_printf_float+0xb6>
 8008cf6:	f108 0801 	add.w	r8, r8, #1
 8008cfa:	e7ec      	b.n	8008cd6 <_printf_float+0x33a>
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	d1c2      	bne.n	8008c8e <_printf_float+0x2f2>
 8008d08:	e6a3      	b.n	8008a52 <_printf_float+0xb6>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	9206      	str	r2, [sp, #24]
 8008d12:	47b8      	blx	r7
 8008d14:	3001      	adds	r0, #1
 8008d16:	f43f ae9c 	beq.w	8008a52 <_printf_float+0xb6>
 8008d1a:	9a06      	ldr	r2, [sp, #24]
 8008d1c:	f10b 0b01 	add.w	fp, fp, #1
 8008d20:	e7bb      	b.n	8008c9a <_printf_float+0x2fe>
 8008d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d1c0      	bne.n	8008cb2 <_printf_float+0x316>
 8008d30:	e68f      	b.n	8008a52 <_printf_float+0xb6>
 8008d32:	9a06      	ldr	r2, [sp, #24]
 8008d34:	464b      	mov	r3, r9
 8008d36:	4442      	add	r2, r8
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d1c3      	bne.n	8008cca <_printf_float+0x32e>
 8008d42:	e686      	b.n	8008a52 <_printf_float+0xb6>
 8008d44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d48:	f1ba 0f01 	cmp.w	sl, #1
 8008d4c:	dc01      	bgt.n	8008d52 <_printf_float+0x3b6>
 8008d4e:	07db      	lsls	r3, r3, #31
 8008d50:	d536      	bpl.n	8008dc0 <_printf_float+0x424>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4642      	mov	r2, r8
 8008d56:	4631      	mov	r1, r6
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b8      	blx	r7
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	f43f ae78 	beq.w	8008a52 <_printf_float+0xb6>
 8008d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	47b8      	blx	r7
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	f43f ae70 	beq.w	8008a52 <_printf_float+0xb6>
 8008d72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d76:	2200      	movs	r2, #0
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008d7e:	f7f7 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d82:	b9c0      	cbnz	r0, 8008db6 <_printf_float+0x41a>
 8008d84:	4653      	mov	r3, sl
 8008d86:	f108 0201 	add.w	r2, r8, #1
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	47b8      	blx	r7
 8008d90:	3001      	adds	r0, #1
 8008d92:	d10c      	bne.n	8008dae <_printf_float+0x412>
 8008d94:	e65d      	b.n	8008a52 <_printf_float+0xb6>
 8008d96:	2301      	movs	r3, #1
 8008d98:	465a      	mov	r2, fp
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	f43f ae56 	beq.w	8008a52 <_printf_float+0xb6>
 8008da6:	f108 0801 	add.w	r8, r8, #1
 8008daa:	45d0      	cmp	r8, sl
 8008dac:	dbf3      	blt.n	8008d96 <_printf_float+0x3fa>
 8008dae:	464b      	mov	r3, r9
 8008db0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008db4:	e6df      	b.n	8008b76 <_printf_float+0x1da>
 8008db6:	f04f 0800 	mov.w	r8, #0
 8008dba:	f104 0b1a 	add.w	fp, r4, #26
 8008dbe:	e7f4      	b.n	8008daa <_printf_float+0x40e>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4642      	mov	r2, r8
 8008dc4:	e7e1      	b.n	8008d8a <_printf_float+0x3ee>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	464a      	mov	r2, r9
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae3e 	beq.w	8008a52 <_printf_float+0xb6>
 8008dd6:	f108 0801 	add.w	r8, r8, #1
 8008dda:	68e3      	ldr	r3, [r4, #12]
 8008ddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dde:	1a5b      	subs	r3, r3, r1
 8008de0:	4543      	cmp	r3, r8
 8008de2:	dcf0      	bgt.n	8008dc6 <_printf_float+0x42a>
 8008de4:	e6fc      	b.n	8008be0 <_printf_float+0x244>
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	f104 0919 	add.w	r9, r4, #25
 8008dee:	e7f4      	b.n	8008dda <_printf_float+0x43e>

08008df0 <_printf_common>:
 8008df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	4616      	mov	r6, r2
 8008df6:	4698      	mov	r8, r3
 8008df8:	688a      	ldr	r2, [r1, #8]
 8008dfa:	690b      	ldr	r3, [r1, #16]
 8008dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e00:	4293      	cmp	r3, r2
 8008e02:	bfb8      	it	lt
 8008e04:	4613      	movlt	r3, r2
 8008e06:	6033      	str	r3, [r6, #0]
 8008e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	b10a      	cbz	r2, 8008e16 <_printf_common+0x26>
 8008e12:	3301      	adds	r3, #1
 8008e14:	6033      	str	r3, [r6, #0]
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	0699      	lsls	r1, r3, #26
 8008e1a:	bf42      	ittt	mi
 8008e1c:	6833      	ldrmi	r3, [r6, #0]
 8008e1e:	3302      	addmi	r3, #2
 8008e20:	6033      	strmi	r3, [r6, #0]
 8008e22:	6825      	ldr	r5, [r4, #0]
 8008e24:	f015 0506 	ands.w	r5, r5, #6
 8008e28:	d106      	bne.n	8008e38 <_printf_common+0x48>
 8008e2a:	f104 0a19 	add.w	sl, r4, #25
 8008e2e:	68e3      	ldr	r3, [r4, #12]
 8008e30:	6832      	ldr	r2, [r6, #0]
 8008e32:	1a9b      	subs	r3, r3, r2
 8008e34:	42ab      	cmp	r3, r5
 8008e36:	dc26      	bgt.n	8008e86 <_printf_common+0x96>
 8008e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	3b00      	subs	r3, #0
 8008e40:	bf18      	it	ne
 8008e42:	2301      	movne	r3, #1
 8008e44:	0692      	lsls	r2, r2, #26
 8008e46:	d42b      	bmi.n	8008ea0 <_printf_common+0xb0>
 8008e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	4638      	mov	r0, r7
 8008e50:	47c8      	blx	r9
 8008e52:	3001      	adds	r0, #1
 8008e54:	d01e      	beq.n	8008e94 <_printf_common+0xa4>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	6922      	ldr	r2, [r4, #16]
 8008e5a:	f003 0306 	and.w	r3, r3, #6
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	bf02      	ittt	eq
 8008e62:	68e5      	ldreq	r5, [r4, #12]
 8008e64:	6833      	ldreq	r3, [r6, #0]
 8008e66:	1aed      	subeq	r5, r5, r3
 8008e68:	68a3      	ldr	r3, [r4, #8]
 8008e6a:	bf0c      	ite	eq
 8008e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e70:	2500      	movne	r5, #0
 8008e72:	4293      	cmp	r3, r2
 8008e74:	bfc4      	itt	gt
 8008e76:	1a9b      	subgt	r3, r3, r2
 8008e78:	18ed      	addgt	r5, r5, r3
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	341a      	adds	r4, #26
 8008e7e:	42b5      	cmp	r5, r6
 8008e80:	d11a      	bne.n	8008eb8 <_printf_common+0xc8>
 8008e82:	2000      	movs	r0, #0
 8008e84:	e008      	b.n	8008e98 <_printf_common+0xa8>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4652      	mov	r2, sl
 8008e8a:	4641      	mov	r1, r8
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	47c8      	blx	r9
 8008e90:	3001      	adds	r0, #1
 8008e92:	d103      	bne.n	8008e9c <_printf_common+0xac>
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	e7c6      	b.n	8008e2e <_printf_common+0x3e>
 8008ea0:	18e1      	adds	r1, r4, r3
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	2030      	movs	r0, #48	@ 0x30
 8008ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eaa:	4422      	add	r2, r4
 8008eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	e7c7      	b.n	8008e48 <_printf_common+0x58>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	4622      	mov	r2, r4
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	47c8      	blx	r9
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d0e6      	beq.n	8008e94 <_printf_common+0xa4>
 8008ec6:	3601      	adds	r6, #1
 8008ec8:	e7d9      	b.n	8008e7e <_printf_common+0x8e>
	...

08008ecc <_printf_i>:
 8008ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed0:	7e0f      	ldrb	r7, [r1, #24]
 8008ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ed4:	2f78      	cmp	r7, #120	@ 0x78
 8008ed6:	4691      	mov	r9, r2
 8008ed8:	4680      	mov	r8, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	469a      	mov	sl, r3
 8008ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ee2:	d807      	bhi.n	8008ef4 <_printf_i+0x28>
 8008ee4:	2f62      	cmp	r7, #98	@ 0x62
 8008ee6:	d80a      	bhi.n	8008efe <_printf_i+0x32>
 8008ee8:	2f00      	cmp	r7, #0
 8008eea:	f000 80d1 	beq.w	8009090 <_printf_i+0x1c4>
 8008eee:	2f58      	cmp	r7, #88	@ 0x58
 8008ef0:	f000 80b8 	beq.w	8009064 <_printf_i+0x198>
 8008ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008efc:	e03a      	b.n	8008f74 <_printf_i+0xa8>
 8008efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f02:	2b15      	cmp	r3, #21
 8008f04:	d8f6      	bhi.n	8008ef4 <_printf_i+0x28>
 8008f06:	a101      	add	r1, pc, #4	@ (adr r1, 8008f0c <_printf_i+0x40>)
 8008f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008ef5 	.word	0x08008ef5
 8008f18:	08008ef5 	.word	0x08008ef5
 8008f1c:	08008ef5 	.word	0x08008ef5
 8008f20:	08008ef5 	.word	0x08008ef5
 8008f24:	08008f79 	.word	0x08008f79
 8008f28:	08008ef5 	.word	0x08008ef5
 8008f2c:	08008ef5 	.word	0x08008ef5
 8008f30:	08008ef5 	.word	0x08008ef5
 8008f34:	08008ef5 	.word	0x08008ef5
 8008f38:	08009077 	.word	0x08009077
 8008f3c:	08008fa3 	.word	0x08008fa3
 8008f40:	08009031 	.word	0x08009031
 8008f44:	08008ef5 	.word	0x08008ef5
 8008f48:	08008ef5 	.word	0x08008ef5
 8008f4c:	08009099 	.word	0x08009099
 8008f50:	08008ef5 	.word	0x08008ef5
 8008f54:	08008fa3 	.word	0x08008fa3
 8008f58:	08008ef5 	.word	0x08008ef5
 8008f5c:	08008ef5 	.word	0x08008ef5
 8008f60:	08009039 	.word	0x08009039
 8008f64:	6833      	ldr	r3, [r6, #0]
 8008f66:	1d1a      	adds	r2, r3, #4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6032      	str	r2, [r6, #0]
 8008f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f74:	2301      	movs	r3, #1
 8008f76:	e09c      	b.n	80090b2 <_printf_i+0x1e6>
 8008f78:	6833      	ldr	r3, [r6, #0]
 8008f7a:	6820      	ldr	r0, [r4, #0]
 8008f7c:	1d19      	adds	r1, r3, #4
 8008f7e:	6031      	str	r1, [r6, #0]
 8008f80:	0606      	lsls	r6, r0, #24
 8008f82:	d501      	bpl.n	8008f88 <_printf_i+0xbc>
 8008f84:	681d      	ldr	r5, [r3, #0]
 8008f86:	e003      	b.n	8008f90 <_printf_i+0xc4>
 8008f88:	0645      	lsls	r5, r0, #25
 8008f8a:	d5fb      	bpl.n	8008f84 <_printf_i+0xb8>
 8008f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	da03      	bge.n	8008f9c <_printf_i+0xd0>
 8008f94:	232d      	movs	r3, #45	@ 0x2d
 8008f96:	426d      	negs	r5, r5
 8008f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f9c:	4858      	ldr	r0, [pc, #352]	@ (8009100 <_printf_i+0x234>)
 8008f9e:	230a      	movs	r3, #10
 8008fa0:	e011      	b.n	8008fc6 <_printf_i+0xfa>
 8008fa2:	6821      	ldr	r1, [r4, #0]
 8008fa4:	6833      	ldr	r3, [r6, #0]
 8008fa6:	0608      	lsls	r0, r1, #24
 8008fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fac:	d402      	bmi.n	8008fb4 <_printf_i+0xe8>
 8008fae:	0649      	lsls	r1, r1, #25
 8008fb0:	bf48      	it	mi
 8008fb2:	b2ad      	uxthmi	r5, r5
 8008fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fb6:	4852      	ldr	r0, [pc, #328]	@ (8009100 <_printf_i+0x234>)
 8008fb8:	6033      	str	r3, [r6, #0]
 8008fba:	bf14      	ite	ne
 8008fbc:	230a      	movne	r3, #10
 8008fbe:	2308      	moveq	r3, #8
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fc6:	6866      	ldr	r6, [r4, #4]
 8008fc8:	60a6      	str	r6, [r4, #8]
 8008fca:	2e00      	cmp	r6, #0
 8008fcc:	db05      	blt.n	8008fda <_printf_i+0x10e>
 8008fce:	6821      	ldr	r1, [r4, #0]
 8008fd0:	432e      	orrs	r6, r5
 8008fd2:	f021 0104 	bic.w	r1, r1, #4
 8008fd6:	6021      	str	r1, [r4, #0]
 8008fd8:	d04b      	beq.n	8009072 <_printf_i+0x1a6>
 8008fda:	4616      	mov	r6, r2
 8008fdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fe0:	fb03 5711 	mls	r7, r3, r1, r5
 8008fe4:	5dc7      	ldrb	r7, [r0, r7]
 8008fe6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fea:	462f      	mov	r7, r5
 8008fec:	42bb      	cmp	r3, r7
 8008fee:	460d      	mov	r5, r1
 8008ff0:	d9f4      	bls.n	8008fdc <_printf_i+0x110>
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d10b      	bne.n	800900e <_printf_i+0x142>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	07df      	lsls	r7, r3, #31
 8008ffa:	d508      	bpl.n	800900e <_printf_i+0x142>
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	6861      	ldr	r1, [r4, #4]
 8009000:	4299      	cmp	r1, r3
 8009002:	bfde      	ittt	le
 8009004:	2330      	movle	r3, #48	@ 0x30
 8009006:	f806 3c01 	strble.w	r3, [r6, #-1]
 800900a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800900e:	1b92      	subs	r2, r2, r6
 8009010:	6122      	str	r2, [r4, #16]
 8009012:	f8cd a000 	str.w	sl, [sp]
 8009016:	464b      	mov	r3, r9
 8009018:	aa03      	add	r2, sp, #12
 800901a:	4621      	mov	r1, r4
 800901c:	4640      	mov	r0, r8
 800901e:	f7ff fee7 	bl	8008df0 <_printf_common>
 8009022:	3001      	adds	r0, #1
 8009024:	d14a      	bne.n	80090bc <_printf_i+0x1f0>
 8009026:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800902a:	b004      	add	sp, #16
 800902c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	f043 0320 	orr.w	r3, r3, #32
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	4832      	ldr	r0, [pc, #200]	@ (8009104 <_printf_i+0x238>)
 800903a:	2778      	movs	r7, #120	@ 0x78
 800903c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	6831      	ldr	r1, [r6, #0]
 8009044:	061f      	lsls	r7, r3, #24
 8009046:	f851 5b04 	ldr.w	r5, [r1], #4
 800904a:	d402      	bmi.n	8009052 <_printf_i+0x186>
 800904c:	065f      	lsls	r7, r3, #25
 800904e:	bf48      	it	mi
 8009050:	b2ad      	uxthmi	r5, r5
 8009052:	6031      	str	r1, [r6, #0]
 8009054:	07d9      	lsls	r1, r3, #31
 8009056:	bf44      	itt	mi
 8009058:	f043 0320 	orrmi.w	r3, r3, #32
 800905c:	6023      	strmi	r3, [r4, #0]
 800905e:	b11d      	cbz	r5, 8009068 <_printf_i+0x19c>
 8009060:	2310      	movs	r3, #16
 8009062:	e7ad      	b.n	8008fc0 <_printf_i+0xf4>
 8009064:	4826      	ldr	r0, [pc, #152]	@ (8009100 <_printf_i+0x234>)
 8009066:	e7e9      	b.n	800903c <_printf_i+0x170>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	f023 0320 	bic.w	r3, r3, #32
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	e7f6      	b.n	8009060 <_printf_i+0x194>
 8009072:	4616      	mov	r6, r2
 8009074:	e7bd      	b.n	8008ff2 <_printf_i+0x126>
 8009076:	6833      	ldr	r3, [r6, #0]
 8009078:	6825      	ldr	r5, [r4, #0]
 800907a:	6961      	ldr	r1, [r4, #20]
 800907c:	1d18      	adds	r0, r3, #4
 800907e:	6030      	str	r0, [r6, #0]
 8009080:	062e      	lsls	r6, r5, #24
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	d501      	bpl.n	800908a <_printf_i+0x1be>
 8009086:	6019      	str	r1, [r3, #0]
 8009088:	e002      	b.n	8009090 <_printf_i+0x1c4>
 800908a:	0668      	lsls	r0, r5, #25
 800908c:	d5fb      	bpl.n	8009086 <_printf_i+0x1ba>
 800908e:	8019      	strh	r1, [r3, #0]
 8009090:	2300      	movs	r3, #0
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	4616      	mov	r6, r2
 8009096:	e7bc      	b.n	8009012 <_printf_i+0x146>
 8009098:	6833      	ldr	r3, [r6, #0]
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	6032      	str	r2, [r6, #0]
 800909e:	681e      	ldr	r6, [r3, #0]
 80090a0:	6862      	ldr	r2, [r4, #4]
 80090a2:	2100      	movs	r1, #0
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7f7 f893 	bl	80001d0 <memchr>
 80090aa:	b108      	cbz	r0, 80090b0 <_printf_i+0x1e4>
 80090ac:	1b80      	subs	r0, r0, r6
 80090ae:	6060      	str	r0, [r4, #4]
 80090b0:	6863      	ldr	r3, [r4, #4]
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	2300      	movs	r3, #0
 80090b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090ba:	e7aa      	b.n	8009012 <_printf_i+0x146>
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	4632      	mov	r2, r6
 80090c0:	4649      	mov	r1, r9
 80090c2:	4640      	mov	r0, r8
 80090c4:	47d0      	blx	sl
 80090c6:	3001      	adds	r0, #1
 80090c8:	d0ad      	beq.n	8009026 <_printf_i+0x15a>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	079b      	lsls	r3, r3, #30
 80090ce:	d413      	bmi.n	80090f8 <_printf_i+0x22c>
 80090d0:	68e0      	ldr	r0, [r4, #12]
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	4298      	cmp	r0, r3
 80090d6:	bfb8      	it	lt
 80090d8:	4618      	movlt	r0, r3
 80090da:	e7a6      	b.n	800902a <_printf_i+0x15e>
 80090dc:	2301      	movs	r3, #1
 80090de:	4632      	mov	r2, r6
 80090e0:	4649      	mov	r1, r9
 80090e2:	4640      	mov	r0, r8
 80090e4:	47d0      	blx	sl
 80090e6:	3001      	adds	r0, #1
 80090e8:	d09d      	beq.n	8009026 <_printf_i+0x15a>
 80090ea:	3501      	adds	r5, #1
 80090ec:	68e3      	ldr	r3, [r4, #12]
 80090ee:	9903      	ldr	r1, [sp, #12]
 80090f0:	1a5b      	subs	r3, r3, r1
 80090f2:	42ab      	cmp	r3, r5
 80090f4:	dcf2      	bgt.n	80090dc <_printf_i+0x210>
 80090f6:	e7eb      	b.n	80090d0 <_printf_i+0x204>
 80090f8:	2500      	movs	r5, #0
 80090fa:	f104 0619 	add.w	r6, r4, #25
 80090fe:	e7f5      	b.n	80090ec <_printf_i+0x220>
 8009100:	0800b3be 	.word	0x0800b3be
 8009104:	0800b3cf 	.word	0x0800b3cf

08009108 <std>:
 8009108:	2300      	movs	r3, #0
 800910a:	b510      	push	{r4, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	e9c0 3300 	strd	r3, r3, [r0]
 8009112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009116:	6083      	str	r3, [r0, #8]
 8009118:	8181      	strh	r1, [r0, #12]
 800911a:	6643      	str	r3, [r0, #100]	@ 0x64
 800911c:	81c2      	strh	r2, [r0, #14]
 800911e:	6183      	str	r3, [r0, #24]
 8009120:	4619      	mov	r1, r3
 8009122:	2208      	movs	r2, #8
 8009124:	305c      	adds	r0, #92	@ 0x5c
 8009126:	f000 f921 	bl	800936c <memset>
 800912a:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <std+0x58>)
 800912c:	6263      	str	r3, [r4, #36]	@ 0x24
 800912e:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <std+0x5c>)
 8009130:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009132:	4b0d      	ldr	r3, [pc, #52]	@ (8009168 <std+0x60>)
 8009134:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009136:	4b0d      	ldr	r3, [pc, #52]	@ (800916c <std+0x64>)
 8009138:	6323      	str	r3, [r4, #48]	@ 0x30
 800913a:	4b0d      	ldr	r3, [pc, #52]	@ (8009170 <std+0x68>)
 800913c:	6224      	str	r4, [r4, #32]
 800913e:	429c      	cmp	r4, r3
 8009140:	d006      	beq.n	8009150 <std+0x48>
 8009142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009146:	4294      	cmp	r4, r2
 8009148:	d002      	beq.n	8009150 <std+0x48>
 800914a:	33d0      	adds	r3, #208	@ 0xd0
 800914c:	429c      	cmp	r4, r3
 800914e:	d105      	bne.n	800915c <std+0x54>
 8009150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009158:	f000 b93a 	b.w	80093d0 <__retarget_lock_init_recursive>
 800915c:	bd10      	pop	{r4, pc}
 800915e:	bf00      	nop
 8009160:	0800accd 	.word	0x0800accd
 8009164:	0800acef 	.word	0x0800acef
 8009168:	0800ad27 	.word	0x0800ad27
 800916c:	0800ad4b 	.word	0x0800ad4b
 8009170:	20000a68 	.word	0x20000a68

08009174 <stdio_exit_handler>:
 8009174:	4a02      	ldr	r2, [pc, #8]	@ (8009180 <stdio_exit_handler+0xc>)
 8009176:	4903      	ldr	r1, [pc, #12]	@ (8009184 <stdio_exit_handler+0x10>)
 8009178:	4803      	ldr	r0, [pc, #12]	@ (8009188 <stdio_exit_handler+0x14>)
 800917a:	f000 b869 	b.w	8009250 <_fwalk_sglue>
 800917e:	bf00      	nop
 8009180:	20000020 	.word	0x20000020
 8009184:	0800a571 	.word	0x0800a571
 8009188:	20000030 	.word	0x20000030

0800918c <cleanup_stdio>:
 800918c:	6841      	ldr	r1, [r0, #4]
 800918e:	4b0c      	ldr	r3, [pc, #48]	@ (80091c0 <cleanup_stdio+0x34>)
 8009190:	4299      	cmp	r1, r3
 8009192:	b510      	push	{r4, lr}
 8009194:	4604      	mov	r4, r0
 8009196:	d001      	beq.n	800919c <cleanup_stdio+0x10>
 8009198:	f001 f9ea 	bl	800a570 <_fflush_r>
 800919c:	68a1      	ldr	r1, [r4, #8]
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <cleanup_stdio+0x38>)
 80091a0:	4299      	cmp	r1, r3
 80091a2:	d002      	beq.n	80091aa <cleanup_stdio+0x1e>
 80091a4:	4620      	mov	r0, r4
 80091a6:	f001 f9e3 	bl	800a570 <_fflush_r>
 80091aa:	68e1      	ldr	r1, [r4, #12]
 80091ac:	4b06      	ldr	r3, [pc, #24]	@ (80091c8 <cleanup_stdio+0x3c>)
 80091ae:	4299      	cmp	r1, r3
 80091b0:	d004      	beq.n	80091bc <cleanup_stdio+0x30>
 80091b2:	4620      	mov	r0, r4
 80091b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b8:	f001 b9da 	b.w	800a570 <_fflush_r>
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	bf00      	nop
 80091c0:	20000a68 	.word	0x20000a68
 80091c4:	20000ad0 	.word	0x20000ad0
 80091c8:	20000b38 	.word	0x20000b38

080091cc <global_stdio_init.part.0>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <global_stdio_init.part.0+0x30>)
 80091d0:	4c0b      	ldr	r4, [pc, #44]	@ (8009200 <global_stdio_init.part.0+0x34>)
 80091d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009204 <global_stdio_init.part.0+0x38>)
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	4620      	mov	r0, r4
 80091d8:	2200      	movs	r2, #0
 80091da:	2104      	movs	r1, #4
 80091dc:	f7ff ff94 	bl	8009108 <std>
 80091e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091e4:	2201      	movs	r2, #1
 80091e6:	2109      	movs	r1, #9
 80091e8:	f7ff ff8e 	bl	8009108 <std>
 80091ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091f0:	2202      	movs	r2, #2
 80091f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f6:	2112      	movs	r1, #18
 80091f8:	f7ff bf86 	b.w	8009108 <std>
 80091fc:	20000ba0 	.word	0x20000ba0
 8009200:	20000a68 	.word	0x20000a68
 8009204:	08009175 	.word	0x08009175

08009208 <__sfp_lock_acquire>:
 8009208:	4801      	ldr	r0, [pc, #4]	@ (8009210 <__sfp_lock_acquire+0x8>)
 800920a:	f000 b8e2 	b.w	80093d2 <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	20000ba5 	.word	0x20000ba5

08009214 <__sfp_lock_release>:
 8009214:	4801      	ldr	r0, [pc, #4]	@ (800921c <__sfp_lock_release+0x8>)
 8009216:	f000 b8dd 	b.w	80093d4 <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	20000ba5 	.word	0x20000ba5

08009220 <__sinit>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff fff0 	bl	8009208 <__sfp_lock_acquire>
 8009228:	6a23      	ldr	r3, [r4, #32]
 800922a:	b11b      	cbz	r3, 8009234 <__sinit+0x14>
 800922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009230:	f7ff bff0 	b.w	8009214 <__sfp_lock_release>
 8009234:	4b04      	ldr	r3, [pc, #16]	@ (8009248 <__sinit+0x28>)
 8009236:	6223      	str	r3, [r4, #32]
 8009238:	4b04      	ldr	r3, [pc, #16]	@ (800924c <__sinit+0x2c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f5      	bne.n	800922c <__sinit+0xc>
 8009240:	f7ff ffc4 	bl	80091cc <global_stdio_init.part.0>
 8009244:	e7f2      	b.n	800922c <__sinit+0xc>
 8009246:	bf00      	nop
 8009248:	0800918d 	.word	0x0800918d
 800924c:	20000ba0 	.word	0x20000ba0

08009250 <_fwalk_sglue>:
 8009250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009254:	4607      	mov	r7, r0
 8009256:	4688      	mov	r8, r1
 8009258:	4614      	mov	r4, r2
 800925a:	2600      	movs	r6, #0
 800925c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009260:	f1b9 0901 	subs.w	r9, r9, #1
 8009264:	d505      	bpl.n	8009272 <_fwalk_sglue+0x22>
 8009266:	6824      	ldr	r4, [r4, #0]
 8009268:	2c00      	cmp	r4, #0
 800926a:	d1f7      	bne.n	800925c <_fwalk_sglue+0xc>
 800926c:	4630      	mov	r0, r6
 800926e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d907      	bls.n	8009288 <_fwalk_sglue+0x38>
 8009278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800927c:	3301      	adds	r3, #1
 800927e:	d003      	beq.n	8009288 <_fwalk_sglue+0x38>
 8009280:	4629      	mov	r1, r5
 8009282:	4638      	mov	r0, r7
 8009284:	47c0      	blx	r8
 8009286:	4306      	orrs	r6, r0
 8009288:	3568      	adds	r5, #104	@ 0x68
 800928a:	e7e9      	b.n	8009260 <_fwalk_sglue+0x10>

0800928c <iprintf>:
 800928c:	b40f      	push	{r0, r1, r2, r3}
 800928e:	b507      	push	{r0, r1, r2, lr}
 8009290:	4906      	ldr	r1, [pc, #24]	@ (80092ac <iprintf+0x20>)
 8009292:	ab04      	add	r3, sp, #16
 8009294:	6808      	ldr	r0, [r1, #0]
 8009296:	f853 2b04 	ldr.w	r2, [r3], #4
 800929a:	6881      	ldr	r1, [r0, #8]
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	f000 ff21 	bl	800a0e4 <_vfiprintf_r>
 80092a2:	b003      	add	sp, #12
 80092a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a8:	b004      	add	sp, #16
 80092aa:	4770      	bx	lr
 80092ac:	2000002c 	.word	0x2000002c

080092b0 <_puts_r>:
 80092b0:	6a03      	ldr	r3, [r0, #32]
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	6884      	ldr	r4, [r0, #8]
 80092b6:	4605      	mov	r5, r0
 80092b8:	460e      	mov	r6, r1
 80092ba:	b90b      	cbnz	r3, 80092c0 <_puts_r+0x10>
 80092bc:	f7ff ffb0 	bl	8009220 <__sinit>
 80092c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092c2:	07db      	lsls	r3, r3, #31
 80092c4:	d405      	bmi.n	80092d2 <_puts_r+0x22>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	0598      	lsls	r0, r3, #22
 80092ca:	d402      	bmi.n	80092d2 <_puts_r+0x22>
 80092cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ce:	f000 f880 	bl	80093d2 <__retarget_lock_acquire_recursive>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	0719      	lsls	r1, r3, #28
 80092d6:	d502      	bpl.n	80092de <_puts_r+0x2e>
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d135      	bne.n	800934a <_puts_r+0x9a>
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f001 fd75 	bl	800add0 <__swsetup_r>
 80092e6:	b380      	cbz	r0, 800934a <_puts_r+0x9a>
 80092e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80092ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092ee:	07da      	lsls	r2, r3, #31
 80092f0:	d405      	bmi.n	80092fe <_puts_r+0x4e>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	059b      	lsls	r3, r3, #22
 80092f6:	d402      	bmi.n	80092fe <_puts_r+0x4e>
 80092f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092fa:	f000 f86b 	bl	80093d4 <__retarget_lock_release_recursive>
 80092fe:	4628      	mov	r0, r5
 8009300:	bd70      	pop	{r4, r5, r6, pc}
 8009302:	2b00      	cmp	r3, #0
 8009304:	da04      	bge.n	8009310 <_puts_r+0x60>
 8009306:	69a2      	ldr	r2, [r4, #24]
 8009308:	429a      	cmp	r2, r3
 800930a:	dc17      	bgt.n	800933c <_puts_r+0x8c>
 800930c:	290a      	cmp	r1, #10
 800930e:	d015      	beq.n	800933c <_puts_r+0x8c>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	6022      	str	r2, [r4, #0]
 8009316:	7019      	strb	r1, [r3, #0]
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800931e:	3b01      	subs	r3, #1
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	2900      	cmp	r1, #0
 8009324:	d1ed      	bne.n	8009302 <_puts_r+0x52>
 8009326:	2b00      	cmp	r3, #0
 8009328:	da11      	bge.n	800934e <_puts_r+0x9e>
 800932a:	4622      	mov	r2, r4
 800932c:	210a      	movs	r1, #10
 800932e:	4628      	mov	r0, r5
 8009330:	f001 fd0f 	bl	800ad52 <__swbuf_r>
 8009334:	3001      	adds	r0, #1
 8009336:	d0d7      	beq.n	80092e8 <_puts_r+0x38>
 8009338:	250a      	movs	r5, #10
 800933a:	e7d7      	b.n	80092ec <_puts_r+0x3c>
 800933c:	4622      	mov	r2, r4
 800933e:	4628      	mov	r0, r5
 8009340:	f001 fd07 	bl	800ad52 <__swbuf_r>
 8009344:	3001      	adds	r0, #1
 8009346:	d1e7      	bne.n	8009318 <_puts_r+0x68>
 8009348:	e7ce      	b.n	80092e8 <_puts_r+0x38>
 800934a:	3e01      	subs	r6, #1
 800934c:	e7e4      	b.n	8009318 <_puts_r+0x68>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	220a      	movs	r2, #10
 8009356:	701a      	strb	r2, [r3, #0]
 8009358:	e7ee      	b.n	8009338 <_puts_r+0x88>
	...

0800935c <puts>:
 800935c:	4b02      	ldr	r3, [pc, #8]	@ (8009368 <puts+0xc>)
 800935e:	4601      	mov	r1, r0
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	f7ff bfa5 	b.w	80092b0 <_puts_r>
 8009366:	bf00      	nop
 8009368:	2000002c 	.word	0x2000002c

0800936c <memset>:
 800936c:	4402      	add	r2, r0
 800936e:	4603      	mov	r3, r0
 8009370:	4293      	cmp	r3, r2
 8009372:	d100      	bne.n	8009376 <memset+0xa>
 8009374:	4770      	bx	lr
 8009376:	f803 1b01 	strb.w	r1, [r3], #1
 800937a:	e7f9      	b.n	8009370 <memset+0x4>

0800937c <__errno>:
 800937c:	4b01      	ldr	r3, [pc, #4]	@ (8009384 <__errno+0x8>)
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	2000002c 	.word	0x2000002c

08009388 <__libc_init_array>:
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	4d0d      	ldr	r5, [pc, #52]	@ (80093c0 <__libc_init_array+0x38>)
 800938c:	4c0d      	ldr	r4, [pc, #52]	@ (80093c4 <__libc_init_array+0x3c>)
 800938e:	1b64      	subs	r4, r4, r5
 8009390:	10a4      	asrs	r4, r4, #2
 8009392:	2600      	movs	r6, #0
 8009394:	42a6      	cmp	r6, r4
 8009396:	d109      	bne.n	80093ac <__libc_init_array+0x24>
 8009398:	4d0b      	ldr	r5, [pc, #44]	@ (80093c8 <__libc_init_array+0x40>)
 800939a:	4c0c      	ldr	r4, [pc, #48]	@ (80093cc <__libc_init_array+0x44>)
 800939c:	f001 ff4e 	bl	800b23c <_init>
 80093a0:	1b64      	subs	r4, r4, r5
 80093a2:	10a4      	asrs	r4, r4, #2
 80093a4:	2600      	movs	r6, #0
 80093a6:	42a6      	cmp	r6, r4
 80093a8:	d105      	bne.n	80093b6 <__libc_init_array+0x2e>
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
 80093ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b0:	4798      	blx	r3
 80093b2:	3601      	adds	r6, #1
 80093b4:	e7ee      	b.n	8009394 <__libc_init_array+0xc>
 80093b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ba:	4798      	blx	r3
 80093bc:	3601      	adds	r6, #1
 80093be:	e7f2      	b.n	80093a6 <__libc_init_array+0x1e>
 80093c0:	0800b72c 	.word	0x0800b72c
 80093c4:	0800b72c 	.word	0x0800b72c
 80093c8:	0800b72c 	.word	0x0800b72c
 80093cc:	0800b730 	.word	0x0800b730

080093d0 <__retarget_lock_init_recursive>:
 80093d0:	4770      	bx	lr

080093d2 <__retarget_lock_acquire_recursive>:
 80093d2:	4770      	bx	lr

080093d4 <__retarget_lock_release_recursive>:
 80093d4:	4770      	bx	lr
	...

080093d8 <_localeconv_r>:
 80093d8:	4800      	ldr	r0, [pc, #0]	@ (80093dc <_localeconv_r+0x4>)
 80093da:	4770      	bx	lr
 80093dc:	2000016c 	.word	0x2000016c

080093e0 <quorem>:
 80093e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	6903      	ldr	r3, [r0, #16]
 80093e6:	690c      	ldr	r4, [r1, #16]
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	4607      	mov	r7, r0
 80093ec:	db7e      	blt.n	80094ec <quorem+0x10c>
 80093ee:	3c01      	subs	r4, #1
 80093f0:	f101 0814 	add.w	r8, r1, #20
 80093f4:	00a3      	lsls	r3, r4, #2
 80093f6:	f100 0514 	add.w	r5, r0, #20
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009406:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800940a:	3301      	adds	r3, #1
 800940c:	429a      	cmp	r2, r3
 800940e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009412:	fbb2 f6f3 	udiv	r6, r2, r3
 8009416:	d32e      	bcc.n	8009476 <quorem+0x96>
 8009418:	f04f 0a00 	mov.w	sl, #0
 800941c:	46c4      	mov	ip, r8
 800941e:	46ae      	mov	lr, r5
 8009420:	46d3      	mov	fp, sl
 8009422:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009426:	b298      	uxth	r0, r3
 8009428:	fb06 a000 	mla	r0, r6, r0, sl
 800942c:	0c02      	lsrs	r2, r0, #16
 800942e:	0c1b      	lsrs	r3, r3, #16
 8009430:	fb06 2303 	mla	r3, r6, r3, r2
 8009434:	f8de 2000 	ldr.w	r2, [lr]
 8009438:	b280      	uxth	r0, r0
 800943a:	b292      	uxth	r2, r2
 800943c:	1a12      	subs	r2, r2, r0
 800943e:	445a      	add	r2, fp
 8009440:	f8de 0000 	ldr.w	r0, [lr]
 8009444:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009448:	b29b      	uxth	r3, r3
 800944a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800944e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009452:	b292      	uxth	r2, r2
 8009454:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009458:	45e1      	cmp	r9, ip
 800945a:	f84e 2b04 	str.w	r2, [lr], #4
 800945e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009462:	d2de      	bcs.n	8009422 <quorem+0x42>
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	58eb      	ldr	r3, [r5, r3]
 8009468:	b92b      	cbnz	r3, 8009476 <quorem+0x96>
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	3b04      	subs	r3, #4
 800946e:	429d      	cmp	r5, r3
 8009470:	461a      	mov	r2, r3
 8009472:	d32f      	bcc.n	80094d4 <quorem+0xf4>
 8009474:	613c      	str	r4, [r7, #16]
 8009476:	4638      	mov	r0, r7
 8009478:	f001 fb20 	bl	800aabc <__mcmp>
 800947c:	2800      	cmp	r0, #0
 800947e:	db25      	blt.n	80094cc <quorem+0xec>
 8009480:	4629      	mov	r1, r5
 8009482:	2000      	movs	r0, #0
 8009484:	f858 2b04 	ldr.w	r2, [r8], #4
 8009488:	f8d1 c000 	ldr.w	ip, [r1]
 800948c:	fa1f fe82 	uxth.w	lr, r2
 8009490:	fa1f f38c 	uxth.w	r3, ip
 8009494:	eba3 030e 	sub.w	r3, r3, lr
 8009498:	4403      	add	r3, r0
 800949a:	0c12      	lsrs	r2, r2, #16
 800949c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094aa:	45c1      	cmp	r9, r8
 80094ac:	f841 3b04 	str.w	r3, [r1], #4
 80094b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094b4:	d2e6      	bcs.n	8009484 <quorem+0xa4>
 80094b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094be:	b922      	cbnz	r2, 80094ca <quorem+0xea>
 80094c0:	3b04      	subs	r3, #4
 80094c2:	429d      	cmp	r5, r3
 80094c4:	461a      	mov	r2, r3
 80094c6:	d30b      	bcc.n	80094e0 <quorem+0x100>
 80094c8:	613c      	str	r4, [r7, #16]
 80094ca:	3601      	adds	r6, #1
 80094cc:	4630      	mov	r0, r6
 80094ce:	b003      	add	sp, #12
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d4:	6812      	ldr	r2, [r2, #0]
 80094d6:	3b04      	subs	r3, #4
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d1cb      	bne.n	8009474 <quorem+0x94>
 80094dc:	3c01      	subs	r4, #1
 80094de:	e7c6      	b.n	800946e <quorem+0x8e>
 80094e0:	6812      	ldr	r2, [r2, #0]
 80094e2:	3b04      	subs	r3, #4
 80094e4:	2a00      	cmp	r2, #0
 80094e6:	d1ef      	bne.n	80094c8 <quorem+0xe8>
 80094e8:	3c01      	subs	r4, #1
 80094ea:	e7ea      	b.n	80094c2 <quorem+0xe2>
 80094ec:	2000      	movs	r0, #0
 80094ee:	e7ee      	b.n	80094ce <quorem+0xee>

080094f0 <_dtoa_r>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	69c7      	ldr	r7, [r0, #28]
 80094f6:	b097      	sub	sp, #92	@ 0x5c
 80094f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80094fc:	ec55 4b10 	vmov	r4, r5, d0
 8009500:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009502:	9107      	str	r1, [sp, #28]
 8009504:	4681      	mov	r9, r0
 8009506:	920c      	str	r2, [sp, #48]	@ 0x30
 8009508:	9311      	str	r3, [sp, #68]	@ 0x44
 800950a:	b97f      	cbnz	r7, 800952c <_dtoa_r+0x3c>
 800950c:	2010      	movs	r0, #16
 800950e:	f000 ff01 	bl	800a314 <malloc>
 8009512:	4602      	mov	r2, r0
 8009514:	f8c9 001c 	str.w	r0, [r9, #28]
 8009518:	b920      	cbnz	r0, 8009524 <_dtoa_r+0x34>
 800951a:	4ba9      	ldr	r3, [pc, #676]	@ (80097c0 <_dtoa_r+0x2d0>)
 800951c:	21ef      	movs	r1, #239	@ 0xef
 800951e:	48a9      	ldr	r0, [pc, #676]	@ (80097c4 <_dtoa_r+0x2d4>)
 8009520:	f001 fd94 	bl	800b04c <__assert_func>
 8009524:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009528:	6007      	str	r7, [r0, #0]
 800952a:	60c7      	str	r7, [r0, #12]
 800952c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009530:	6819      	ldr	r1, [r3, #0]
 8009532:	b159      	cbz	r1, 800954c <_dtoa_r+0x5c>
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	604a      	str	r2, [r1, #4]
 8009538:	2301      	movs	r3, #1
 800953a:	4093      	lsls	r3, r2
 800953c:	608b      	str	r3, [r1, #8]
 800953e:	4648      	mov	r0, r9
 8009540:	f001 f88a 	bl	800a658 <_Bfree>
 8009544:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	1e2b      	subs	r3, r5, #0
 800954e:	bfb9      	ittee	lt
 8009550:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009554:	9305      	strlt	r3, [sp, #20]
 8009556:	2300      	movge	r3, #0
 8009558:	6033      	strge	r3, [r6, #0]
 800955a:	9f05      	ldr	r7, [sp, #20]
 800955c:	4b9a      	ldr	r3, [pc, #616]	@ (80097c8 <_dtoa_r+0x2d8>)
 800955e:	bfbc      	itt	lt
 8009560:	2201      	movlt	r2, #1
 8009562:	6032      	strlt	r2, [r6, #0]
 8009564:	43bb      	bics	r3, r7
 8009566:	d112      	bne.n	800958e <_dtoa_r+0x9e>
 8009568:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800956a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009574:	4323      	orrs	r3, r4
 8009576:	f000 855a 	beq.w	800a02e <_dtoa_r+0xb3e>
 800957a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800957c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80097dc <_dtoa_r+0x2ec>
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 855c 	beq.w	800a03e <_dtoa_r+0xb4e>
 8009586:	f10a 0303 	add.w	r3, sl, #3
 800958a:	f000 bd56 	b.w	800a03a <_dtoa_r+0xb4a>
 800958e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009592:	2200      	movs	r2, #0
 8009594:	ec51 0b17 	vmov	r0, r1, d7
 8009598:	2300      	movs	r3, #0
 800959a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800959e:	f7f7 fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80095a2:	4680      	mov	r8, r0
 80095a4:	b158      	cbz	r0, 80095be <_dtoa_r+0xce>
 80095a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095a8:	2301      	movs	r3, #1
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095ae:	b113      	cbz	r3, 80095b6 <_dtoa_r+0xc6>
 80095b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095b2:	4b86      	ldr	r3, [pc, #536]	@ (80097cc <_dtoa_r+0x2dc>)
 80095b4:	6013      	str	r3, [r2, #0]
 80095b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80097e0 <_dtoa_r+0x2f0>
 80095ba:	f000 bd40 	b.w	800a03e <_dtoa_r+0xb4e>
 80095be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80095c2:	aa14      	add	r2, sp, #80	@ 0x50
 80095c4:	a915      	add	r1, sp, #84	@ 0x54
 80095c6:	4648      	mov	r0, r9
 80095c8:	f001 fb28 	bl	800ac1c <__d2b>
 80095cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80095d0:	9002      	str	r0, [sp, #8]
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	d078      	beq.n	80096c8 <_dtoa_r+0x1d8>
 80095d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80095dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80095e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80095f0:	4619      	mov	r1, r3
 80095f2:	2200      	movs	r2, #0
 80095f4:	4b76      	ldr	r3, [pc, #472]	@ (80097d0 <_dtoa_r+0x2e0>)
 80095f6:	f7f6 fe47 	bl	8000288 <__aeabi_dsub>
 80095fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80097a8 <_dtoa_r+0x2b8>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f6 fffa 	bl	80005f8 <__aeabi_dmul>
 8009604:	a36a      	add	r3, pc, #424	@ (adr r3, 80097b0 <_dtoa_r+0x2c0>)
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f7f6 fe3f 	bl	800028c <__adddf3>
 800960e:	4604      	mov	r4, r0
 8009610:	4630      	mov	r0, r6
 8009612:	460d      	mov	r5, r1
 8009614:	f7f6 ff86 	bl	8000524 <__aeabi_i2d>
 8009618:	a367      	add	r3, pc, #412	@ (adr r3, 80097b8 <_dtoa_r+0x2c8>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f6 ffeb 	bl	80005f8 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7f6 fe2f 	bl	800028c <__adddf3>
 800962e:	4604      	mov	r4, r0
 8009630:	460d      	mov	r5, r1
 8009632:	f7f7 fa91 	bl	8000b58 <__aeabi_d2iz>
 8009636:	2200      	movs	r2, #0
 8009638:	4607      	mov	r7, r0
 800963a:	2300      	movs	r3, #0
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	f7f7 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8009644:	b140      	cbz	r0, 8009658 <_dtoa_r+0x168>
 8009646:	4638      	mov	r0, r7
 8009648:	f7f6 ff6c 	bl	8000524 <__aeabi_i2d>
 800964c:	4622      	mov	r2, r4
 800964e:	462b      	mov	r3, r5
 8009650:	f7f7 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009654:	b900      	cbnz	r0, 8009658 <_dtoa_r+0x168>
 8009656:	3f01      	subs	r7, #1
 8009658:	2f16      	cmp	r7, #22
 800965a:	d852      	bhi.n	8009702 <_dtoa_r+0x212>
 800965c:	4b5d      	ldr	r3, [pc, #372]	@ (80097d4 <_dtoa_r+0x2e4>)
 800965e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800966a:	f7f7 fa37 	bl	8000adc <__aeabi_dcmplt>
 800966e:	2800      	cmp	r0, #0
 8009670:	d049      	beq.n	8009706 <_dtoa_r+0x216>
 8009672:	3f01      	subs	r7, #1
 8009674:	2300      	movs	r3, #0
 8009676:	9310      	str	r3, [sp, #64]	@ 0x40
 8009678:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800967a:	1b9b      	subs	r3, r3, r6
 800967c:	1e5a      	subs	r2, r3, #1
 800967e:	bf45      	ittet	mi
 8009680:	f1c3 0301 	rsbmi	r3, r3, #1
 8009684:	9300      	strmi	r3, [sp, #0]
 8009686:	2300      	movpl	r3, #0
 8009688:	2300      	movmi	r3, #0
 800968a:	9206      	str	r2, [sp, #24]
 800968c:	bf54      	ite	pl
 800968e:	9300      	strpl	r3, [sp, #0]
 8009690:	9306      	strmi	r3, [sp, #24]
 8009692:	2f00      	cmp	r7, #0
 8009694:	db39      	blt.n	800970a <_dtoa_r+0x21a>
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	970d      	str	r7, [sp, #52]	@ 0x34
 800969a:	443b      	add	r3, r7
 800969c:	9306      	str	r3, [sp, #24]
 800969e:	2300      	movs	r3, #0
 80096a0:	9308      	str	r3, [sp, #32]
 80096a2:	9b07      	ldr	r3, [sp, #28]
 80096a4:	2b09      	cmp	r3, #9
 80096a6:	d863      	bhi.n	8009770 <_dtoa_r+0x280>
 80096a8:	2b05      	cmp	r3, #5
 80096aa:	bfc4      	itt	gt
 80096ac:	3b04      	subgt	r3, #4
 80096ae:	9307      	strgt	r3, [sp, #28]
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	f1a3 0302 	sub.w	r3, r3, #2
 80096b6:	bfcc      	ite	gt
 80096b8:	2400      	movgt	r4, #0
 80096ba:	2401      	movle	r4, #1
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d863      	bhi.n	8009788 <_dtoa_r+0x298>
 80096c0:	e8df f003 	tbb	[pc, r3]
 80096c4:	2b375452 	.word	0x2b375452
 80096c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80096cc:	441e      	add	r6, r3
 80096ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	bfc1      	itttt	gt
 80096d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80096da:	409f      	lslgt	r7, r3
 80096dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80096e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80096e4:	bfd6      	itet	le
 80096e6:	f1c3 0320 	rsble	r3, r3, #32
 80096ea:	ea47 0003 	orrgt.w	r0, r7, r3
 80096ee:	fa04 f003 	lslle.w	r0, r4, r3
 80096f2:	f7f6 ff07 	bl	8000504 <__aeabi_ui2d>
 80096f6:	2201      	movs	r2, #1
 80096f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096fc:	3e01      	subs	r6, #1
 80096fe:	9212      	str	r2, [sp, #72]	@ 0x48
 8009700:	e776      	b.n	80095f0 <_dtoa_r+0x100>
 8009702:	2301      	movs	r3, #1
 8009704:	e7b7      	b.n	8009676 <_dtoa_r+0x186>
 8009706:	9010      	str	r0, [sp, #64]	@ 0x40
 8009708:	e7b6      	b.n	8009678 <_dtoa_r+0x188>
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	1bdb      	subs	r3, r3, r7
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	427b      	negs	r3, r7
 8009712:	9308      	str	r3, [sp, #32]
 8009714:	2300      	movs	r3, #0
 8009716:	930d      	str	r3, [sp, #52]	@ 0x34
 8009718:	e7c3      	b.n	80096a2 <_dtoa_r+0x1b2>
 800971a:	2301      	movs	r3, #1
 800971c:	9309      	str	r3, [sp, #36]	@ 0x24
 800971e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009720:	eb07 0b03 	add.w	fp, r7, r3
 8009724:	f10b 0301 	add.w	r3, fp, #1
 8009728:	2b01      	cmp	r3, #1
 800972a:	9303      	str	r3, [sp, #12]
 800972c:	bfb8      	it	lt
 800972e:	2301      	movlt	r3, #1
 8009730:	e006      	b.n	8009740 <_dtoa_r+0x250>
 8009732:	2301      	movs	r3, #1
 8009734:	9309      	str	r3, [sp, #36]	@ 0x24
 8009736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009738:	2b00      	cmp	r3, #0
 800973a:	dd28      	ble.n	800978e <_dtoa_r+0x29e>
 800973c:	469b      	mov	fp, r3
 800973e:	9303      	str	r3, [sp, #12]
 8009740:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009744:	2100      	movs	r1, #0
 8009746:	2204      	movs	r2, #4
 8009748:	f102 0514 	add.w	r5, r2, #20
 800974c:	429d      	cmp	r5, r3
 800974e:	d926      	bls.n	800979e <_dtoa_r+0x2ae>
 8009750:	6041      	str	r1, [r0, #4]
 8009752:	4648      	mov	r0, r9
 8009754:	f000 ff40 	bl	800a5d8 <_Balloc>
 8009758:	4682      	mov	sl, r0
 800975a:	2800      	cmp	r0, #0
 800975c:	d142      	bne.n	80097e4 <_dtoa_r+0x2f4>
 800975e:	4b1e      	ldr	r3, [pc, #120]	@ (80097d8 <_dtoa_r+0x2e8>)
 8009760:	4602      	mov	r2, r0
 8009762:	f240 11af 	movw	r1, #431	@ 0x1af
 8009766:	e6da      	b.n	800951e <_dtoa_r+0x2e>
 8009768:	2300      	movs	r3, #0
 800976a:	e7e3      	b.n	8009734 <_dtoa_r+0x244>
 800976c:	2300      	movs	r3, #0
 800976e:	e7d5      	b.n	800971c <_dtoa_r+0x22c>
 8009770:	2401      	movs	r4, #1
 8009772:	2300      	movs	r3, #0
 8009774:	9307      	str	r3, [sp, #28]
 8009776:	9409      	str	r4, [sp, #36]	@ 0x24
 8009778:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800977c:	2200      	movs	r2, #0
 800977e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009782:	2312      	movs	r3, #18
 8009784:	920c      	str	r2, [sp, #48]	@ 0x30
 8009786:	e7db      	b.n	8009740 <_dtoa_r+0x250>
 8009788:	2301      	movs	r3, #1
 800978a:	9309      	str	r3, [sp, #36]	@ 0x24
 800978c:	e7f4      	b.n	8009778 <_dtoa_r+0x288>
 800978e:	f04f 0b01 	mov.w	fp, #1
 8009792:	f8cd b00c 	str.w	fp, [sp, #12]
 8009796:	465b      	mov	r3, fp
 8009798:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800979c:	e7d0      	b.n	8009740 <_dtoa_r+0x250>
 800979e:	3101      	adds	r1, #1
 80097a0:	0052      	lsls	r2, r2, #1
 80097a2:	e7d1      	b.n	8009748 <_dtoa_r+0x258>
 80097a4:	f3af 8000 	nop.w
 80097a8:	636f4361 	.word	0x636f4361
 80097ac:	3fd287a7 	.word	0x3fd287a7
 80097b0:	8b60c8b3 	.word	0x8b60c8b3
 80097b4:	3fc68a28 	.word	0x3fc68a28
 80097b8:	509f79fb 	.word	0x509f79fb
 80097bc:	3fd34413 	.word	0x3fd34413
 80097c0:	0800b3ed 	.word	0x0800b3ed
 80097c4:	0800b404 	.word	0x0800b404
 80097c8:	7ff00000 	.word	0x7ff00000
 80097cc:	0800b3bd 	.word	0x0800b3bd
 80097d0:	3ff80000 	.word	0x3ff80000
 80097d4:	0800b558 	.word	0x0800b558
 80097d8:	0800b45c 	.word	0x0800b45c
 80097dc:	0800b3e9 	.word	0x0800b3e9
 80097e0:	0800b3bc 	.word	0x0800b3bc
 80097e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80097e8:	6018      	str	r0, [r3, #0]
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	2b0e      	cmp	r3, #14
 80097ee:	f200 80a1 	bhi.w	8009934 <_dtoa_r+0x444>
 80097f2:	2c00      	cmp	r4, #0
 80097f4:	f000 809e 	beq.w	8009934 <_dtoa_r+0x444>
 80097f8:	2f00      	cmp	r7, #0
 80097fa:	dd33      	ble.n	8009864 <_dtoa_r+0x374>
 80097fc:	4b9c      	ldr	r3, [pc, #624]	@ (8009a70 <_dtoa_r+0x580>)
 80097fe:	f007 020f 	and.w	r2, r7, #15
 8009802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009806:	ed93 7b00 	vldr	d7, [r3]
 800980a:	05f8      	lsls	r0, r7, #23
 800980c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009810:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009814:	d516      	bpl.n	8009844 <_dtoa_r+0x354>
 8009816:	4b97      	ldr	r3, [pc, #604]	@ (8009a74 <_dtoa_r+0x584>)
 8009818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800981c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009820:	f7f7 f814 	bl	800084c <__aeabi_ddiv>
 8009824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009828:	f004 040f 	and.w	r4, r4, #15
 800982c:	2603      	movs	r6, #3
 800982e:	4d91      	ldr	r5, [pc, #580]	@ (8009a74 <_dtoa_r+0x584>)
 8009830:	b954      	cbnz	r4, 8009848 <_dtoa_r+0x358>
 8009832:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800983a:	f7f7 f807 	bl	800084c <__aeabi_ddiv>
 800983e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009842:	e028      	b.n	8009896 <_dtoa_r+0x3a6>
 8009844:	2602      	movs	r6, #2
 8009846:	e7f2      	b.n	800982e <_dtoa_r+0x33e>
 8009848:	07e1      	lsls	r1, r4, #31
 800984a:	d508      	bpl.n	800985e <_dtoa_r+0x36e>
 800984c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009850:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009854:	f7f6 fed0 	bl	80005f8 <__aeabi_dmul>
 8009858:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800985c:	3601      	adds	r6, #1
 800985e:	1064      	asrs	r4, r4, #1
 8009860:	3508      	adds	r5, #8
 8009862:	e7e5      	b.n	8009830 <_dtoa_r+0x340>
 8009864:	f000 80af 	beq.w	80099c6 <_dtoa_r+0x4d6>
 8009868:	427c      	negs	r4, r7
 800986a:	4b81      	ldr	r3, [pc, #516]	@ (8009a70 <_dtoa_r+0x580>)
 800986c:	4d81      	ldr	r5, [pc, #516]	@ (8009a74 <_dtoa_r+0x584>)
 800986e:	f004 020f 	and.w	r2, r4, #15
 8009872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800987e:	f7f6 febb 	bl	80005f8 <__aeabi_dmul>
 8009882:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009886:	1124      	asrs	r4, r4, #4
 8009888:	2300      	movs	r3, #0
 800988a:	2602      	movs	r6, #2
 800988c:	2c00      	cmp	r4, #0
 800988e:	f040 808f 	bne.w	80099b0 <_dtoa_r+0x4c0>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1d3      	bne.n	800983e <_dtoa_r+0x34e>
 8009896:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009898:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8094 	beq.w	80099ca <_dtoa_r+0x4da>
 80098a2:	4b75      	ldr	r3, [pc, #468]	@ (8009a78 <_dtoa_r+0x588>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f7 f917 	bl	8000adc <__aeabi_dcmplt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f000 808b 	beq.w	80099ca <_dtoa_r+0x4da>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8087 	beq.w	80099ca <_dtoa_r+0x4da>
 80098bc:	f1bb 0f00 	cmp.w	fp, #0
 80098c0:	dd34      	ble.n	800992c <_dtoa_r+0x43c>
 80098c2:	4620      	mov	r0, r4
 80098c4:	4b6d      	ldr	r3, [pc, #436]	@ (8009a7c <_dtoa_r+0x58c>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f6 fe95 	bl	80005f8 <__aeabi_dmul>
 80098ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098d2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80098d6:	3601      	adds	r6, #1
 80098d8:	465c      	mov	r4, fp
 80098da:	4630      	mov	r0, r6
 80098dc:	f7f6 fe22 	bl	8000524 <__aeabi_i2d>
 80098e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e4:	f7f6 fe88 	bl	80005f8 <__aeabi_dmul>
 80098e8:	4b65      	ldr	r3, [pc, #404]	@ (8009a80 <_dtoa_r+0x590>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	f7f6 fcce 	bl	800028c <__adddf3>
 80098f0:	4605      	mov	r5, r0
 80098f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80098f6:	2c00      	cmp	r4, #0
 80098f8:	d16a      	bne.n	80099d0 <_dtoa_r+0x4e0>
 80098fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098fe:	4b61      	ldr	r3, [pc, #388]	@ (8009a84 <_dtoa_r+0x594>)
 8009900:	2200      	movs	r2, #0
 8009902:	f7f6 fcc1 	bl	8000288 <__aeabi_dsub>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800990e:	462a      	mov	r2, r5
 8009910:	4633      	mov	r3, r6
 8009912:	f7f7 f901 	bl	8000b18 <__aeabi_dcmpgt>
 8009916:	2800      	cmp	r0, #0
 8009918:	f040 8298 	bne.w	8009e4c <_dtoa_r+0x95c>
 800991c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009920:	462a      	mov	r2, r5
 8009922:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009926:	f7f7 f8d9 	bl	8000adc <__aeabi_dcmplt>
 800992a:	bb38      	cbnz	r0, 800997c <_dtoa_r+0x48c>
 800992c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009930:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009934:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009936:	2b00      	cmp	r3, #0
 8009938:	f2c0 8157 	blt.w	8009bea <_dtoa_r+0x6fa>
 800993c:	2f0e      	cmp	r7, #14
 800993e:	f300 8154 	bgt.w	8009bea <_dtoa_r+0x6fa>
 8009942:	4b4b      	ldr	r3, [pc, #300]	@ (8009a70 <_dtoa_r+0x580>)
 8009944:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009948:	ed93 7b00 	vldr	d7, [r3]
 800994c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800994e:	2b00      	cmp	r3, #0
 8009950:	ed8d 7b00 	vstr	d7, [sp]
 8009954:	f280 80e5 	bge.w	8009b22 <_dtoa_r+0x632>
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	f300 80e1 	bgt.w	8009b22 <_dtoa_r+0x632>
 8009960:	d10c      	bne.n	800997c <_dtoa_r+0x48c>
 8009962:	4b48      	ldr	r3, [pc, #288]	@ (8009a84 <_dtoa_r+0x594>)
 8009964:	2200      	movs	r2, #0
 8009966:	ec51 0b17 	vmov	r0, r1, d7
 800996a:	f7f6 fe45 	bl	80005f8 <__aeabi_dmul>
 800996e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009972:	f7f7 f8c7 	bl	8000b04 <__aeabi_dcmpge>
 8009976:	2800      	cmp	r0, #0
 8009978:	f000 8266 	beq.w	8009e48 <_dtoa_r+0x958>
 800997c:	2400      	movs	r4, #0
 800997e:	4625      	mov	r5, r4
 8009980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009982:	4656      	mov	r6, sl
 8009984:	ea6f 0803 	mvn.w	r8, r3
 8009988:	2700      	movs	r7, #0
 800998a:	4621      	mov	r1, r4
 800998c:	4648      	mov	r0, r9
 800998e:	f000 fe63 	bl	800a658 <_Bfree>
 8009992:	2d00      	cmp	r5, #0
 8009994:	f000 80bd 	beq.w	8009b12 <_dtoa_r+0x622>
 8009998:	b12f      	cbz	r7, 80099a6 <_dtoa_r+0x4b6>
 800999a:	42af      	cmp	r7, r5
 800999c:	d003      	beq.n	80099a6 <_dtoa_r+0x4b6>
 800999e:	4639      	mov	r1, r7
 80099a0:	4648      	mov	r0, r9
 80099a2:	f000 fe59 	bl	800a658 <_Bfree>
 80099a6:	4629      	mov	r1, r5
 80099a8:	4648      	mov	r0, r9
 80099aa:	f000 fe55 	bl	800a658 <_Bfree>
 80099ae:	e0b0      	b.n	8009b12 <_dtoa_r+0x622>
 80099b0:	07e2      	lsls	r2, r4, #31
 80099b2:	d505      	bpl.n	80099c0 <_dtoa_r+0x4d0>
 80099b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099b8:	f7f6 fe1e 	bl	80005f8 <__aeabi_dmul>
 80099bc:	3601      	adds	r6, #1
 80099be:	2301      	movs	r3, #1
 80099c0:	1064      	asrs	r4, r4, #1
 80099c2:	3508      	adds	r5, #8
 80099c4:	e762      	b.n	800988c <_dtoa_r+0x39c>
 80099c6:	2602      	movs	r6, #2
 80099c8:	e765      	b.n	8009896 <_dtoa_r+0x3a6>
 80099ca:	9c03      	ldr	r4, [sp, #12]
 80099cc:	46b8      	mov	r8, r7
 80099ce:	e784      	b.n	80098da <_dtoa_r+0x3ea>
 80099d0:	4b27      	ldr	r3, [pc, #156]	@ (8009a70 <_dtoa_r+0x580>)
 80099d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099dc:	4454      	add	r4, sl
 80099de:	2900      	cmp	r1, #0
 80099e0:	d054      	beq.n	8009a8c <_dtoa_r+0x59c>
 80099e2:	4929      	ldr	r1, [pc, #164]	@ (8009a88 <_dtoa_r+0x598>)
 80099e4:	2000      	movs	r0, #0
 80099e6:	f7f6 ff31 	bl	800084c <__aeabi_ddiv>
 80099ea:	4633      	mov	r3, r6
 80099ec:	462a      	mov	r2, r5
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099f6:	4656      	mov	r6, sl
 80099f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099fc:	f7f7 f8ac 	bl	8000b58 <__aeabi_d2iz>
 8009a00:	4605      	mov	r5, r0
 8009a02:	f7f6 fd8f 	bl	8000524 <__aeabi_i2d>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a0e:	f7f6 fc3b 	bl	8000288 <__aeabi_dsub>
 8009a12:	3530      	adds	r5, #48	@ 0x30
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a1c:	f806 5b01 	strb.w	r5, [r6], #1
 8009a20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a24:	f7f7 f85a 	bl	8000adc <__aeabi_dcmplt>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d172      	bne.n	8009b12 <_dtoa_r+0x622>
 8009a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a30:	4911      	ldr	r1, [pc, #68]	@ (8009a78 <_dtoa_r+0x588>)
 8009a32:	2000      	movs	r0, #0
 8009a34:	f7f6 fc28 	bl	8000288 <__aeabi_dsub>
 8009a38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a3c:	f7f7 f84e 	bl	8000adc <__aeabi_dcmplt>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f040 80b4 	bne.w	8009bae <_dtoa_r+0x6be>
 8009a46:	42a6      	cmp	r6, r4
 8009a48:	f43f af70 	beq.w	800992c <_dtoa_r+0x43c>
 8009a4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a50:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <_dtoa_r+0x58c>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4b08      	ldr	r3, [pc, #32]	@ (8009a7c <_dtoa_r+0x58c>)
 8009a5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a5e:	2200      	movs	r2, #0
 8009a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a64:	f7f6 fdc8 	bl	80005f8 <__aeabi_dmul>
 8009a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a6c:	e7c4      	b.n	80099f8 <_dtoa_r+0x508>
 8009a6e:	bf00      	nop
 8009a70:	0800b558 	.word	0x0800b558
 8009a74:	0800b530 	.word	0x0800b530
 8009a78:	3ff00000 	.word	0x3ff00000
 8009a7c:	40240000 	.word	0x40240000
 8009a80:	401c0000 	.word	0x401c0000
 8009a84:	40140000 	.word	0x40140000
 8009a88:	3fe00000 	.word	0x3fe00000
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f7f6 fdb2 	bl	80005f8 <__aeabi_dmul>
 8009a94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a98:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009a9a:	4656      	mov	r6, sl
 8009a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aa0:	f7f7 f85a 	bl	8000b58 <__aeabi_d2iz>
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	f7f6 fd3d 	bl	8000524 <__aeabi_i2d>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ab2:	f7f6 fbe9 	bl	8000288 <__aeabi_dsub>
 8009ab6:	3530      	adds	r5, #48	@ 0x30
 8009ab8:	f806 5b01 	strb.w	r5, [r6], #1
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	42a6      	cmp	r6, r4
 8009ac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ac6:	f04f 0200 	mov.w	r2, #0
 8009aca:	d124      	bne.n	8009b16 <_dtoa_r+0x626>
 8009acc:	4baf      	ldr	r3, [pc, #700]	@ (8009d8c <_dtoa_r+0x89c>)
 8009ace:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ad2:	f7f6 fbdb 	bl	800028c <__adddf3>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ade:	f7f7 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d163      	bne.n	8009bae <_dtoa_r+0x6be>
 8009ae6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aea:	49a8      	ldr	r1, [pc, #672]	@ (8009d8c <_dtoa_r+0x89c>)
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7f6 fbcb 	bl	8000288 <__aeabi_dsub>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009afa:	f7f6 ffef 	bl	8000adc <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f af14 	beq.w	800992c <_dtoa_r+0x43c>
 8009b04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009b06:	1e73      	subs	r3, r6, #1
 8009b08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b0e:	2b30      	cmp	r3, #48	@ 0x30
 8009b10:	d0f8      	beq.n	8009b04 <_dtoa_r+0x614>
 8009b12:	4647      	mov	r7, r8
 8009b14:	e03b      	b.n	8009b8e <_dtoa_r+0x69e>
 8009b16:	4b9e      	ldr	r3, [pc, #632]	@ (8009d90 <_dtoa_r+0x8a0>)
 8009b18:	f7f6 fd6e 	bl	80005f8 <__aeabi_dmul>
 8009b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b20:	e7bc      	b.n	8009a9c <_dtoa_r+0x5ac>
 8009b22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009b26:	4656      	mov	r6, sl
 8009b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f6 fe8c 	bl	800084c <__aeabi_ddiv>
 8009b34:	f7f7 f810 	bl	8000b58 <__aeabi_d2iz>
 8009b38:	4680      	mov	r8, r0
 8009b3a:	f7f6 fcf3 	bl	8000524 <__aeabi_i2d>
 8009b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b42:	f7f6 fd59 	bl	80005f8 <__aeabi_dmul>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b52:	f7f6 fb99 	bl	8000288 <__aeabi_dsub>
 8009b56:	f806 4b01 	strb.w	r4, [r6], #1
 8009b5a:	9d03      	ldr	r5, [sp, #12]
 8009b5c:	eba6 040a 	sub.w	r4, r6, sl
 8009b60:	42a5      	cmp	r5, r4
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	d133      	bne.n	8009bd0 <_dtoa_r+0x6e0>
 8009b68:	f7f6 fb90 	bl	800028c <__adddf3>
 8009b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	f7f6 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 8009b78:	b9c0      	cbnz	r0, 8009bac <_dtoa_r+0x6bc>
 8009b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	4629      	mov	r1, r5
 8009b82:	f7f6 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b86:	b110      	cbz	r0, 8009b8e <_dtoa_r+0x69e>
 8009b88:	f018 0f01 	tst.w	r8, #1
 8009b8c:	d10e      	bne.n	8009bac <_dtoa_r+0x6bc>
 8009b8e:	9902      	ldr	r1, [sp, #8]
 8009b90:	4648      	mov	r0, r9
 8009b92:	f000 fd61 	bl	800a658 <_Bfree>
 8009b96:	2300      	movs	r3, #0
 8009b98:	7033      	strb	r3, [r6, #0]
 8009b9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b9c:	3701      	adds	r7, #1
 8009b9e:	601f      	str	r7, [r3, #0]
 8009ba0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 824b 	beq.w	800a03e <_dtoa_r+0xb4e>
 8009ba8:	601e      	str	r6, [r3, #0]
 8009baa:	e248      	b.n	800a03e <_dtoa_r+0xb4e>
 8009bac:	46b8      	mov	r8, r7
 8009bae:	4633      	mov	r3, r6
 8009bb0:	461e      	mov	r6, r3
 8009bb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bb6:	2a39      	cmp	r2, #57	@ 0x39
 8009bb8:	d106      	bne.n	8009bc8 <_dtoa_r+0x6d8>
 8009bba:	459a      	cmp	sl, r3
 8009bbc:	d1f8      	bne.n	8009bb0 <_dtoa_r+0x6c0>
 8009bbe:	2230      	movs	r2, #48	@ 0x30
 8009bc0:	f108 0801 	add.w	r8, r8, #1
 8009bc4:	f88a 2000 	strb.w	r2, [sl]
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	3201      	adds	r2, #1
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e7a0      	b.n	8009b12 <_dtoa_r+0x622>
 8009bd0:	4b6f      	ldr	r3, [pc, #444]	@ (8009d90 <_dtoa_r+0x8a0>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f7f6 fd10 	bl	80005f8 <__aeabi_dmul>
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4604      	mov	r4, r0
 8009bde:	460d      	mov	r5, r1
 8009be0:	f7f6 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d09f      	beq.n	8009b28 <_dtoa_r+0x638>
 8009be8:	e7d1      	b.n	8009b8e <_dtoa_r+0x69e>
 8009bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bec:	2a00      	cmp	r2, #0
 8009bee:	f000 80ea 	beq.w	8009dc6 <_dtoa_r+0x8d6>
 8009bf2:	9a07      	ldr	r2, [sp, #28]
 8009bf4:	2a01      	cmp	r2, #1
 8009bf6:	f300 80cd 	bgt.w	8009d94 <_dtoa_r+0x8a4>
 8009bfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	f000 80c1 	beq.w	8009d84 <_dtoa_r+0x894>
 8009c02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c06:	9c08      	ldr	r4, [sp, #32]
 8009c08:	9e00      	ldr	r6, [sp, #0]
 8009c0a:	9a00      	ldr	r2, [sp, #0]
 8009c0c:	441a      	add	r2, r3
 8009c0e:	9200      	str	r2, [sp, #0]
 8009c10:	9a06      	ldr	r2, [sp, #24]
 8009c12:	2101      	movs	r1, #1
 8009c14:	441a      	add	r2, r3
 8009c16:	4648      	mov	r0, r9
 8009c18:	9206      	str	r2, [sp, #24]
 8009c1a:	f000 fdd1 	bl	800a7c0 <__i2b>
 8009c1e:	4605      	mov	r5, r0
 8009c20:	b166      	cbz	r6, 8009c3c <_dtoa_r+0x74c>
 8009c22:	9b06      	ldr	r3, [sp, #24]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dd09      	ble.n	8009c3c <_dtoa_r+0x74c>
 8009c28:	42b3      	cmp	r3, r6
 8009c2a:	9a00      	ldr	r2, [sp, #0]
 8009c2c:	bfa8      	it	ge
 8009c2e:	4633      	movge	r3, r6
 8009c30:	1ad2      	subs	r2, r2, r3
 8009c32:	9200      	str	r2, [sp, #0]
 8009c34:	9a06      	ldr	r2, [sp, #24]
 8009c36:	1af6      	subs	r6, r6, r3
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	9306      	str	r3, [sp, #24]
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	b30b      	cbz	r3, 8009c84 <_dtoa_r+0x794>
 8009c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 80c6 	beq.w	8009dd4 <_dtoa_r+0x8e4>
 8009c48:	2c00      	cmp	r4, #0
 8009c4a:	f000 80c0 	beq.w	8009dce <_dtoa_r+0x8de>
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4622      	mov	r2, r4
 8009c52:	4648      	mov	r0, r9
 8009c54:	f000 fe6c 	bl	800a930 <__pow5mult>
 8009c58:	9a02      	ldr	r2, [sp, #8]
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	4648      	mov	r0, r9
 8009c60:	f000 fdc4 	bl	800a7ec <__multiply>
 8009c64:	9902      	ldr	r1, [sp, #8]
 8009c66:	4680      	mov	r8, r0
 8009c68:	4648      	mov	r0, r9
 8009c6a:	f000 fcf5 	bl	800a658 <_Bfree>
 8009c6e:	9b08      	ldr	r3, [sp, #32]
 8009c70:	1b1b      	subs	r3, r3, r4
 8009c72:	9308      	str	r3, [sp, #32]
 8009c74:	f000 80b1 	beq.w	8009dda <_dtoa_r+0x8ea>
 8009c78:	9a08      	ldr	r2, [sp, #32]
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	4648      	mov	r0, r9
 8009c7e:	f000 fe57 	bl	800a930 <__pow5mult>
 8009c82:	9002      	str	r0, [sp, #8]
 8009c84:	2101      	movs	r1, #1
 8009c86:	4648      	mov	r0, r9
 8009c88:	f000 fd9a 	bl	800a7c0 <__i2b>
 8009c8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c8e:	4604      	mov	r4, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 81d8 	beq.w	800a046 <_dtoa_r+0xb56>
 8009c96:	461a      	mov	r2, r3
 8009c98:	4601      	mov	r1, r0
 8009c9a:	4648      	mov	r0, r9
 8009c9c:	f000 fe48 	bl	800a930 <__pow5mult>
 8009ca0:	9b07      	ldr	r3, [sp, #28]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	f300 809f 	bgt.w	8009de8 <_dtoa_r+0x8f8>
 8009caa:	9b04      	ldr	r3, [sp, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f040 8097 	bne.w	8009de0 <_dtoa_r+0x8f0>
 8009cb2:	9b05      	ldr	r3, [sp, #20]
 8009cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f040 8093 	bne.w	8009de4 <_dtoa_r+0x8f4>
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009cc4:	0d1b      	lsrs	r3, r3, #20
 8009cc6:	051b      	lsls	r3, r3, #20
 8009cc8:	b133      	cbz	r3, 8009cd8 <_dtoa_r+0x7e8>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	9306      	str	r3, [sp, #24]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 81b8 	beq.w	800a052 <_dtoa_r+0xb62>
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ce8:	6918      	ldr	r0, [r3, #16]
 8009cea:	f000 fd1d 	bl	800a728 <__hi0bits>
 8009cee:	f1c0 0020 	rsb	r0, r0, #32
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	4418      	add	r0, r3
 8009cf6:	f010 001f 	ands.w	r0, r0, #31
 8009cfa:	f000 8082 	beq.w	8009e02 <_dtoa_r+0x912>
 8009cfe:	f1c0 0320 	rsb	r3, r0, #32
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	dd73      	ble.n	8009dee <_dtoa_r+0x8fe>
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	f1c0 001c 	rsb	r0, r0, #28
 8009d0c:	4403      	add	r3, r0
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	9b06      	ldr	r3, [sp, #24]
 8009d12:	4403      	add	r3, r0
 8009d14:	4406      	add	r6, r0
 8009d16:	9306      	str	r3, [sp, #24]
 8009d18:	9b00      	ldr	r3, [sp, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	dd05      	ble.n	8009d2a <_dtoa_r+0x83a>
 8009d1e:	9902      	ldr	r1, [sp, #8]
 8009d20:	461a      	mov	r2, r3
 8009d22:	4648      	mov	r0, r9
 8009d24:	f000 fe5e 	bl	800a9e4 <__lshift>
 8009d28:	9002      	str	r0, [sp, #8]
 8009d2a:	9b06      	ldr	r3, [sp, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dd05      	ble.n	8009d3c <_dtoa_r+0x84c>
 8009d30:	4621      	mov	r1, r4
 8009d32:	461a      	mov	r2, r3
 8009d34:	4648      	mov	r0, r9
 8009d36:	f000 fe55 	bl	800a9e4 <__lshift>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d061      	beq.n	8009e06 <_dtoa_r+0x916>
 8009d42:	9802      	ldr	r0, [sp, #8]
 8009d44:	4621      	mov	r1, r4
 8009d46:	f000 feb9 	bl	800aabc <__mcmp>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	da5b      	bge.n	8009e06 <_dtoa_r+0x916>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	9902      	ldr	r1, [sp, #8]
 8009d52:	220a      	movs	r2, #10
 8009d54:	4648      	mov	r0, r9
 8009d56:	f000 fca1 	bl	800a69c <__multadd>
 8009d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d5c:	9002      	str	r0, [sp, #8]
 8009d5e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 8177 	beq.w	800a056 <_dtoa_r+0xb66>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	220a      	movs	r2, #10
 8009d6e:	4648      	mov	r0, r9
 8009d70:	f000 fc94 	bl	800a69c <__multadd>
 8009d74:	f1bb 0f00 	cmp.w	fp, #0
 8009d78:	4605      	mov	r5, r0
 8009d7a:	dc6f      	bgt.n	8009e5c <_dtoa_r+0x96c>
 8009d7c:	9b07      	ldr	r3, [sp, #28]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	dc49      	bgt.n	8009e16 <_dtoa_r+0x926>
 8009d82:	e06b      	b.n	8009e5c <_dtoa_r+0x96c>
 8009d84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d8a:	e73c      	b.n	8009c06 <_dtoa_r+0x716>
 8009d8c:	3fe00000 	.word	0x3fe00000
 8009d90:	40240000 	.word	0x40240000
 8009d94:	9b03      	ldr	r3, [sp, #12]
 8009d96:	1e5c      	subs	r4, r3, #1
 8009d98:	9b08      	ldr	r3, [sp, #32]
 8009d9a:	42a3      	cmp	r3, r4
 8009d9c:	db09      	blt.n	8009db2 <_dtoa_r+0x8c2>
 8009d9e:	1b1c      	subs	r4, r3, r4
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f6bf af30 	bge.w	8009c08 <_dtoa_r+0x718>
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	9a03      	ldr	r2, [sp, #12]
 8009dac:	1a9e      	subs	r6, r3, r2
 8009dae:	2300      	movs	r3, #0
 8009db0:	e72b      	b.n	8009c0a <_dtoa_r+0x71a>
 8009db2:	9b08      	ldr	r3, [sp, #32]
 8009db4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009db6:	9408      	str	r4, [sp, #32]
 8009db8:	1ae3      	subs	r3, r4, r3
 8009dba:	441a      	add	r2, r3
 8009dbc:	9e00      	ldr	r6, [sp, #0]
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009dc2:	2400      	movs	r4, #0
 8009dc4:	e721      	b.n	8009c0a <_dtoa_r+0x71a>
 8009dc6:	9c08      	ldr	r4, [sp, #32]
 8009dc8:	9e00      	ldr	r6, [sp, #0]
 8009dca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009dcc:	e728      	b.n	8009c20 <_dtoa_r+0x730>
 8009dce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009dd2:	e751      	b.n	8009c78 <_dtoa_r+0x788>
 8009dd4:	9a08      	ldr	r2, [sp, #32]
 8009dd6:	9902      	ldr	r1, [sp, #8]
 8009dd8:	e750      	b.n	8009c7c <_dtoa_r+0x78c>
 8009dda:	f8cd 8008 	str.w	r8, [sp, #8]
 8009dde:	e751      	b.n	8009c84 <_dtoa_r+0x794>
 8009de0:	2300      	movs	r3, #0
 8009de2:	e779      	b.n	8009cd8 <_dtoa_r+0x7e8>
 8009de4:	9b04      	ldr	r3, [sp, #16]
 8009de6:	e777      	b.n	8009cd8 <_dtoa_r+0x7e8>
 8009de8:	2300      	movs	r3, #0
 8009dea:	9308      	str	r3, [sp, #32]
 8009dec:	e779      	b.n	8009ce2 <_dtoa_r+0x7f2>
 8009dee:	d093      	beq.n	8009d18 <_dtoa_r+0x828>
 8009df0:	9a00      	ldr	r2, [sp, #0]
 8009df2:	331c      	adds	r3, #28
 8009df4:	441a      	add	r2, r3
 8009df6:	9200      	str	r2, [sp, #0]
 8009df8:	9a06      	ldr	r2, [sp, #24]
 8009dfa:	441a      	add	r2, r3
 8009dfc:	441e      	add	r6, r3
 8009dfe:	9206      	str	r2, [sp, #24]
 8009e00:	e78a      	b.n	8009d18 <_dtoa_r+0x828>
 8009e02:	4603      	mov	r3, r0
 8009e04:	e7f4      	b.n	8009df0 <_dtoa_r+0x900>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	46b8      	mov	r8, r7
 8009e0c:	dc20      	bgt.n	8009e50 <_dtoa_r+0x960>
 8009e0e:	469b      	mov	fp, r3
 8009e10:	9b07      	ldr	r3, [sp, #28]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	dd1e      	ble.n	8009e54 <_dtoa_r+0x964>
 8009e16:	f1bb 0f00 	cmp.w	fp, #0
 8009e1a:	f47f adb1 	bne.w	8009980 <_dtoa_r+0x490>
 8009e1e:	4621      	mov	r1, r4
 8009e20:	465b      	mov	r3, fp
 8009e22:	2205      	movs	r2, #5
 8009e24:	4648      	mov	r0, r9
 8009e26:	f000 fc39 	bl	800a69c <__multadd>
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	9802      	ldr	r0, [sp, #8]
 8009e30:	f000 fe44 	bl	800aabc <__mcmp>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f77f ada3 	ble.w	8009980 <_dtoa_r+0x490>
 8009e3a:	4656      	mov	r6, sl
 8009e3c:	2331      	movs	r3, #49	@ 0x31
 8009e3e:	f806 3b01 	strb.w	r3, [r6], #1
 8009e42:	f108 0801 	add.w	r8, r8, #1
 8009e46:	e59f      	b.n	8009988 <_dtoa_r+0x498>
 8009e48:	9c03      	ldr	r4, [sp, #12]
 8009e4a:	46b8      	mov	r8, r7
 8009e4c:	4625      	mov	r5, r4
 8009e4e:	e7f4      	b.n	8009e3a <_dtoa_r+0x94a>
 8009e50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 8101 	beq.w	800a05e <_dtoa_r+0xb6e>
 8009e5c:	2e00      	cmp	r6, #0
 8009e5e:	dd05      	ble.n	8009e6c <_dtoa_r+0x97c>
 8009e60:	4629      	mov	r1, r5
 8009e62:	4632      	mov	r2, r6
 8009e64:	4648      	mov	r0, r9
 8009e66:	f000 fdbd 	bl	800a9e4 <__lshift>
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	9b08      	ldr	r3, [sp, #32]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d05c      	beq.n	8009f2c <_dtoa_r+0xa3c>
 8009e72:	6869      	ldr	r1, [r5, #4]
 8009e74:	4648      	mov	r0, r9
 8009e76:	f000 fbaf 	bl	800a5d8 <_Balloc>
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	b928      	cbnz	r0, 8009e8a <_dtoa_r+0x99a>
 8009e7e:	4b82      	ldr	r3, [pc, #520]	@ (800a088 <_dtoa_r+0xb98>)
 8009e80:	4602      	mov	r2, r0
 8009e82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e86:	f7ff bb4a 	b.w	800951e <_dtoa_r+0x2e>
 8009e8a:	692a      	ldr	r2, [r5, #16]
 8009e8c:	3202      	adds	r2, #2
 8009e8e:	0092      	lsls	r2, r2, #2
 8009e90:	f105 010c 	add.w	r1, r5, #12
 8009e94:	300c      	adds	r0, #12
 8009e96:	f001 f8cb 	bl	800b030 <memcpy>
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4648      	mov	r0, r9
 8009ea0:	f000 fda0 	bl	800a9e4 <__lshift>
 8009ea4:	f10a 0301 	add.w	r3, sl, #1
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	eb0a 030b 	add.w	r3, sl, fp
 8009eae:	9308      	str	r3, [sp, #32]
 8009eb0:	9b04      	ldr	r3, [sp, #16]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	462f      	mov	r7, r5
 8009eb8:	9306      	str	r3, [sp, #24]
 8009eba:	4605      	mov	r5, r0
 8009ebc:	9b00      	ldr	r3, [sp, #0]
 8009ebe:	9802      	ldr	r0, [sp, #8]
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009ec6:	f7ff fa8b 	bl	80093e0 <quorem>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	3330      	adds	r3, #48	@ 0x30
 8009ece:	9003      	str	r0, [sp, #12]
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	9802      	ldr	r0, [sp, #8]
 8009ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed6:	f000 fdf1 	bl	800aabc <__mcmp>
 8009eda:	462a      	mov	r2, r5
 8009edc:	9004      	str	r0, [sp, #16]
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4648      	mov	r0, r9
 8009ee2:	f000 fe07 	bl	800aaf4 <__mdiff>
 8009ee6:	68c2      	ldr	r2, [r0, #12]
 8009ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eea:	4606      	mov	r6, r0
 8009eec:	bb02      	cbnz	r2, 8009f30 <_dtoa_r+0xa40>
 8009eee:	4601      	mov	r1, r0
 8009ef0:	9802      	ldr	r0, [sp, #8]
 8009ef2:	f000 fde3 	bl	800aabc <__mcmp>
 8009ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef8:	4602      	mov	r2, r0
 8009efa:	4631      	mov	r1, r6
 8009efc:	4648      	mov	r0, r9
 8009efe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f02:	f000 fba9 	bl	800a658 <_Bfree>
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f0a:	9e00      	ldr	r6, [sp, #0]
 8009f0c:	ea42 0103 	orr.w	r1, r2, r3
 8009f10:	9b06      	ldr	r3, [sp, #24]
 8009f12:	4319      	orrs	r1, r3
 8009f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f16:	d10d      	bne.n	8009f34 <_dtoa_r+0xa44>
 8009f18:	2b39      	cmp	r3, #57	@ 0x39
 8009f1a:	d027      	beq.n	8009f6c <_dtoa_r+0xa7c>
 8009f1c:	9a04      	ldr	r2, [sp, #16]
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	dd01      	ble.n	8009f26 <_dtoa_r+0xa36>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	3331      	adds	r3, #49	@ 0x31
 8009f26:	f88b 3000 	strb.w	r3, [fp]
 8009f2a:	e52e      	b.n	800998a <_dtoa_r+0x49a>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	e7b9      	b.n	8009ea4 <_dtoa_r+0x9b4>
 8009f30:	2201      	movs	r2, #1
 8009f32:	e7e2      	b.n	8009efa <_dtoa_r+0xa0a>
 8009f34:	9904      	ldr	r1, [sp, #16]
 8009f36:	2900      	cmp	r1, #0
 8009f38:	db04      	blt.n	8009f44 <_dtoa_r+0xa54>
 8009f3a:	9807      	ldr	r0, [sp, #28]
 8009f3c:	4301      	orrs	r1, r0
 8009f3e:	9806      	ldr	r0, [sp, #24]
 8009f40:	4301      	orrs	r1, r0
 8009f42:	d120      	bne.n	8009f86 <_dtoa_r+0xa96>
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	ddee      	ble.n	8009f26 <_dtoa_r+0xa36>
 8009f48:	9902      	ldr	r1, [sp, #8]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	4648      	mov	r0, r9
 8009f50:	f000 fd48 	bl	800a9e4 <__lshift>
 8009f54:	4621      	mov	r1, r4
 8009f56:	9002      	str	r0, [sp, #8]
 8009f58:	f000 fdb0 	bl	800aabc <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	9b00      	ldr	r3, [sp, #0]
 8009f60:	dc02      	bgt.n	8009f68 <_dtoa_r+0xa78>
 8009f62:	d1e0      	bne.n	8009f26 <_dtoa_r+0xa36>
 8009f64:	07da      	lsls	r2, r3, #31
 8009f66:	d5de      	bpl.n	8009f26 <_dtoa_r+0xa36>
 8009f68:	2b39      	cmp	r3, #57	@ 0x39
 8009f6a:	d1da      	bne.n	8009f22 <_dtoa_r+0xa32>
 8009f6c:	2339      	movs	r3, #57	@ 0x39
 8009f6e:	f88b 3000 	strb.w	r3, [fp]
 8009f72:	4633      	mov	r3, r6
 8009f74:	461e      	mov	r6, r3
 8009f76:	3b01      	subs	r3, #1
 8009f78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f7c:	2a39      	cmp	r2, #57	@ 0x39
 8009f7e:	d04e      	beq.n	800a01e <_dtoa_r+0xb2e>
 8009f80:	3201      	adds	r2, #1
 8009f82:	701a      	strb	r2, [r3, #0]
 8009f84:	e501      	b.n	800998a <_dtoa_r+0x49a>
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	dd03      	ble.n	8009f92 <_dtoa_r+0xaa2>
 8009f8a:	2b39      	cmp	r3, #57	@ 0x39
 8009f8c:	d0ee      	beq.n	8009f6c <_dtoa_r+0xa7c>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	e7c9      	b.n	8009f26 <_dtoa_r+0xa36>
 8009f92:	9a00      	ldr	r2, [sp, #0]
 8009f94:	9908      	ldr	r1, [sp, #32]
 8009f96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009f9a:	428a      	cmp	r2, r1
 8009f9c:	d028      	beq.n	8009ff0 <_dtoa_r+0xb00>
 8009f9e:	9902      	ldr	r1, [sp, #8]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	220a      	movs	r2, #10
 8009fa4:	4648      	mov	r0, r9
 8009fa6:	f000 fb79 	bl	800a69c <__multadd>
 8009faa:	42af      	cmp	r7, r5
 8009fac:	9002      	str	r0, [sp, #8]
 8009fae:	f04f 0300 	mov.w	r3, #0
 8009fb2:	f04f 020a 	mov.w	r2, #10
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	4648      	mov	r0, r9
 8009fba:	d107      	bne.n	8009fcc <_dtoa_r+0xadc>
 8009fbc:	f000 fb6e 	bl	800a69c <__multadd>
 8009fc0:	4607      	mov	r7, r0
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	9b00      	ldr	r3, [sp, #0]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	e777      	b.n	8009ebc <_dtoa_r+0x9cc>
 8009fcc:	f000 fb66 	bl	800a69c <__multadd>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	220a      	movs	r2, #10
 8009fd8:	4648      	mov	r0, r9
 8009fda:	f000 fb5f 	bl	800a69c <__multadd>
 8009fde:	4605      	mov	r5, r0
 8009fe0:	e7f0      	b.n	8009fc4 <_dtoa_r+0xad4>
 8009fe2:	f1bb 0f00 	cmp.w	fp, #0
 8009fe6:	bfcc      	ite	gt
 8009fe8:	465e      	movgt	r6, fp
 8009fea:	2601      	movle	r6, #1
 8009fec:	4456      	add	r6, sl
 8009fee:	2700      	movs	r7, #0
 8009ff0:	9902      	ldr	r1, [sp, #8]
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	4648      	mov	r0, r9
 8009ff8:	f000 fcf4 	bl	800a9e4 <__lshift>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	9002      	str	r0, [sp, #8]
 800a000:	f000 fd5c 	bl	800aabc <__mcmp>
 800a004:	2800      	cmp	r0, #0
 800a006:	dcb4      	bgt.n	8009f72 <_dtoa_r+0xa82>
 800a008:	d102      	bne.n	800a010 <_dtoa_r+0xb20>
 800a00a:	9b00      	ldr	r3, [sp, #0]
 800a00c:	07db      	lsls	r3, r3, #31
 800a00e:	d4b0      	bmi.n	8009f72 <_dtoa_r+0xa82>
 800a010:	4633      	mov	r3, r6
 800a012:	461e      	mov	r6, r3
 800a014:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a018:	2a30      	cmp	r2, #48	@ 0x30
 800a01a:	d0fa      	beq.n	800a012 <_dtoa_r+0xb22>
 800a01c:	e4b5      	b.n	800998a <_dtoa_r+0x49a>
 800a01e:	459a      	cmp	sl, r3
 800a020:	d1a8      	bne.n	8009f74 <_dtoa_r+0xa84>
 800a022:	2331      	movs	r3, #49	@ 0x31
 800a024:	f108 0801 	add.w	r8, r8, #1
 800a028:	f88a 3000 	strb.w	r3, [sl]
 800a02c:	e4ad      	b.n	800998a <_dtoa_r+0x49a>
 800a02e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a030:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a08c <_dtoa_r+0xb9c>
 800a034:	b11b      	cbz	r3, 800a03e <_dtoa_r+0xb4e>
 800a036:	f10a 0308 	add.w	r3, sl, #8
 800a03a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	4650      	mov	r0, sl
 800a040:	b017      	add	sp, #92	@ 0x5c
 800a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	f77f ae2e 	ble.w	8009caa <_dtoa_r+0x7ba>
 800a04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a050:	9308      	str	r3, [sp, #32]
 800a052:	2001      	movs	r0, #1
 800a054:	e64d      	b.n	8009cf2 <_dtoa_r+0x802>
 800a056:	f1bb 0f00 	cmp.w	fp, #0
 800a05a:	f77f aed9 	ble.w	8009e10 <_dtoa_r+0x920>
 800a05e:	4656      	mov	r6, sl
 800a060:	9802      	ldr	r0, [sp, #8]
 800a062:	4621      	mov	r1, r4
 800a064:	f7ff f9bc 	bl	80093e0 <quorem>
 800a068:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a06c:	f806 3b01 	strb.w	r3, [r6], #1
 800a070:	eba6 020a 	sub.w	r2, r6, sl
 800a074:	4593      	cmp	fp, r2
 800a076:	ddb4      	ble.n	8009fe2 <_dtoa_r+0xaf2>
 800a078:	9902      	ldr	r1, [sp, #8]
 800a07a:	2300      	movs	r3, #0
 800a07c:	220a      	movs	r2, #10
 800a07e:	4648      	mov	r0, r9
 800a080:	f000 fb0c 	bl	800a69c <__multadd>
 800a084:	9002      	str	r0, [sp, #8]
 800a086:	e7eb      	b.n	800a060 <_dtoa_r+0xb70>
 800a088:	0800b45c 	.word	0x0800b45c
 800a08c:	0800b3e0 	.word	0x0800b3e0

0800a090 <__sfputc_r>:
 800a090:	6893      	ldr	r3, [r2, #8]
 800a092:	3b01      	subs	r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	b410      	push	{r4}
 800a098:	6093      	str	r3, [r2, #8]
 800a09a:	da08      	bge.n	800a0ae <__sfputc_r+0x1e>
 800a09c:	6994      	ldr	r4, [r2, #24]
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	db01      	blt.n	800a0a6 <__sfputc_r+0x16>
 800a0a2:	290a      	cmp	r1, #10
 800a0a4:	d103      	bne.n	800a0ae <__sfputc_r+0x1e>
 800a0a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0aa:	f000 be52 	b.w	800ad52 <__swbuf_r>
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	1c58      	adds	r0, r3, #1
 800a0b2:	6010      	str	r0, [r2, #0]
 800a0b4:	7019      	strb	r1, [r3, #0]
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <__sfputs_r>:
 800a0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	460f      	mov	r7, r1
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	18d5      	adds	r5, r2, r3
 800a0c8:	42ac      	cmp	r4, r5
 800a0ca:	d101      	bne.n	800a0d0 <__sfputs_r+0x12>
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	e007      	b.n	800a0e0 <__sfputs_r+0x22>
 800a0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d4:	463a      	mov	r2, r7
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f7ff ffda 	bl	800a090 <__sfputc_r>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d1f3      	bne.n	800a0c8 <__sfputs_r+0xa>
 800a0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0e4 <_vfiprintf_r>:
 800a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	b09d      	sub	sp, #116	@ 0x74
 800a0ec:	4614      	mov	r4, r2
 800a0ee:	4698      	mov	r8, r3
 800a0f0:	4606      	mov	r6, r0
 800a0f2:	b118      	cbz	r0, 800a0fc <_vfiprintf_r+0x18>
 800a0f4:	6a03      	ldr	r3, [r0, #32]
 800a0f6:	b90b      	cbnz	r3, 800a0fc <_vfiprintf_r+0x18>
 800a0f8:	f7ff f892 	bl	8009220 <__sinit>
 800a0fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0fe:	07d9      	lsls	r1, r3, #31
 800a100:	d405      	bmi.n	800a10e <_vfiprintf_r+0x2a>
 800a102:	89ab      	ldrh	r3, [r5, #12]
 800a104:	059a      	lsls	r2, r3, #22
 800a106:	d402      	bmi.n	800a10e <_vfiprintf_r+0x2a>
 800a108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a10a:	f7ff f962 	bl	80093d2 <__retarget_lock_acquire_recursive>
 800a10e:	89ab      	ldrh	r3, [r5, #12]
 800a110:	071b      	lsls	r3, r3, #28
 800a112:	d501      	bpl.n	800a118 <_vfiprintf_r+0x34>
 800a114:	692b      	ldr	r3, [r5, #16]
 800a116:	b99b      	cbnz	r3, 800a140 <_vfiprintf_r+0x5c>
 800a118:	4629      	mov	r1, r5
 800a11a:	4630      	mov	r0, r6
 800a11c:	f000 fe58 	bl	800add0 <__swsetup_r>
 800a120:	b170      	cbz	r0, 800a140 <_vfiprintf_r+0x5c>
 800a122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a124:	07dc      	lsls	r4, r3, #31
 800a126:	d504      	bpl.n	800a132 <_vfiprintf_r+0x4e>
 800a128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a12c:	b01d      	add	sp, #116	@ 0x74
 800a12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a132:	89ab      	ldrh	r3, [r5, #12]
 800a134:	0598      	lsls	r0, r3, #22
 800a136:	d4f7      	bmi.n	800a128 <_vfiprintf_r+0x44>
 800a138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a13a:	f7ff f94b 	bl	80093d4 <__retarget_lock_release_recursive>
 800a13e:	e7f3      	b.n	800a128 <_vfiprintf_r+0x44>
 800a140:	2300      	movs	r3, #0
 800a142:	9309      	str	r3, [sp, #36]	@ 0x24
 800a144:	2320      	movs	r3, #32
 800a146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a14e:	2330      	movs	r3, #48	@ 0x30
 800a150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a300 <_vfiprintf_r+0x21c>
 800a154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a158:	f04f 0901 	mov.w	r9, #1
 800a15c:	4623      	mov	r3, r4
 800a15e:	469a      	mov	sl, r3
 800a160:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a164:	b10a      	cbz	r2, 800a16a <_vfiprintf_r+0x86>
 800a166:	2a25      	cmp	r2, #37	@ 0x25
 800a168:	d1f9      	bne.n	800a15e <_vfiprintf_r+0x7a>
 800a16a:	ebba 0b04 	subs.w	fp, sl, r4
 800a16e:	d00b      	beq.n	800a188 <_vfiprintf_r+0xa4>
 800a170:	465b      	mov	r3, fp
 800a172:	4622      	mov	r2, r4
 800a174:	4629      	mov	r1, r5
 800a176:	4630      	mov	r0, r6
 800a178:	f7ff ffa1 	bl	800a0be <__sfputs_r>
 800a17c:	3001      	adds	r0, #1
 800a17e:	f000 80a7 	beq.w	800a2d0 <_vfiprintf_r+0x1ec>
 800a182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a184:	445a      	add	r2, fp
 800a186:	9209      	str	r2, [sp, #36]	@ 0x24
 800a188:	f89a 3000 	ldrb.w	r3, [sl]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 809f 	beq.w	800a2d0 <_vfiprintf_r+0x1ec>
 800a192:	2300      	movs	r3, #0
 800a194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a19c:	f10a 0a01 	add.w	sl, sl, #1
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	9307      	str	r3, [sp, #28]
 800a1a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1aa:	4654      	mov	r4, sl
 800a1ac:	2205      	movs	r2, #5
 800a1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b2:	4853      	ldr	r0, [pc, #332]	@ (800a300 <_vfiprintf_r+0x21c>)
 800a1b4:	f7f6 f80c 	bl	80001d0 <memchr>
 800a1b8:	9a04      	ldr	r2, [sp, #16]
 800a1ba:	b9d8      	cbnz	r0, 800a1f4 <_vfiprintf_r+0x110>
 800a1bc:	06d1      	lsls	r1, r2, #27
 800a1be:	bf44      	itt	mi
 800a1c0:	2320      	movmi	r3, #32
 800a1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1c6:	0713      	lsls	r3, r2, #28
 800a1c8:	bf44      	itt	mi
 800a1ca:	232b      	movmi	r3, #43	@ 0x2b
 800a1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1d6:	d015      	beq.n	800a204 <_vfiprintf_r+0x120>
 800a1d8:	9a07      	ldr	r2, [sp, #28]
 800a1da:	4654      	mov	r4, sl
 800a1dc:	2000      	movs	r0, #0
 800a1de:	f04f 0c0a 	mov.w	ip, #10
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1e8:	3b30      	subs	r3, #48	@ 0x30
 800a1ea:	2b09      	cmp	r3, #9
 800a1ec:	d94b      	bls.n	800a286 <_vfiprintf_r+0x1a2>
 800a1ee:	b1b0      	cbz	r0, 800a21e <_vfiprintf_r+0x13a>
 800a1f0:	9207      	str	r2, [sp, #28]
 800a1f2:	e014      	b.n	800a21e <_vfiprintf_r+0x13a>
 800a1f4:	eba0 0308 	sub.w	r3, r0, r8
 800a1f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	9304      	str	r3, [sp, #16]
 800a200:	46a2      	mov	sl, r4
 800a202:	e7d2      	b.n	800a1aa <_vfiprintf_r+0xc6>
 800a204:	9b03      	ldr	r3, [sp, #12]
 800a206:	1d19      	adds	r1, r3, #4
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	9103      	str	r1, [sp, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bfbb      	ittet	lt
 800a210:	425b      	neglt	r3, r3
 800a212:	f042 0202 	orrlt.w	r2, r2, #2
 800a216:	9307      	strge	r3, [sp, #28]
 800a218:	9307      	strlt	r3, [sp, #28]
 800a21a:	bfb8      	it	lt
 800a21c:	9204      	strlt	r2, [sp, #16]
 800a21e:	7823      	ldrb	r3, [r4, #0]
 800a220:	2b2e      	cmp	r3, #46	@ 0x2e
 800a222:	d10a      	bne.n	800a23a <_vfiprintf_r+0x156>
 800a224:	7863      	ldrb	r3, [r4, #1]
 800a226:	2b2a      	cmp	r3, #42	@ 0x2a
 800a228:	d132      	bne.n	800a290 <_vfiprintf_r+0x1ac>
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	1d1a      	adds	r2, r3, #4
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	9203      	str	r2, [sp, #12]
 800a232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a236:	3402      	adds	r4, #2
 800a238:	9305      	str	r3, [sp, #20]
 800a23a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a310 <_vfiprintf_r+0x22c>
 800a23e:	7821      	ldrb	r1, [r4, #0]
 800a240:	2203      	movs	r2, #3
 800a242:	4650      	mov	r0, sl
 800a244:	f7f5 ffc4 	bl	80001d0 <memchr>
 800a248:	b138      	cbz	r0, 800a25a <_vfiprintf_r+0x176>
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	eba0 000a 	sub.w	r0, r0, sl
 800a250:	2240      	movs	r2, #64	@ 0x40
 800a252:	4082      	lsls	r2, r0
 800a254:	4313      	orrs	r3, r2
 800a256:	3401      	adds	r4, #1
 800a258:	9304      	str	r3, [sp, #16]
 800a25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25e:	4829      	ldr	r0, [pc, #164]	@ (800a304 <_vfiprintf_r+0x220>)
 800a260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a264:	2206      	movs	r2, #6
 800a266:	f7f5 ffb3 	bl	80001d0 <memchr>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d03f      	beq.n	800a2ee <_vfiprintf_r+0x20a>
 800a26e:	4b26      	ldr	r3, [pc, #152]	@ (800a308 <_vfiprintf_r+0x224>)
 800a270:	bb1b      	cbnz	r3, 800a2ba <_vfiprintf_r+0x1d6>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	3307      	adds	r3, #7
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	3308      	adds	r3, #8
 800a27c:	9303      	str	r3, [sp, #12]
 800a27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a280:	443b      	add	r3, r7
 800a282:	9309      	str	r3, [sp, #36]	@ 0x24
 800a284:	e76a      	b.n	800a15c <_vfiprintf_r+0x78>
 800a286:	fb0c 3202 	mla	r2, ip, r2, r3
 800a28a:	460c      	mov	r4, r1
 800a28c:	2001      	movs	r0, #1
 800a28e:	e7a8      	b.n	800a1e2 <_vfiprintf_r+0xfe>
 800a290:	2300      	movs	r3, #0
 800a292:	3401      	adds	r4, #1
 800a294:	9305      	str	r3, [sp, #20]
 800a296:	4619      	mov	r1, r3
 800a298:	f04f 0c0a 	mov.w	ip, #10
 800a29c:	4620      	mov	r0, r4
 800a29e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a2:	3a30      	subs	r2, #48	@ 0x30
 800a2a4:	2a09      	cmp	r2, #9
 800a2a6:	d903      	bls.n	800a2b0 <_vfiprintf_r+0x1cc>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0c6      	beq.n	800a23a <_vfiprintf_r+0x156>
 800a2ac:	9105      	str	r1, [sp, #20]
 800a2ae:	e7c4      	b.n	800a23a <_vfiprintf_r+0x156>
 800a2b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e7f0      	b.n	800a29c <_vfiprintf_r+0x1b8>
 800a2ba:	ab03      	add	r3, sp, #12
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	462a      	mov	r2, r5
 800a2c0:	4b12      	ldr	r3, [pc, #72]	@ (800a30c <_vfiprintf_r+0x228>)
 800a2c2:	a904      	add	r1, sp, #16
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7fe fb69 	bl	800899c <_printf_float>
 800a2ca:	4607      	mov	r7, r0
 800a2cc:	1c78      	adds	r0, r7, #1
 800a2ce:	d1d6      	bne.n	800a27e <_vfiprintf_r+0x19a>
 800a2d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2d2:	07d9      	lsls	r1, r3, #31
 800a2d4:	d405      	bmi.n	800a2e2 <_vfiprintf_r+0x1fe>
 800a2d6:	89ab      	ldrh	r3, [r5, #12]
 800a2d8:	059a      	lsls	r2, r3, #22
 800a2da:	d402      	bmi.n	800a2e2 <_vfiprintf_r+0x1fe>
 800a2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2de:	f7ff f879 	bl	80093d4 <__retarget_lock_release_recursive>
 800a2e2:	89ab      	ldrh	r3, [r5, #12]
 800a2e4:	065b      	lsls	r3, r3, #25
 800a2e6:	f53f af1f 	bmi.w	800a128 <_vfiprintf_r+0x44>
 800a2ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2ec:	e71e      	b.n	800a12c <_vfiprintf_r+0x48>
 800a2ee:	ab03      	add	r3, sp, #12
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <_vfiprintf_r+0x228>)
 800a2f6:	a904      	add	r1, sp, #16
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7fe fde7 	bl	8008ecc <_printf_i>
 800a2fe:	e7e4      	b.n	800a2ca <_vfiprintf_r+0x1e6>
 800a300:	0800b46d 	.word	0x0800b46d
 800a304:	0800b477 	.word	0x0800b477
 800a308:	0800899d 	.word	0x0800899d
 800a30c:	0800a0bf 	.word	0x0800a0bf
 800a310:	0800b473 	.word	0x0800b473

0800a314 <malloc>:
 800a314:	4b02      	ldr	r3, [pc, #8]	@ (800a320 <malloc+0xc>)
 800a316:	4601      	mov	r1, r0
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	f000 b825 	b.w	800a368 <_malloc_r>
 800a31e:	bf00      	nop
 800a320:	2000002c 	.word	0x2000002c

0800a324 <sbrk_aligned>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	4e0f      	ldr	r6, [pc, #60]	@ (800a364 <sbrk_aligned+0x40>)
 800a328:	460c      	mov	r4, r1
 800a32a:	6831      	ldr	r1, [r6, #0]
 800a32c:	4605      	mov	r5, r0
 800a32e:	b911      	cbnz	r1, 800a336 <sbrk_aligned+0x12>
 800a330:	f000 fe3a 	bl	800afa8 <_sbrk_r>
 800a334:	6030      	str	r0, [r6, #0]
 800a336:	4621      	mov	r1, r4
 800a338:	4628      	mov	r0, r5
 800a33a:	f000 fe35 	bl	800afa8 <_sbrk_r>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d103      	bne.n	800a34a <sbrk_aligned+0x26>
 800a342:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a346:	4620      	mov	r0, r4
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	1cc4      	adds	r4, r0, #3
 800a34c:	f024 0403 	bic.w	r4, r4, #3
 800a350:	42a0      	cmp	r0, r4
 800a352:	d0f8      	beq.n	800a346 <sbrk_aligned+0x22>
 800a354:	1a21      	subs	r1, r4, r0
 800a356:	4628      	mov	r0, r5
 800a358:	f000 fe26 	bl	800afa8 <_sbrk_r>
 800a35c:	3001      	adds	r0, #1
 800a35e:	d1f2      	bne.n	800a346 <sbrk_aligned+0x22>
 800a360:	e7ef      	b.n	800a342 <sbrk_aligned+0x1e>
 800a362:	bf00      	nop
 800a364:	20000ba8 	.word	0x20000ba8

0800a368 <_malloc_r>:
 800a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a36c:	1ccd      	adds	r5, r1, #3
 800a36e:	f025 0503 	bic.w	r5, r5, #3
 800a372:	3508      	adds	r5, #8
 800a374:	2d0c      	cmp	r5, #12
 800a376:	bf38      	it	cc
 800a378:	250c      	movcc	r5, #12
 800a37a:	2d00      	cmp	r5, #0
 800a37c:	4606      	mov	r6, r0
 800a37e:	db01      	blt.n	800a384 <_malloc_r+0x1c>
 800a380:	42a9      	cmp	r1, r5
 800a382:	d904      	bls.n	800a38e <_malloc_r+0x26>
 800a384:	230c      	movs	r3, #12
 800a386:	6033      	str	r3, [r6, #0]
 800a388:	2000      	movs	r0, #0
 800a38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a38e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a464 <_malloc_r+0xfc>
 800a392:	f000 f915 	bl	800a5c0 <__malloc_lock>
 800a396:	f8d8 3000 	ldr.w	r3, [r8]
 800a39a:	461c      	mov	r4, r3
 800a39c:	bb44      	cbnz	r4, 800a3f0 <_malloc_r+0x88>
 800a39e:	4629      	mov	r1, r5
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7ff ffbf 	bl	800a324 <sbrk_aligned>
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	d158      	bne.n	800a45e <_malloc_r+0xf6>
 800a3ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a3b0:	4627      	mov	r7, r4
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	d143      	bne.n	800a43e <_malloc_r+0xd6>
 800a3b6:	2c00      	cmp	r4, #0
 800a3b8:	d04b      	beq.n	800a452 <_malloc_r+0xea>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4630      	mov	r0, r6
 800a3c0:	eb04 0903 	add.w	r9, r4, r3
 800a3c4:	f000 fdf0 	bl	800afa8 <_sbrk_r>
 800a3c8:	4581      	cmp	r9, r0
 800a3ca:	d142      	bne.n	800a452 <_malloc_r+0xea>
 800a3cc:	6821      	ldr	r1, [r4, #0]
 800a3ce:	1a6d      	subs	r5, r5, r1
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ffa6 	bl	800a324 <sbrk_aligned>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d03a      	beq.n	800a452 <_malloc_r+0xea>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	442b      	add	r3, r5
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	bb62      	cbnz	r2, 800a444 <_malloc_r+0xdc>
 800a3ea:	f8c8 7000 	str.w	r7, [r8]
 800a3ee:	e00f      	b.n	800a410 <_malloc_r+0xa8>
 800a3f0:	6822      	ldr	r2, [r4, #0]
 800a3f2:	1b52      	subs	r2, r2, r5
 800a3f4:	d420      	bmi.n	800a438 <_malloc_r+0xd0>
 800a3f6:	2a0b      	cmp	r2, #11
 800a3f8:	d917      	bls.n	800a42a <_malloc_r+0xc2>
 800a3fa:	1961      	adds	r1, r4, r5
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	6025      	str	r5, [r4, #0]
 800a400:	bf18      	it	ne
 800a402:	6059      	strne	r1, [r3, #4]
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	bf08      	it	eq
 800a408:	f8c8 1000 	streq.w	r1, [r8]
 800a40c:	5162      	str	r2, [r4, r5]
 800a40e:	604b      	str	r3, [r1, #4]
 800a410:	4630      	mov	r0, r6
 800a412:	f000 f8db 	bl	800a5cc <__malloc_unlock>
 800a416:	f104 000b 	add.w	r0, r4, #11
 800a41a:	1d23      	adds	r3, r4, #4
 800a41c:	f020 0007 	bic.w	r0, r0, #7
 800a420:	1ac2      	subs	r2, r0, r3
 800a422:	bf1c      	itt	ne
 800a424:	1a1b      	subne	r3, r3, r0
 800a426:	50a3      	strne	r3, [r4, r2]
 800a428:	e7af      	b.n	800a38a <_malloc_r+0x22>
 800a42a:	6862      	ldr	r2, [r4, #4]
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	bf0c      	ite	eq
 800a430:	f8c8 2000 	streq.w	r2, [r8]
 800a434:	605a      	strne	r2, [r3, #4]
 800a436:	e7eb      	b.n	800a410 <_malloc_r+0xa8>
 800a438:	4623      	mov	r3, r4
 800a43a:	6864      	ldr	r4, [r4, #4]
 800a43c:	e7ae      	b.n	800a39c <_malloc_r+0x34>
 800a43e:	463c      	mov	r4, r7
 800a440:	687f      	ldr	r7, [r7, #4]
 800a442:	e7b6      	b.n	800a3b2 <_malloc_r+0x4a>
 800a444:	461a      	mov	r2, r3
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	42a3      	cmp	r3, r4
 800a44a:	d1fb      	bne.n	800a444 <_malloc_r+0xdc>
 800a44c:	2300      	movs	r3, #0
 800a44e:	6053      	str	r3, [r2, #4]
 800a450:	e7de      	b.n	800a410 <_malloc_r+0xa8>
 800a452:	230c      	movs	r3, #12
 800a454:	6033      	str	r3, [r6, #0]
 800a456:	4630      	mov	r0, r6
 800a458:	f000 f8b8 	bl	800a5cc <__malloc_unlock>
 800a45c:	e794      	b.n	800a388 <_malloc_r+0x20>
 800a45e:	6005      	str	r5, [r0, #0]
 800a460:	e7d6      	b.n	800a410 <_malloc_r+0xa8>
 800a462:	bf00      	nop
 800a464:	20000bac 	.word	0x20000bac

0800a468 <__sflush_r>:
 800a468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a470:	0716      	lsls	r6, r2, #28
 800a472:	4605      	mov	r5, r0
 800a474:	460c      	mov	r4, r1
 800a476:	d454      	bmi.n	800a522 <__sflush_r+0xba>
 800a478:	684b      	ldr	r3, [r1, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	dc02      	bgt.n	800a484 <__sflush_r+0x1c>
 800a47e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	dd48      	ble.n	800a516 <__sflush_r+0xae>
 800a484:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a486:	2e00      	cmp	r6, #0
 800a488:	d045      	beq.n	800a516 <__sflush_r+0xae>
 800a48a:	2300      	movs	r3, #0
 800a48c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a490:	682f      	ldr	r7, [r5, #0]
 800a492:	6a21      	ldr	r1, [r4, #32]
 800a494:	602b      	str	r3, [r5, #0]
 800a496:	d030      	beq.n	800a4fa <__sflush_r+0x92>
 800a498:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	0759      	lsls	r1, r3, #29
 800a49e:	d505      	bpl.n	800a4ac <__sflush_r+0x44>
 800a4a0:	6863      	ldr	r3, [r4, #4]
 800a4a2:	1ad2      	subs	r2, r2, r3
 800a4a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4a6:	b10b      	cbz	r3, 800a4ac <__sflush_r+0x44>
 800a4a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4aa:	1ad2      	subs	r2, r2, r3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4b0:	6a21      	ldr	r1, [r4, #32]
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b0      	blx	r6
 800a4b6:	1c43      	adds	r3, r0, #1
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	d106      	bne.n	800a4ca <__sflush_r+0x62>
 800a4bc:	6829      	ldr	r1, [r5, #0]
 800a4be:	291d      	cmp	r1, #29
 800a4c0:	d82b      	bhi.n	800a51a <__sflush_r+0xb2>
 800a4c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a56c <__sflush_r+0x104>)
 800a4c4:	40ca      	lsrs	r2, r1
 800a4c6:	07d6      	lsls	r6, r2, #31
 800a4c8:	d527      	bpl.n	800a51a <__sflush_r+0xb2>
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	6062      	str	r2, [r4, #4]
 800a4ce:	04d9      	lsls	r1, r3, #19
 800a4d0:	6922      	ldr	r2, [r4, #16]
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	d504      	bpl.n	800a4e0 <__sflush_r+0x78>
 800a4d6:	1c42      	adds	r2, r0, #1
 800a4d8:	d101      	bne.n	800a4de <__sflush_r+0x76>
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	b903      	cbnz	r3, 800a4e0 <__sflush_r+0x78>
 800a4de:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4e2:	602f      	str	r7, [r5, #0]
 800a4e4:	b1b9      	cbz	r1, 800a516 <__sflush_r+0xae>
 800a4e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4ea:	4299      	cmp	r1, r3
 800a4ec:	d002      	beq.n	800a4f4 <__sflush_r+0x8c>
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 fdde 	bl	800b0b0 <_free_r>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4f8:	e00d      	b.n	800a516 <__sflush_r+0xae>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b0      	blx	r6
 800a500:	4602      	mov	r2, r0
 800a502:	1c50      	adds	r0, r2, #1
 800a504:	d1c9      	bne.n	800a49a <__sflush_r+0x32>
 800a506:	682b      	ldr	r3, [r5, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0c6      	beq.n	800a49a <__sflush_r+0x32>
 800a50c:	2b1d      	cmp	r3, #29
 800a50e:	d001      	beq.n	800a514 <__sflush_r+0xac>
 800a510:	2b16      	cmp	r3, #22
 800a512:	d11e      	bne.n	800a552 <__sflush_r+0xea>
 800a514:	602f      	str	r7, [r5, #0]
 800a516:	2000      	movs	r0, #0
 800a518:	e022      	b.n	800a560 <__sflush_r+0xf8>
 800a51a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a51e:	b21b      	sxth	r3, r3
 800a520:	e01b      	b.n	800a55a <__sflush_r+0xf2>
 800a522:	690f      	ldr	r7, [r1, #16]
 800a524:	2f00      	cmp	r7, #0
 800a526:	d0f6      	beq.n	800a516 <__sflush_r+0xae>
 800a528:	0793      	lsls	r3, r2, #30
 800a52a:	680e      	ldr	r6, [r1, #0]
 800a52c:	bf08      	it	eq
 800a52e:	694b      	ldreq	r3, [r1, #20]
 800a530:	600f      	str	r7, [r1, #0]
 800a532:	bf18      	it	ne
 800a534:	2300      	movne	r3, #0
 800a536:	eba6 0807 	sub.w	r8, r6, r7
 800a53a:	608b      	str	r3, [r1, #8]
 800a53c:	f1b8 0f00 	cmp.w	r8, #0
 800a540:	dde9      	ble.n	800a516 <__sflush_r+0xae>
 800a542:	6a21      	ldr	r1, [r4, #32]
 800a544:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a546:	4643      	mov	r3, r8
 800a548:	463a      	mov	r2, r7
 800a54a:	4628      	mov	r0, r5
 800a54c:	47b0      	blx	r6
 800a54e:	2800      	cmp	r0, #0
 800a550:	dc08      	bgt.n	800a564 <__sflush_r+0xfc>
 800a552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	4407      	add	r7, r0
 800a566:	eba8 0800 	sub.w	r8, r8, r0
 800a56a:	e7e7      	b.n	800a53c <__sflush_r+0xd4>
 800a56c:	20400001 	.word	0x20400001

0800a570 <_fflush_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	690b      	ldr	r3, [r1, #16]
 800a574:	4605      	mov	r5, r0
 800a576:	460c      	mov	r4, r1
 800a578:	b913      	cbnz	r3, 800a580 <_fflush_r+0x10>
 800a57a:	2500      	movs	r5, #0
 800a57c:	4628      	mov	r0, r5
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	b118      	cbz	r0, 800a58a <_fflush_r+0x1a>
 800a582:	6a03      	ldr	r3, [r0, #32]
 800a584:	b90b      	cbnz	r3, 800a58a <_fflush_r+0x1a>
 800a586:	f7fe fe4b 	bl	8009220 <__sinit>
 800a58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0f3      	beq.n	800a57a <_fflush_r+0xa>
 800a592:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a594:	07d0      	lsls	r0, r2, #31
 800a596:	d404      	bmi.n	800a5a2 <_fflush_r+0x32>
 800a598:	0599      	lsls	r1, r3, #22
 800a59a:	d402      	bmi.n	800a5a2 <_fflush_r+0x32>
 800a59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a59e:	f7fe ff18 	bl	80093d2 <__retarget_lock_acquire_recursive>
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	f7ff ff5f 	bl	800a468 <__sflush_r>
 800a5aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5ac:	07da      	lsls	r2, r3, #31
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	d4e4      	bmi.n	800a57c <_fflush_r+0xc>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	059b      	lsls	r3, r3, #22
 800a5b6:	d4e1      	bmi.n	800a57c <_fflush_r+0xc>
 800a5b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ba:	f7fe ff0b 	bl	80093d4 <__retarget_lock_release_recursive>
 800a5be:	e7dd      	b.n	800a57c <_fflush_r+0xc>

0800a5c0 <__malloc_lock>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	@ (800a5c8 <__malloc_lock+0x8>)
 800a5c2:	f7fe bf06 	b.w	80093d2 <__retarget_lock_acquire_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	20000ba4 	.word	0x20000ba4

0800a5cc <__malloc_unlock>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	@ (800a5d4 <__malloc_unlock+0x8>)
 800a5ce:	f7fe bf01 	b.w	80093d4 <__retarget_lock_release_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	20000ba4 	.word	0x20000ba4

0800a5d8 <_Balloc>:
 800a5d8:	b570      	push	{r4, r5, r6, lr}
 800a5da:	69c6      	ldr	r6, [r0, #28]
 800a5dc:	4604      	mov	r4, r0
 800a5de:	460d      	mov	r5, r1
 800a5e0:	b976      	cbnz	r6, 800a600 <_Balloc+0x28>
 800a5e2:	2010      	movs	r0, #16
 800a5e4:	f7ff fe96 	bl	800a314 <malloc>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	61e0      	str	r0, [r4, #28]
 800a5ec:	b920      	cbnz	r0, 800a5f8 <_Balloc+0x20>
 800a5ee:	4b18      	ldr	r3, [pc, #96]	@ (800a650 <_Balloc+0x78>)
 800a5f0:	4818      	ldr	r0, [pc, #96]	@ (800a654 <_Balloc+0x7c>)
 800a5f2:	216b      	movs	r1, #107	@ 0x6b
 800a5f4:	f000 fd2a 	bl	800b04c <__assert_func>
 800a5f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5fc:	6006      	str	r6, [r0, #0]
 800a5fe:	60c6      	str	r6, [r0, #12]
 800a600:	69e6      	ldr	r6, [r4, #28]
 800a602:	68f3      	ldr	r3, [r6, #12]
 800a604:	b183      	cbz	r3, 800a628 <_Balloc+0x50>
 800a606:	69e3      	ldr	r3, [r4, #28]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a60e:	b9b8      	cbnz	r0, 800a640 <_Balloc+0x68>
 800a610:	2101      	movs	r1, #1
 800a612:	fa01 f605 	lsl.w	r6, r1, r5
 800a616:	1d72      	adds	r2, r6, #5
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fd34 	bl	800b088 <_calloc_r>
 800a620:	b160      	cbz	r0, 800a63c <_Balloc+0x64>
 800a622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a626:	e00e      	b.n	800a646 <_Balloc+0x6e>
 800a628:	2221      	movs	r2, #33	@ 0x21
 800a62a:	2104      	movs	r1, #4
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fd2b 	bl	800b088 <_calloc_r>
 800a632:	69e3      	ldr	r3, [r4, #28]
 800a634:	60f0      	str	r0, [r6, #12]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e4      	bne.n	800a606 <_Balloc+0x2e>
 800a63c:	2000      	movs	r0, #0
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	6802      	ldr	r2, [r0, #0]
 800a642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a646:	2300      	movs	r3, #0
 800a648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a64c:	e7f7      	b.n	800a63e <_Balloc+0x66>
 800a64e:	bf00      	nop
 800a650:	0800b3ed 	.word	0x0800b3ed
 800a654:	0800b47e 	.word	0x0800b47e

0800a658 <_Bfree>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	69c6      	ldr	r6, [r0, #28]
 800a65c:	4605      	mov	r5, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	b976      	cbnz	r6, 800a680 <_Bfree+0x28>
 800a662:	2010      	movs	r0, #16
 800a664:	f7ff fe56 	bl	800a314 <malloc>
 800a668:	4602      	mov	r2, r0
 800a66a:	61e8      	str	r0, [r5, #28]
 800a66c:	b920      	cbnz	r0, 800a678 <_Bfree+0x20>
 800a66e:	4b09      	ldr	r3, [pc, #36]	@ (800a694 <_Bfree+0x3c>)
 800a670:	4809      	ldr	r0, [pc, #36]	@ (800a698 <_Bfree+0x40>)
 800a672:	218f      	movs	r1, #143	@ 0x8f
 800a674:	f000 fcea 	bl	800b04c <__assert_func>
 800a678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a67c:	6006      	str	r6, [r0, #0]
 800a67e:	60c6      	str	r6, [r0, #12]
 800a680:	b13c      	cbz	r4, 800a692 <_Bfree+0x3a>
 800a682:	69eb      	ldr	r3, [r5, #28]
 800a684:	6862      	ldr	r2, [r4, #4]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a68c:	6021      	str	r1, [r4, #0]
 800a68e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	0800b3ed 	.word	0x0800b3ed
 800a698:	0800b47e 	.word	0x0800b47e

0800a69c <__multadd>:
 800a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a0:	690d      	ldr	r5, [r1, #16]
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	461e      	mov	r6, r3
 800a6a8:	f101 0c14 	add.w	ip, r1, #20
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a6b2:	b299      	uxth	r1, r3
 800a6b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a6b8:	0c1e      	lsrs	r6, r3, #16
 800a6ba:	0c0b      	lsrs	r3, r1, #16
 800a6bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a6c0:	b289      	uxth	r1, r1
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6c8:	4285      	cmp	r5, r0
 800a6ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6d2:	dcec      	bgt.n	800a6ae <__multadd+0x12>
 800a6d4:	b30e      	cbz	r6, 800a71a <__multadd+0x7e>
 800a6d6:	68a3      	ldr	r3, [r4, #8]
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	dc19      	bgt.n	800a710 <__multadd+0x74>
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	4638      	mov	r0, r7
 800a6e0:	3101      	adds	r1, #1
 800a6e2:	f7ff ff79 	bl	800a5d8 <_Balloc>
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	b928      	cbnz	r0, 800a6f6 <__multadd+0x5a>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a720 <__multadd+0x84>)
 800a6ee:	480d      	ldr	r0, [pc, #52]	@ (800a724 <__multadd+0x88>)
 800a6f0:	21ba      	movs	r1, #186	@ 0xba
 800a6f2:	f000 fcab 	bl	800b04c <__assert_func>
 800a6f6:	6922      	ldr	r2, [r4, #16]
 800a6f8:	3202      	adds	r2, #2
 800a6fa:	f104 010c 	add.w	r1, r4, #12
 800a6fe:	0092      	lsls	r2, r2, #2
 800a700:	300c      	adds	r0, #12
 800a702:	f000 fc95 	bl	800b030 <memcpy>
 800a706:	4621      	mov	r1, r4
 800a708:	4638      	mov	r0, r7
 800a70a:	f7ff ffa5 	bl	800a658 <_Bfree>
 800a70e:	4644      	mov	r4, r8
 800a710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a714:	3501      	adds	r5, #1
 800a716:	615e      	str	r6, [r3, #20]
 800a718:	6125      	str	r5, [r4, #16]
 800a71a:	4620      	mov	r0, r4
 800a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a720:	0800b45c 	.word	0x0800b45c
 800a724:	0800b47e 	.word	0x0800b47e

0800a728 <__hi0bits>:
 800a728:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a72c:	4603      	mov	r3, r0
 800a72e:	bf36      	itet	cc
 800a730:	0403      	lslcc	r3, r0, #16
 800a732:	2000      	movcs	r0, #0
 800a734:	2010      	movcc	r0, #16
 800a736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a73a:	bf3c      	itt	cc
 800a73c:	021b      	lslcc	r3, r3, #8
 800a73e:	3008      	addcc	r0, #8
 800a740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a744:	bf3c      	itt	cc
 800a746:	011b      	lslcc	r3, r3, #4
 800a748:	3004      	addcc	r0, #4
 800a74a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a74e:	bf3c      	itt	cc
 800a750:	009b      	lslcc	r3, r3, #2
 800a752:	3002      	addcc	r0, #2
 800a754:	2b00      	cmp	r3, #0
 800a756:	db05      	blt.n	800a764 <__hi0bits+0x3c>
 800a758:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a75c:	f100 0001 	add.w	r0, r0, #1
 800a760:	bf08      	it	eq
 800a762:	2020      	moveq	r0, #32
 800a764:	4770      	bx	lr

0800a766 <__lo0bits>:
 800a766:	6803      	ldr	r3, [r0, #0]
 800a768:	4602      	mov	r2, r0
 800a76a:	f013 0007 	ands.w	r0, r3, #7
 800a76e:	d00b      	beq.n	800a788 <__lo0bits+0x22>
 800a770:	07d9      	lsls	r1, r3, #31
 800a772:	d421      	bmi.n	800a7b8 <__lo0bits+0x52>
 800a774:	0798      	lsls	r0, r3, #30
 800a776:	bf49      	itett	mi
 800a778:	085b      	lsrmi	r3, r3, #1
 800a77a:	089b      	lsrpl	r3, r3, #2
 800a77c:	2001      	movmi	r0, #1
 800a77e:	6013      	strmi	r3, [r2, #0]
 800a780:	bf5c      	itt	pl
 800a782:	6013      	strpl	r3, [r2, #0]
 800a784:	2002      	movpl	r0, #2
 800a786:	4770      	bx	lr
 800a788:	b299      	uxth	r1, r3
 800a78a:	b909      	cbnz	r1, 800a790 <__lo0bits+0x2a>
 800a78c:	0c1b      	lsrs	r3, r3, #16
 800a78e:	2010      	movs	r0, #16
 800a790:	b2d9      	uxtb	r1, r3
 800a792:	b909      	cbnz	r1, 800a798 <__lo0bits+0x32>
 800a794:	3008      	adds	r0, #8
 800a796:	0a1b      	lsrs	r3, r3, #8
 800a798:	0719      	lsls	r1, r3, #28
 800a79a:	bf04      	itt	eq
 800a79c:	091b      	lsreq	r3, r3, #4
 800a79e:	3004      	addeq	r0, #4
 800a7a0:	0799      	lsls	r1, r3, #30
 800a7a2:	bf04      	itt	eq
 800a7a4:	089b      	lsreq	r3, r3, #2
 800a7a6:	3002      	addeq	r0, #2
 800a7a8:	07d9      	lsls	r1, r3, #31
 800a7aa:	d403      	bmi.n	800a7b4 <__lo0bits+0x4e>
 800a7ac:	085b      	lsrs	r3, r3, #1
 800a7ae:	f100 0001 	add.w	r0, r0, #1
 800a7b2:	d003      	beq.n	800a7bc <__lo0bits+0x56>
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	4770      	bx	lr
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	4770      	bx	lr
 800a7bc:	2020      	movs	r0, #32
 800a7be:	4770      	bx	lr

0800a7c0 <__i2b>:
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	f7ff ff07 	bl	800a5d8 <_Balloc>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	b928      	cbnz	r0, 800a7da <__i2b+0x1a>
 800a7ce:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <__i2b+0x24>)
 800a7d0:	4805      	ldr	r0, [pc, #20]	@ (800a7e8 <__i2b+0x28>)
 800a7d2:	f240 1145 	movw	r1, #325	@ 0x145
 800a7d6:	f000 fc39 	bl	800b04c <__assert_func>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	6144      	str	r4, [r0, #20]
 800a7de:	6103      	str	r3, [r0, #16]
 800a7e0:	bd10      	pop	{r4, pc}
 800a7e2:	bf00      	nop
 800a7e4:	0800b45c 	.word	0x0800b45c
 800a7e8:	0800b47e 	.word	0x0800b47e

0800a7ec <__multiply>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	4617      	mov	r7, r2
 800a7f2:	690a      	ldr	r2, [r1, #16]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	bfa8      	it	ge
 800a7fa:	463b      	movge	r3, r7
 800a7fc:	4689      	mov	r9, r1
 800a7fe:	bfa4      	itt	ge
 800a800:	460f      	movge	r7, r1
 800a802:	4699      	movge	r9, r3
 800a804:	693d      	ldr	r5, [r7, #16]
 800a806:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	eb05 060a 	add.w	r6, r5, sl
 800a812:	42b3      	cmp	r3, r6
 800a814:	b085      	sub	sp, #20
 800a816:	bfb8      	it	lt
 800a818:	3101      	addlt	r1, #1
 800a81a:	f7ff fedd 	bl	800a5d8 <_Balloc>
 800a81e:	b930      	cbnz	r0, 800a82e <__multiply+0x42>
 800a820:	4602      	mov	r2, r0
 800a822:	4b41      	ldr	r3, [pc, #260]	@ (800a928 <__multiply+0x13c>)
 800a824:	4841      	ldr	r0, [pc, #260]	@ (800a92c <__multiply+0x140>)
 800a826:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a82a:	f000 fc0f 	bl	800b04c <__assert_func>
 800a82e:	f100 0414 	add.w	r4, r0, #20
 800a832:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a836:	4623      	mov	r3, r4
 800a838:	2200      	movs	r2, #0
 800a83a:	4573      	cmp	r3, lr
 800a83c:	d320      	bcc.n	800a880 <__multiply+0x94>
 800a83e:	f107 0814 	add.w	r8, r7, #20
 800a842:	f109 0114 	add.w	r1, r9, #20
 800a846:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a84a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a84e:	9302      	str	r3, [sp, #8]
 800a850:	1beb      	subs	r3, r5, r7
 800a852:	3b15      	subs	r3, #21
 800a854:	f023 0303 	bic.w	r3, r3, #3
 800a858:	3304      	adds	r3, #4
 800a85a:	3715      	adds	r7, #21
 800a85c:	42bd      	cmp	r5, r7
 800a85e:	bf38      	it	cc
 800a860:	2304      	movcc	r3, #4
 800a862:	9301      	str	r3, [sp, #4]
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	9103      	str	r1, [sp, #12]
 800a868:	428b      	cmp	r3, r1
 800a86a:	d80c      	bhi.n	800a886 <__multiply+0x9a>
 800a86c:	2e00      	cmp	r6, #0
 800a86e:	dd03      	ble.n	800a878 <__multiply+0x8c>
 800a870:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a874:	2b00      	cmp	r3, #0
 800a876:	d055      	beq.n	800a924 <__multiply+0x138>
 800a878:	6106      	str	r6, [r0, #16]
 800a87a:	b005      	add	sp, #20
 800a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	f843 2b04 	str.w	r2, [r3], #4
 800a884:	e7d9      	b.n	800a83a <__multiply+0x4e>
 800a886:	f8b1 a000 	ldrh.w	sl, [r1]
 800a88a:	f1ba 0f00 	cmp.w	sl, #0
 800a88e:	d01f      	beq.n	800a8d0 <__multiply+0xe4>
 800a890:	46c4      	mov	ip, r8
 800a892:	46a1      	mov	r9, r4
 800a894:	2700      	movs	r7, #0
 800a896:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a89a:	f8d9 3000 	ldr.w	r3, [r9]
 800a89e:	fa1f fb82 	uxth.w	fp, r2
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8a8:	443b      	add	r3, r7
 800a8aa:	f8d9 7000 	ldr.w	r7, [r9]
 800a8ae:	0c12      	lsrs	r2, r2, #16
 800a8b0:	0c3f      	lsrs	r7, r7, #16
 800a8b2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a8b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8c0:	4565      	cmp	r5, ip
 800a8c2:	f849 3b04 	str.w	r3, [r9], #4
 800a8c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a8ca:	d8e4      	bhi.n	800a896 <__multiply+0xaa>
 800a8cc:	9b01      	ldr	r3, [sp, #4]
 800a8ce:	50e7      	str	r7, [r4, r3]
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a8d6:	3104      	adds	r1, #4
 800a8d8:	f1b9 0f00 	cmp.w	r9, #0
 800a8dc:	d020      	beq.n	800a920 <__multiply+0x134>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	4647      	mov	r7, r8
 800a8e2:	46a4      	mov	ip, r4
 800a8e4:	f04f 0a00 	mov.w	sl, #0
 800a8e8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a8ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a8f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a8f4:	4452      	add	r2, sl
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8fc:	f84c 3b04 	str.w	r3, [ip], #4
 800a900:	f857 3b04 	ldr.w	r3, [r7], #4
 800a904:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a908:	f8bc 3000 	ldrh.w	r3, [ip]
 800a90c:	fb09 330a 	mla	r3, r9, sl, r3
 800a910:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a914:	42bd      	cmp	r5, r7
 800a916:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a91a:	d8e5      	bhi.n	800a8e8 <__multiply+0xfc>
 800a91c:	9a01      	ldr	r2, [sp, #4]
 800a91e:	50a3      	str	r3, [r4, r2]
 800a920:	3404      	adds	r4, #4
 800a922:	e79f      	b.n	800a864 <__multiply+0x78>
 800a924:	3e01      	subs	r6, #1
 800a926:	e7a1      	b.n	800a86c <__multiply+0x80>
 800a928:	0800b45c 	.word	0x0800b45c
 800a92c:	0800b47e 	.word	0x0800b47e

0800a930 <__pow5mult>:
 800a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a934:	4615      	mov	r5, r2
 800a936:	f012 0203 	ands.w	r2, r2, #3
 800a93a:	4607      	mov	r7, r0
 800a93c:	460e      	mov	r6, r1
 800a93e:	d007      	beq.n	800a950 <__pow5mult+0x20>
 800a940:	4c25      	ldr	r4, [pc, #148]	@ (800a9d8 <__pow5mult+0xa8>)
 800a942:	3a01      	subs	r2, #1
 800a944:	2300      	movs	r3, #0
 800a946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a94a:	f7ff fea7 	bl	800a69c <__multadd>
 800a94e:	4606      	mov	r6, r0
 800a950:	10ad      	asrs	r5, r5, #2
 800a952:	d03d      	beq.n	800a9d0 <__pow5mult+0xa0>
 800a954:	69fc      	ldr	r4, [r7, #28]
 800a956:	b97c      	cbnz	r4, 800a978 <__pow5mult+0x48>
 800a958:	2010      	movs	r0, #16
 800a95a:	f7ff fcdb 	bl	800a314 <malloc>
 800a95e:	4602      	mov	r2, r0
 800a960:	61f8      	str	r0, [r7, #28]
 800a962:	b928      	cbnz	r0, 800a970 <__pow5mult+0x40>
 800a964:	4b1d      	ldr	r3, [pc, #116]	@ (800a9dc <__pow5mult+0xac>)
 800a966:	481e      	ldr	r0, [pc, #120]	@ (800a9e0 <__pow5mult+0xb0>)
 800a968:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a96c:	f000 fb6e 	bl	800b04c <__assert_func>
 800a970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a974:	6004      	str	r4, [r0, #0]
 800a976:	60c4      	str	r4, [r0, #12]
 800a978:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a97c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a980:	b94c      	cbnz	r4, 800a996 <__pow5mult+0x66>
 800a982:	f240 2171 	movw	r1, #625	@ 0x271
 800a986:	4638      	mov	r0, r7
 800a988:	f7ff ff1a 	bl	800a7c0 <__i2b>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a992:	4604      	mov	r4, r0
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	f04f 0900 	mov.w	r9, #0
 800a99a:	07eb      	lsls	r3, r5, #31
 800a99c:	d50a      	bpl.n	800a9b4 <__pow5mult+0x84>
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	f7ff ff22 	bl	800a7ec <__multiply>
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4680      	mov	r8, r0
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	f7ff fe53 	bl	800a658 <_Bfree>
 800a9b2:	4646      	mov	r6, r8
 800a9b4:	106d      	asrs	r5, r5, #1
 800a9b6:	d00b      	beq.n	800a9d0 <__pow5mult+0xa0>
 800a9b8:	6820      	ldr	r0, [r4, #0]
 800a9ba:	b938      	cbnz	r0, 800a9cc <__pow5mult+0x9c>
 800a9bc:	4622      	mov	r2, r4
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f7ff ff13 	bl	800a7ec <__multiply>
 800a9c6:	6020      	str	r0, [r4, #0]
 800a9c8:	f8c0 9000 	str.w	r9, [r0]
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	e7e4      	b.n	800a99a <__pow5mult+0x6a>
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800b520 	.word	0x0800b520
 800a9dc:	0800b3ed 	.word	0x0800b3ed
 800a9e0:	0800b47e 	.word	0x0800b47e

0800a9e4 <__lshift>:
 800a9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	6849      	ldr	r1, [r1, #4]
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	4691      	mov	r9, r2
 800a9f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9fc:	f108 0601 	add.w	r6, r8, #1
 800aa00:	42b3      	cmp	r3, r6
 800aa02:	db0b      	blt.n	800aa1c <__lshift+0x38>
 800aa04:	4638      	mov	r0, r7
 800aa06:	f7ff fde7 	bl	800a5d8 <_Balloc>
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	b948      	cbnz	r0, 800aa22 <__lshift+0x3e>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	4b28      	ldr	r3, [pc, #160]	@ (800aab4 <__lshift+0xd0>)
 800aa12:	4829      	ldr	r0, [pc, #164]	@ (800aab8 <__lshift+0xd4>)
 800aa14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa18:	f000 fb18 	bl	800b04c <__assert_func>
 800aa1c:	3101      	adds	r1, #1
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	e7ee      	b.n	800aa00 <__lshift+0x1c>
 800aa22:	2300      	movs	r3, #0
 800aa24:	f100 0114 	add.w	r1, r0, #20
 800aa28:	f100 0210 	add.w	r2, r0, #16
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	4553      	cmp	r3, sl
 800aa30:	db33      	blt.n	800aa9a <__lshift+0xb6>
 800aa32:	6920      	ldr	r0, [r4, #16]
 800aa34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa38:	f104 0314 	add.w	r3, r4, #20
 800aa3c:	f019 091f 	ands.w	r9, r9, #31
 800aa40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa48:	d02b      	beq.n	800aaa2 <__lshift+0xbe>
 800aa4a:	f1c9 0e20 	rsb	lr, r9, #32
 800aa4e:	468a      	mov	sl, r1
 800aa50:	2200      	movs	r2, #0
 800aa52:	6818      	ldr	r0, [r3, #0]
 800aa54:	fa00 f009 	lsl.w	r0, r0, r9
 800aa58:	4310      	orrs	r0, r2
 800aa5a:	f84a 0b04 	str.w	r0, [sl], #4
 800aa5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa62:	459c      	cmp	ip, r3
 800aa64:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa68:	d8f3      	bhi.n	800aa52 <__lshift+0x6e>
 800aa6a:	ebac 0304 	sub.w	r3, ip, r4
 800aa6e:	3b15      	subs	r3, #21
 800aa70:	f023 0303 	bic.w	r3, r3, #3
 800aa74:	3304      	adds	r3, #4
 800aa76:	f104 0015 	add.w	r0, r4, #21
 800aa7a:	4560      	cmp	r0, ip
 800aa7c:	bf88      	it	hi
 800aa7e:	2304      	movhi	r3, #4
 800aa80:	50ca      	str	r2, [r1, r3]
 800aa82:	b10a      	cbz	r2, 800aa88 <__lshift+0xa4>
 800aa84:	f108 0602 	add.w	r6, r8, #2
 800aa88:	3e01      	subs	r6, #1
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	612e      	str	r6, [r5, #16]
 800aa8e:	4621      	mov	r1, r4
 800aa90:	f7ff fde2 	bl	800a658 <_Bfree>
 800aa94:	4628      	mov	r0, r5
 800aa96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	e7c5      	b.n	800aa2e <__lshift+0x4a>
 800aaa2:	3904      	subs	r1, #4
 800aaa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaac:	459c      	cmp	ip, r3
 800aaae:	d8f9      	bhi.n	800aaa4 <__lshift+0xc0>
 800aab0:	e7ea      	b.n	800aa88 <__lshift+0xa4>
 800aab2:	bf00      	nop
 800aab4:	0800b45c 	.word	0x0800b45c
 800aab8:	0800b47e 	.word	0x0800b47e

0800aabc <__mcmp>:
 800aabc:	690a      	ldr	r2, [r1, #16]
 800aabe:	4603      	mov	r3, r0
 800aac0:	6900      	ldr	r0, [r0, #16]
 800aac2:	1a80      	subs	r0, r0, r2
 800aac4:	b530      	push	{r4, r5, lr}
 800aac6:	d10e      	bne.n	800aae6 <__mcmp+0x2a>
 800aac8:	3314      	adds	r3, #20
 800aaca:	3114      	adds	r1, #20
 800aacc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aad0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aad4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aad8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aadc:	4295      	cmp	r5, r2
 800aade:	d003      	beq.n	800aae8 <__mcmp+0x2c>
 800aae0:	d205      	bcs.n	800aaee <__mcmp+0x32>
 800aae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aae6:	bd30      	pop	{r4, r5, pc}
 800aae8:	42a3      	cmp	r3, r4
 800aaea:	d3f3      	bcc.n	800aad4 <__mcmp+0x18>
 800aaec:	e7fb      	b.n	800aae6 <__mcmp+0x2a>
 800aaee:	2001      	movs	r0, #1
 800aaf0:	e7f9      	b.n	800aae6 <__mcmp+0x2a>
	...

0800aaf4 <__mdiff>:
 800aaf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	4689      	mov	r9, r1
 800aafa:	4606      	mov	r6, r0
 800aafc:	4611      	mov	r1, r2
 800aafe:	4648      	mov	r0, r9
 800ab00:	4614      	mov	r4, r2
 800ab02:	f7ff ffdb 	bl	800aabc <__mcmp>
 800ab06:	1e05      	subs	r5, r0, #0
 800ab08:	d112      	bne.n	800ab30 <__mdiff+0x3c>
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7ff fd63 	bl	800a5d8 <_Balloc>
 800ab12:	4602      	mov	r2, r0
 800ab14:	b928      	cbnz	r0, 800ab22 <__mdiff+0x2e>
 800ab16:	4b3f      	ldr	r3, [pc, #252]	@ (800ac14 <__mdiff+0x120>)
 800ab18:	f240 2137 	movw	r1, #567	@ 0x237
 800ab1c:	483e      	ldr	r0, [pc, #248]	@ (800ac18 <__mdiff+0x124>)
 800ab1e:	f000 fa95 	bl	800b04c <__assert_func>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab28:	4610      	mov	r0, r2
 800ab2a:	b003      	add	sp, #12
 800ab2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab30:	bfbc      	itt	lt
 800ab32:	464b      	movlt	r3, r9
 800ab34:	46a1      	movlt	r9, r4
 800ab36:	4630      	mov	r0, r6
 800ab38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab3c:	bfba      	itte	lt
 800ab3e:	461c      	movlt	r4, r3
 800ab40:	2501      	movlt	r5, #1
 800ab42:	2500      	movge	r5, #0
 800ab44:	f7ff fd48 	bl	800a5d8 <_Balloc>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	b918      	cbnz	r0, 800ab54 <__mdiff+0x60>
 800ab4c:	4b31      	ldr	r3, [pc, #196]	@ (800ac14 <__mdiff+0x120>)
 800ab4e:	f240 2145 	movw	r1, #581	@ 0x245
 800ab52:	e7e3      	b.n	800ab1c <__mdiff+0x28>
 800ab54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab58:	6926      	ldr	r6, [r4, #16]
 800ab5a:	60c5      	str	r5, [r0, #12]
 800ab5c:	f109 0310 	add.w	r3, r9, #16
 800ab60:	f109 0514 	add.w	r5, r9, #20
 800ab64:	f104 0e14 	add.w	lr, r4, #20
 800ab68:	f100 0b14 	add.w	fp, r0, #20
 800ab6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	46d9      	mov	r9, fp
 800ab78:	f04f 0c00 	mov.w	ip, #0
 800ab7c:	9b01      	ldr	r3, [sp, #4]
 800ab7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab82:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	fa1f f38a 	uxth.w	r3, sl
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	b283      	uxth	r3, r0
 800ab90:	1acb      	subs	r3, r1, r3
 800ab92:	0c00      	lsrs	r0, r0, #16
 800ab94:	4463      	add	r3, ip
 800ab96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aba4:	4576      	cmp	r6, lr
 800aba6:	f849 3b04 	str.w	r3, [r9], #4
 800abaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abae:	d8e5      	bhi.n	800ab7c <__mdiff+0x88>
 800abb0:	1b33      	subs	r3, r6, r4
 800abb2:	3b15      	subs	r3, #21
 800abb4:	f023 0303 	bic.w	r3, r3, #3
 800abb8:	3415      	adds	r4, #21
 800abba:	3304      	adds	r3, #4
 800abbc:	42a6      	cmp	r6, r4
 800abbe:	bf38      	it	cc
 800abc0:	2304      	movcc	r3, #4
 800abc2:	441d      	add	r5, r3
 800abc4:	445b      	add	r3, fp
 800abc6:	461e      	mov	r6, r3
 800abc8:	462c      	mov	r4, r5
 800abca:	4544      	cmp	r4, r8
 800abcc:	d30e      	bcc.n	800abec <__mdiff+0xf8>
 800abce:	f108 0103 	add.w	r1, r8, #3
 800abd2:	1b49      	subs	r1, r1, r5
 800abd4:	f021 0103 	bic.w	r1, r1, #3
 800abd8:	3d03      	subs	r5, #3
 800abda:	45a8      	cmp	r8, r5
 800abdc:	bf38      	it	cc
 800abde:	2100      	movcc	r1, #0
 800abe0:	440b      	add	r3, r1
 800abe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abe6:	b191      	cbz	r1, 800ac0e <__mdiff+0x11a>
 800abe8:	6117      	str	r7, [r2, #16]
 800abea:	e79d      	b.n	800ab28 <__mdiff+0x34>
 800abec:	f854 1b04 	ldr.w	r1, [r4], #4
 800abf0:	46e6      	mov	lr, ip
 800abf2:	0c08      	lsrs	r0, r1, #16
 800abf4:	fa1c fc81 	uxtah	ip, ip, r1
 800abf8:	4471      	add	r1, lr
 800abfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800abfe:	b289      	uxth	r1, r1
 800ac00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac04:	f846 1b04 	str.w	r1, [r6], #4
 800ac08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac0c:	e7dd      	b.n	800abca <__mdiff+0xd6>
 800ac0e:	3f01      	subs	r7, #1
 800ac10:	e7e7      	b.n	800abe2 <__mdiff+0xee>
 800ac12:	bf00      	nop
 800ac14:	0800b45c 	.word	0x0800b45c
 800ac18:	0800b47e 	.word	0x0800b47e

0800ac1c <__d2b>:
 800ac1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac20:	460f      	mov	r7, r1
 800ac22:	2101      	movs	r1, #1
 800ac24:	ec59 8b10 	vmov	r8, r9, d0
 800ac28:	4616      	mov	r6, r2
 800ac2a:	f7ff fcd5 	bl	800a5d8 <_Balloc>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	b930      	cbnz	r0, 800ac40 <__d2b+0x24>
 800ac32:	4602      	mov	r2, r0
 800ac34:	4b23      	ldr	r3, [pc, #140]	@ (800acc4 <__d2b+0xa8>)
 800ac36:	4824      	ldr	r0, [pc, #144]	@ (800acc8 <__d2b+0xac>)
 800ac38:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac3c:	f000 fa06 	bl	800b04c <__assert_func>
 800ac40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac48:	b10d      	cbz	r5, 800ac4e <__d2b+0x32>
 800ac4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	f1b8 0300 	subs.w	r3, r8, #0
 800ac54:	d023      	beq.n	800ac9e <__d2b+0x82>
 800ac56:	4668      	mov	r0, sp
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	f7ff fd84 	bl	800a766 <__lo0bits>
 800ac5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac62:	b1d0      	cbz	r0, 800ac9a <__d2b+0x7e>
 800ac64:	f1c0 0320 	rsb	r3, r0, #32
 800ac68:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6c:	430b      	orrs	r3, r1
 800ac6e:	40c2      	lsrs	r2, r0
 800ac70:	6163      	str	r3, [r4, #20]
 800ac72:	9201      	str	r2, [sp, #4]
 800ac74:	9b01      	ldr	r3, [sp, #4]
 800ac76:	61a3      	str	r3, [r4, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2201      	moveq	r2, #1
 800ac7e:	2202      	movne	r2, #2
 800ac80:	6122      	str	r2, [r4, #16]
 800ac82:	b1a5      	cbz	r5, 800acae <__d2b+0x92>
 800ac84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ac88:	4405      	add	r5, r0
 800ac8a:	603d      	str	r5, [r7, #0]
 800ac8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac90:	6030      	str	r0, [r6, #0]
 800ac92:	4620      	mov	r0, r4
 800ac94:	b003      	add	sp, #12
 800ac96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	6161      	str	r1, [r4, #20]
 800ac9c:	e7ea      	b.n	800ac74 <__d2b+0x58>
 800ac9e:	a801      	add	r0, sp, #4
 800aca0:	f7ff fd61 	bl	800a766 <__lo0bits>
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	6163      	str	r3, [r4, #20]
 800aca8:	3020      	adds	r0, #32
 800acaa:	2201      	movs	r2, #1
 800acac:	e7e8      	b.n	800ac80 <__d2b+0x64>
 800acae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acb6:	6038      	str	r0, [r7, #0]
 800acb8:	6918      	ldr	r0, [r3, #16]
 800acba:	f7ff fd35 	bl	800a728 <__hi0bits>
 800acbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acc2:	e7e5      	b.n	800ac90 <__d2b+0x74>
 800acc4:	0800b45c 	.word	0x0800b45c
 800acc8:	0800b47e 	.word	0x0800b47e

0800accc <__sread>:
 800accc:	b510      	push	{r4, lr}
 800acce:	460c      	mov	r4, r1
 800acd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd4:	f000 f956 	bl	800af84 <_read_r>
 800acd8:	2800      	cmp	r0, #0
 800acda:	bfab      	itete	ge
 800acdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800acde:	89a3      	ldrhlt	r3, [r4, #12]
 800ace0:	181b      	addge	r3, r3, r0
 800ace2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ace6:	bfac      	ite	ge
 800ace8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800acea:	81a3      	strhlt	r3, [r4, #12]
 800acec:	bd10      	pop	{r4, pc}

0800acee <__swrite>:
 800acee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf2:	461f      	mov	r7, r3
 800acf4:	898b      	ldrh	r3, [r1, #12]
 800acf6:	05db      	lsls	r3, r3, #23
 800acf8:	4605      	mov	r5, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	4616      	mov	r6, r2
 800acfe:	d505      	bpl.n	800ad0c <__swrite+0x1e>
 800ad00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad04:	2302      	movs	r3, #2
 800ad06:	2200      	movs	r2, #0
 800ad08:	f000 f92a 	bl	800af60 <_lseek_r>
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad16:	81a3      	strh	r3, [r4, #12]
 800ad18:	4632      	mov	r2, r6
 800ad1a:	463b      	mov	r3, r7
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad22:	f000 b951 	b.w	800afc8 <_write_r>

0800ad26 <__sseek>:
 800ad26:	b510      	push	{r4, lr}
 800ad28:	460c      	mov	r4, r1
 800ad2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2e:	f000 f917 	bl	800af60 <_lseek_r>
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	bf15      	itete	ne
 800ad38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad42:	81a3      	strheq	r3, [r4, #12]
 800ad44:	bf18      	it	ne
 800ad46:	81a3      	strhne	r3, [r4, #12]
 800ad48:	bd10      	pop	{r4, pc}

0800ad4a <__sclose>:
 800ad4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4e:	f000 b94d 	b.w	800afec <_close_r>

0800ad52 <__swbuf_r>:
 800ad52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad54:	460e      	mov	r6, r1
 800ad56:	4614      	mov	r4, r2
 800ad58:	4605      	mov	r5, r0
 800ad5a:	b118      	cbz	r0, 800ad64 <__swbuf_r+0x12>
 800ad5c:	6a03      	ldr	r3, [r0, #32]
 800ad5e:	b90b      	cbnz	r3, 800ad64 <__swbuf_r+0x12>
 800ad60:	f7fe fa5e 	bl	8009220 <__sinit>
 800ad64:	69a3      	ldr	r3, [r4, #24]
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	071a      	lsls	r2, r3, #28
 800ad6c:	d501      	bpl.n	800ad72 <__swbuf_r+0x20>
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	b943      	cbnz	r3, 800ad84 <__swbuf_r+0x32>
 800ad72:	4621      	mov	r1, r4
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 f82b 	bl	800add0 <__swsetup_r>
 800ad7a:	b118      	cbz	r0, 800ad84 <__swbuf_r+0x32>
 800ad7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ad80:	4638      	mov	r0, r7
 800ad82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	6922      	ldr	r2, [r4, #16]
 800ad88:	1a98      	subs	r0, r3, r2
 800ad8a:	6963      	ldr	r3, [r4, #20]
 800ad8c:	b2f6      	uxtb	r6, r6
 800ad8e:	4283      	cmp	r3, r0
 800ad90:	4637      	mov	r7, r6
 800ad92:	dc05      	bgt.n	800ada0 <__swbuf_r+0x4e>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7ff fbea 	bl	800a570 <_fflush_r>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d1ed      	bne.n	800ad7c <__swbuf_r+0x2a>
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	60a3      	str	r3, [r4, #8]
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	1c5a      	adds	r2, r3, #1
 800adaa:	6022      	str	r2, [r4, #0]
 800adac:	701e      	strb	r6, [r3, #0]
 800adae:	6962      	ldr	r2, [r4, #20]
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d004      	beq.n	800adc0 <__swbuf_r+0x6e>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	07db      	lsls	r3, r3, #31
 800adba:	d5e1      	bpl.n	800ad80 <__swbuf_r+0x2e>
 800adbc:	2e0a      	cmp	r6, #10
 800adbe:	d1df      	bne.n	800ad80 <__swbuf_r+0x2e>
 800adc0:	4621      	mov	r1, r4
 800adc2:	4628      	mov	r0, r5
 800adc4:	f7ff fbd4 	bl	800a570 <_fflush_r>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d0d9      	beq.n	800ad80 <__swbuf_r+0x2e>
 800adcc:	e7d6      	b.n	800ad7c <__swbuf_r+0x2a>
	...

0800add0 <__swsetup_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4b29      	ldr	r3, [pc, #164]	@ (800ae78 <__swsetup_r+0xa8>)
 800add4:	4605      	mov	r5, r0
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	460c      	mov	r4, r1
 800adda:	b118      	cbz	r0, 800ade4 <__swsetup_r+0x14>
 800addc:	6a03      	ldr	r3, [r0, #32]
 800adde:	b90b      	cbnz	r3, 800ade4 <__swsetup_r+0x14>
 800ade0:	f7fe fa1e 	bl	8009220 <__sinit>
 800ade4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade8:	0719      	lsls	r1, r3, #28
 800adea:	d422      	bmi.n	800ae32 <__swsetup_r+0x62>
 800adec:	06da      	lsls	r2, r3, #27
 800adee:	d407      	bmi.n	800ae00 <__swsetup_r+0x30>
 800adf0:	2209      	movs	r2, #9
 800adf2:	602a      	str	r2, [r5, #0]
 800adf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adf8:	81a3      	strh	r3, [r4, #12]
 800adfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adfe:	e033      	b.n	800ae68 <__swsetup_r+0x98>
 800ae00:	0758      	lsls	r0, r3, #29
 800ae02:	d512      	bpl.n	800ae2a <__swsetup_r+0x5a>
 800ae04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae06:	b141      	cbz	r1, 800ae1a <__swsetup_r+0x4a>
 800ae08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	d002      	beq.n	800ae16 <__swsetup_r+0x46>
 800ae10:	4628      	mov	r0, r5
 800ae12:	f000 f94d 	bl	800b0b0 <_free_r>
 800ae16:	2300      	movs	r3, #0
 800ae18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	2300      	movs	r3, #0
 800ae24:	6063      	str	r3, [r4, #4]
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f043 0308 	orr.w	r3, r3, #8
 800ae30:	81a3      	strh	r3, [r4, #12]
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	b94b      	cbnz	r3, 800ae4a <__swsetup_r+0x7a>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae40:	d003      	beq.n	800ae4a <__swsetup_r+0x7a>
 800ae42:	4621      	mov	r1, r4
 800ae44:	4628      	mov	r0, r5
 800ae46:	f000 f83f 	bl	800aec8 <__smakebuf_r>
 800ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4e:	f013 0201 	ands.w	r2, r3, #1
 800ae52:	d00a      	beq.n	800ae6a <__swsetup_r+0x9a>
 800ae54:	2200      	movs	r2, #0
 800ae56:	60a2      	str	r2, [r4, #8]
 800ae58:	6962      	ldr	r2, [r4, #20]
 800ae5a:	4252      	negs	r2, r2
 800ae5c:	61a2      	str	r2, [r4, #24]
 800ae5e:	6922      	ldr	r2, [r4, #16]
 800ae60:	b942      	cbnz	r2, 800ae74 <__swsetup_r+0xa4>
 800ae62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae66:	d1c5      	bne.n	800adf4 <__swsetup_r+0x24>
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	0799      	lsls	r1, r3, #30
 800ae6c:	bf58      	it	pl
 800ae6e:	6962      	ldrpl	r2, [r4, #20]
 800ae70:	60a2      	str	r2, [r4, #8]
 800ae72:	e7f4      	b.n	800ae5e <__swsetup_r+0x8e>
 800ae74:	2000      	movs	r0, #0
 800ae76:	e7f7      	b.n	800ae68 <__swsetup_r+0x98>
 800ae78:	2000002c 	.word	0x2000002c

0800ae7c <__swhatbuf_r>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	460c      	mov	r4, r1
 800ae80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae84:	2900      	cmp	r1, #0
 800ae86:	b096      	sub	sp, #88	@ 0x58
 800ae88:	4615      	mov	r5, r2
 800ae8a:	461e      	mov	r6, r3
 800ae8c:	da0d      	bge.n	800aeaa <__swhatbuf_r+0x2e>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae94:	f04f 0100 	mov.w	r1, #0
 800ae98:	bf14      	ite	ne
 800ae9a:	2340      	movne	r3, #64	@ 0x40
 800ae9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aea0:	2000      	movs	r0, #0
 800aea2:	6031      	str	r1, [r6, #0]
 800aea4:	602b      	str	r3, [r5, #0]
 800aea6:	b016      	add	sp, #88	@ 0x58
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	466a      	mov	r2, sp
 800aeac:	f000 f8ae 	bl	800b00c <_fstat_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	dbec      	blt.n	800ae8e <__swhatbuf_r+0x12>
 800aeb4:	9901      	ldr	r1, [sp, #4]
 800aeb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aeba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aebe:	4259      	negs	r1, r3
 800aec0:	4159      	adcs	r1, r3
 800aec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aec6:	e7eb      	b.n	800aea0 <__swhatbuf_r+0x24>

0800aec8 <__smakebuf_r>:
 800aec8:	898b      	ldrh	r3, [r1, #12]
 800aeca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aecc:	079d      	lsls	r5, r3, #30
 800aece:	4606      	mov	r6, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	d507      	bpl.n	800aee4 <__smakebuf_r+0x1c>
 800aed4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	6123      	str	r3, [r4, #16]
 800aedc:	2301      	movs	r3, #1
 800aede:	6163      	str	r3, [r4, #20]
 800aee0:	b003      	add	sp, #12
 800aee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee4:	ab01      	add	r3, sp, #4
 800aee6:	466a      	mov	r2, sp
 800aee8:	f7ff ffc8 	bl	800ae7c <__swhatbuf_r>
 800aeec:	9f00      	ldr	r7, [sp, #0]
 800aeee:	4605      	mov	r5, r0
 800aef0:	4639      	mov	r1, r7
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7ff fa38 	bl	800a368 <_malloc_r>
 800aef8:	b948      	cbnz	r0, 800af0e <__smakebuf_r+0x46>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	059a      	lsls	r2, r3, #22
 800af00:	d4ee      	bmi.n	800aee0 <__smakebuf_r+0x18>
 800af02:	f023 0303 	bic.w	r3, r3, #3
 800af06:	f043 0302 	orr.w	r3, r3, #2
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	e7e2      	b.n	800aed4 <__smakebuf_r+0xc>
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	6020      	str	r0, [r4, #0]
 800af12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af1e:	b15b      	cbz	r3, 800af38 <__smakebuf_r+0x70>
 800af20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af24:	4630      	mov	r0, r6
 800af26:	f000 f80b 	bl	800af40 <_isatty_r>
 800af2a:	b128      	cbz	r0, 800af38 <__smakebuf_r+0x70>
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	f023 0303 	bic.w	r3, r3, #3
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	431d      	orrs	r5, r3
 800af3c:	81a5      	strh	r5, [r4, #12]
 800af3e:	e7cf      	b.n	800aee0 <__smakebuf_r+0x18>

0800af40 <_isatty_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d06      	ldr	r5, [pc, #24]	@ (800af5c <_isatty_r+0x1c>)
 800af44:	2300      	movs	r3, #0
 800af46:	4604      	mov	r4, r0
 800af48:	4608      	mov	r0, r1
 800af4a:	602b      	str	r3, [r5, #0]
 800af4c:	f7f7 fa12 	bl	8002374 <_isatty>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_isatty_r+0x1a>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_isatty_r+0x1a>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	20000bb0 	.word	0x20000bb0

0800af60 <_lseek_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	@ (800af80 <_lseek_r+0x20>)
 800af64:	4604      	mov	r4, r0
 800af66:	4608      	mov	r0, r1
 800af68:	4611      	mov	r1, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	602a      	str	r2, [r5, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	f7f7 fa0b 	bl	800238a <_lseek>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_lseek_r+0x1e>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_lseek_r+0x1e>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20000bb0 	.word	0x20000bb0

0800af84 <_read_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d07      	ldr	r5, [pc, #28]	@ (800afa4 <_read_r+0x20>)
 800af88:	4604      	mov	r4, r0
 800af8a:	4608      	mov	r0, r1
 800af8c:	4611      	mov	r1, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	602a      	str	r2, [r5, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	f7f7 f999 	bl	80022ca <_read>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_read_r+0x1e>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_read_r+0x1e>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	20000bb0 	.word	0x20000bb0

0800afa8 <_sbrk_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4d06      	ldr	r5, [pc, #24]	@ (800afc4 <_sbrk_r+0x1c>)
 800afac:	2300      	movs	r3, #0
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	f7f7 f9f6 	bl	80023a4 <_sbrk>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_sbrk_r+0x1a>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_sbrk_r+0x1a>
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	20000bb0 	.word	0x20000bb0

0800afc8 <_write_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	@ (800afe8 <_write_r+0x20>)
 800afcc:	4604      	mov	r4, r0
 800afce:	4608      	mov	r0, r1
 800afd0:	4611      	mov	r1, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f7f7 f994 	bl	8002304 <_write>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_write_r+0x1e>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_write_r+0x1e>
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	20000bb0 	.word	0x20000bb0

0800afec <_close_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d06      	ldr	r5, [pc, #24]	@ (800b008 <_close_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f7 f9a0 	bl	800233c <_close>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_close_r+0x1a>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_close_r+0x1a>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20000bb0 	.word	0x20000bb0

0800b00c <_fstat_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	@ (800b02c <_fstat_r+0x20>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	4611      	mov	r1, r2
 800b018:	602b      	str	r3, [r5, #0]
 800b01a:	f7f7 f99b 	bl	8002354 <_fstat>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	d102      	bne.n	800b028 <_fstat_r+0x1c>
 800b022:	682b      	ldr	r3, [r5, #0]
 800b024:	b103      	cbz	r3, 800b028 <_fstat_r+0x1c>
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	bd38      	pop	{r3, r4, r5, pc}
 800b02a:	bf00      	nop
 800b02c:	20000bb0 	.word	0x20000bb0

0800b030 <memcpy>:
 800b030:	440a      	add	r2, r1
 800b032:	4291      	cmp	r1, r2
 800b034:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b038:	d100      	bne.n	800b03c <memcpy+0xc>
 800b03a:	4770      	bx	lr
 800b03c:	b510      	push	{r4, lr}
 800b03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b046:	4291      	cmp	r1, r2
 800b048:	d1f9      	bne.n	800b03e <memcpy+0xe>
 800b04a:	bd10      	pop	{r4, pc}

0800b04c <__assert_func>:
 800b04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b04e:	4614      	mov	r4, r2
 800b050:	461a      	mov	r2, r3
 800b052:	4b09      	ldr	r3, [pc, #36]	@ (800b078 <__assert_func+0x2c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4605      	mov	r5, r0
 800b058:	68d8      	ldr	r0, [r3, #12]
 800b05a:	b14c      	cbz	r4, 800b070 <__assert_func+0x24>
 800b05c:	4b07      	ldr	r3, [pc, #28]	@ (800b07c <__assert_func+0x30>)
 800b05e:	9100      	str	r1, [sp, #0]
 800b060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b064:	4906      	ldr	r1, [pc, #24]	@ (800b080 <__assert_func+0x34>)
 800b066:	462b      	mov	r3, r5
 800b068:	f000 f87e 	bl	800b168 <fiprintf>
 800b06c:	f000 f89b 	bl	800b1a6 <abort>
 800b070:	4b04      	ldr	r3, [pc, #16]	@ (800b084 <__assert_func+0x38>)
 800b072:	461c      	mov	r4, r3
 800b074:	e7f3      	b.n	800b05e <__assert_func+0x12>
 800b076:	bf00      	nop
 800b078:	2000002c 	.word	0x2000002c
 800b07c:	0800b4e1 	.word	0x0800b4e1
 800b080:	0800b4ee 	.word	0x0800b4ee
 800b084:	0800b51c 	.word	0x0800b51c

0800b088 <_calloc_r>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	fba1 5402 	umull	r5, r4, r1, r2
 800b08e:	b934      	cbnz	r4, 800b09e <_calloc_r+0x16>
 800b090:	4629      	mov	r1, r5
 800b092:	f7ff f969 	bl	800a368 <_malloc_r>
 800b096:	4606      	mov	r6, r0
 800b098:	b928      	cbnz	r0, 800b0a6 <_calloc_r+0x1e>
 800b09a:	4630      	mov	r0, r6
 800b09c:	bd70      	pop	{r4, r5, r6, pc}
 800b09e:	220c      	movs	r2, #12
 800b0a0:	6002      	str	r2, [r0, #0]
 800b0a2:	2600      	movs	r6, #0
 800b0a4:	e7f9      	b.n	800b09a <_calloc_r+0x12>
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	f7fe f95f 	bl	800936c <memset>
 800b0ae:	e7f4      	b.n	800b09a <_calloc_r+0x12>

0800b0b0 <_free_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	d041      	beq.n	800b13c <_free_r+0x8c>
 800b0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0bc:	1f0c      	subs	r4, r1, #4
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bfb8      	it	lt
 800b0c2:	18e4      	addlt	r4, r4, r3
 800b0c4:	f7ff fa7c 	bl	800a5c0 <__malloc_lock>
 800b0c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b140 <_free_r+0x90>)
 800b0ca:	6813      	ldr	r3, [r2, #0]
 800b0cc:	b933      	cbnz	r3, 800b0dc <_free_r+0x2c>
 800b0ce:	6063      	str	r3, [r4, #4]
 800b0d0:	6014      	str	r4, [r2, #0]
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0d8:	f7ff ba78 	b.w	800a5cc <__malloc_unlock>
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	d908      	bls.n	800b0f2 <_free_r+0x42>
 800b0e0:	6820      	ldr	r0, [r4, #0]
 800b0e2:	1821      	adds	r1, r4, r0
 800b0e4:	428b      	cmp	r3, r1
 800b0e6:	bf01      	itttt	eq
 800b0e8:	6819      	ldreq	r1, [r3, #0]
 800b0ea:	685b      	ldreq	r3, [r3, #4]
 800b0ec:	1809      	addeq	r1, r1, r0
 800b0ee:	6021      	streq	r1, [r4, #0]
 800b0f0:	e7ed      	b.n	800b0ce <_free_r+0x1e>
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	b10b      	cbz	r3, 800b0fc <_free_r+0x4c>
 800b0f8:	42a3      	cmp	r3, r4
 800b0fa:	d9fa      	bls.n	800b0f2 <_free_r+0x42>
 800b0fc:	6811      	ldr	r1, [r2, #0]
 800b0fe:	1850      	adds	r0, r2, r1
 800b100:	42a0      	cmp	r0, r4
 800b102:	d10b      	bne.n	800b11c <_free_r+0x6c>
 800b104:	6820      	ldr	r0, [r4, #0]
 800b106:	4401      	add	r1, r0
 800b108:	1850      	adds	r0, r2, r1
 800b10a:	4283      	cmp	r3, r0
 800b10c:	6011      	str	r1, [r2, #0]
 800b10e:	d1e0      	bne.n	800b0d2 <_free_r+0x22>
 800b110:	6818      	ldr	r0, [r3, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	6053      	str	r3, [r2, #4]
 800b116:	4408      	add	r0, r1
 800b118:	6010      	str	r0, [r2, #0]
 800b11a:	e7da      	b.n	800b0d2 <_free_r+0x22>
 800b11c:	d902      	bls.n	800b124 <_free_r+0x74>
 800b11e:	230c      	movs	r3, #12
 800b120:	602b      	str	r3, [r5, #0]
 800b122:	e7d6      	b.n	800b0d2 <_free_r+0x22>
 800b124:	6820      	ldr	r0, [r4, #0]
 800b126:	1821      	adds	r1, r4, r0
 800b128:	428b      	cmp	r3, r1
 800b12a:	bf04      	itt	eq
 800b12c:	6819      	ldreq	r1, [r3, #0]
 800b12e:	685b      	ldreq	r3, [r3, #4]
 800b130:	6063      	str	r3, [r4, #4]
 800b132:	bf04      	itt	eq
 800b134:	1809      	addeq	r1, r1, r0
 800b136:	6021      	streq	r1, [r4, #0]
 800b138:	6054      	str	r4, [r2, #4]
 800b13a:	e7ca      	b.n	800b0d2 <_free_r+0x22>
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	bf00      	nop
 800b140:	20000bac 	.word	0x20000bac

0800b144 <__ascii_mbtowc>:
 800b144:	b082      	sub	sp, #8
 800b146:	b901      	cbnz	r1, 800b14a <__ascii_mbtowc+0x6>
 800b148:	a901      	add	r1, sp, #4
 800b14a:	b142      	cbz	r2, 800b15e <__ascii_mbtowc+0x1a>
 800b14c:	b14b      	cbz	r3, 800b162 <__ascii_mbtowc+0x1e>
 800b14e:	7813      	ldrb	r3, [r2, #0]
 800b150:	600b      	str	r3, [r1, #0]
 800b152:	7812      	ldrb	r2, [r2, #0]
 800b154:	1e10      	subs	r0, r2, #0
 800b156:	bf18      	it	ne
 800b158:	2001      	movne	r0, #1
 800b15a:	b002      	add	sp, #8
 800b15c:	4770      	bx	lr
 800b15e:	4610      	mov	r0, r2
 800b160:	e7fb      	b.n	800b15a <__ascii_mbtowc+0x16>
 800b162:	f06f 0001 	mvn.w	r0, #1
 800b166:	e7f8      	b.n	800b15a <__ascii_mbtowc+0x16>

0800b168 <fiprintf>:
 800b168:	b40e      	push	{r1, r2, r3}
 800b16a:	b503      	push	{r0, r1, lr}
 800b16c:	4601      	mov	r1, r0
 800b16e:	ab03      	add	r3, sp, #12
 800b170:	4805      	ldr	r0, [pc, #20]	@ (800b188 <fiprintf+0x20>)
 800b172:	f853 2b04 	ldr.w	r2, [r3], #4
 800b176:	6800      	ldr	r0, [r0, #0]
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	f7fe ffb3 	bl	800a0e4 <_vfiprintf_r>
 800b17e:	b002      	add	sp, #8
 800b180:	f85d eb04 	ldr.w	lr, [sp], #4
 800b184:	b003      	add	sp, #12
 800b186:	4770      	bx	lr
 800b188:	2000002c 	.word	0x2000002c

0800b18c <__ascii_wctomb>:
 800b18c:	4603      	mov	r3, r0
 800b18e:	4608      	mov	r0, r1
 800b190:	b141      	cbz	r1, 800b1a4 <__ascii_wctomb+0x18>
 800b192:	2aff      	cmp	r2, #255	@ 0xff
 800b194:	d904      	bls.n	800b1a0 <__ascii_wctomb+0x14>
 800b196:	228a      	movs	r2, #138	@ 0x8a
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b19e:	4770      	bx	lr
 800b1a0:	700a      	strb	r2, [r1, #0]
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	4770      	bx	lr

0800b1a6 <abort>:
 800b1a6:	b508      	push	{r3, lr}
 800b1a8:	2006      	movs	r0, #6
 800b1aa:	f000 f82b 	bl	800b204 <raise>
 800b1ae:	2001      	movs	r0, #1
 800b1b0:	f7f7 f880 	bl	80022b4 <_exit>

0800b1b4 <_raise_r>:
 800b1b4:	291f      	cmp	r1, #31
 800b1b6:	b538      	push	{r3, r4, r5, lr}
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	d904      	bls.n	800b1c8 <_raise_r+0x14>
 800b1be:	2316      	movs	r3, #22
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
 800b1c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1ca:	b112      	cbz	r2, 800b1d2 <_raise_r+0x1e>
 800b1cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1d0:	b94b      	cbnz	r3, 800b1e6 <_raise_r+0x32>
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f000 f830 	bl	800b238 <_getpid_r>
 800b1d8:	4622      	mov	r2, r4
 800b1da:	4601      	mov	r1, r0
 800b1dc:	4628      	mov	r0, r5
 800b1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1e2:	f000 b817 	b.w	800b214 <_kill_r>
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d00a      	beq.n	800b200 <_raise_r+0x4c>
 800b1ea:	1c59      	adds	r1, r3, #1
 800b1ec:	d103      	bne.n	800b1f6 <_raise_r+0x42>
 800b1ee:	2316      	movs	r3, #22
 800b1f0:	6003      	str	r3, [r0, #0]
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	e7e7      	b.n	800b1c6 <_raise_r+0x12>
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	4798      	blx	r3
 800b200:	2000      	movs	r0, #0
 800b202:	e7e0      	b.n	800b1c6 <_raise_r+0x12>

0800b204 <raise>:
 800b204:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <raise+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f7ff bfd3 	b.w	800b1b4 <_raise_r>
 800b20e:	bf00      	nop
 800b210:	2000002c 	.word	0x2000002c

0800b214 <_kill_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d07      	ldr	r5, [pc, #28]	@ (800b234 <_kill_r+0x20>)
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	4611      	mov	r1, r2
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	f7f7 f837 	bl	8002294 <_kill>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	d102      	bne.n	800b230 <_kill_r+0x1c>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	b103      	cbz	r3, 800b230 <_kill_r+0x1c>
 800b22e:	6023      	str	r3, [r4, #0]
 800b230:	bd38      	pop	{r3, r4, r5, pc}
 800b232:	bf00      	nop
 800b234:	20000bb0 	.word	0x20000bb0

0800b238 <_getpid_r>:
 800b238:	f7f7 b824 	b.w	8002284 <_getpid>

0800b23c <_init>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	bf00      	nop
 800b240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b242:	bc08      	pop	{r3}
 800b244:	469e      	mov	lr, r3
 800b246:	4770      	bx	lr

0800b248 <_fini>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	bf00      	nop
 800b24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24e:	bc08      	pop	{r3}
 800b250:	469e      	mov	lr, r3
 800b252:	4770      	bx	lr
